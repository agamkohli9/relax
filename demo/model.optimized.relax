@tvm.script.ir_module
class Module:
    @T.prim_func
    def exp1(rxplaceholder: T.Buffer[T.int64(1), "float32"], T_exp: T.Buffer[T.int64(1), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(1)):
            with T.block("T_exp"):
                ax0 = T.axis.spatial(T.int64(1), i0)
                T.reads(rxplaceholder[ax0])
                T.writes(T_exp[ax0])
                T_exp[ax0] = T.exp(rxplaceholder[ax0], dtype="float32")
    
    @T.prim_func
    def squeeze1(rxplaceholder: T.Buffer[(T.int64(1), T.int64(1)), "float32"], T_squeeze: T.Buffer[T.int64(1), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(1)):
            with T.block("T_squeeze"):
                ax0 = T.axis.spatial(T.int64(1), i0)
                T.reads(rxplaceholder[T.int64(0), ax0])
                T.writes(T_squeeze[ax0])
                T_squeeze[ax0] = rxplaceholder[T.int64(0), ax0]
    
    @T.prim_func
    def add(rxplaceholder: T.Buffer[T.int64(3), "float32"], rxplaceholder_1: T.Buffer[(), "float32"], T_add: T.Buffer[T.int64(3), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(3)):
            with T.block("T_add"):
                ax0 = T.axis.spatial(T.int64(3), i0)
                T.reads(rxplaceholder[ax0], rxplaceholder_1[()])
                T.writes(T_add[ax0])
                T_add[ax0] = rxplaceholder[ax0] + rxplaceholder_1[()]
    
    @T.prim_func
    def add1(rxplaceholder: T.Buffer[T.int64(1), "float32"], rxplaceholder_1: T.Buffer[(), "float32"], T_add: T.Buffer[T.int64(1), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(1)):
            with T.block("T_add"):
                ax0 = T.axis.spatial(T.int64(1), i0)
                T.reads(rxplaceholder[ax0], rxplaceholder_1[()])
                T.writes(T_add[ax0])
                T_add[ax0] = rxplaceholder[ax0] + rxplaceholder_1[()]
    
    @R.function
    def main(input: R.Tensor((2,), dtype="float32")) -> R.Tensor(None, dtype="float32", ndim=1):
        # function attr dict
        R.func_attr({"global_symbol": "main"})
        # block 0
        with R.dataflow():
            lv = R.call_tir(expand_dims, (input,), (1, 2), dtype="float32")
            lv1 = R.call_tir(matmul, (lv, metadata["relay.Constant"][0]), (1, 3), dtype="float32")
            lv2 = R.call_tir(squeeze, (lv1,), (3,), dtype="float32")
            lv3 = R.call_tir(negative, (lv2,), (3,), dtype="float32")
            lv4 = R.call_tir(exp, (lv3,), (3,), dtype="float32")
            lv5 = R.call_tir(add, (lv4, 1), (3,), dtype="float32")
            lv6 = R.call_tir(divide, (1, lv5), (3,), dtype="float32")
            lv7 = R.call_tir(expand_dims1, (lv6,), (1, 3), dtype="float32")
            lv8 = R.call_tir(matmul1, (lv7, metadata["relay.Constant"][1]), (1, 1), dtype="float32")
            lv9 = R.call_tir(squeeze1, (lv8,), (1,), dtype="float32")
            lv10 = R.call_tir(negative1, (lv9,), (1,), dtype="float32")
            lv11 = R.call_tir(exp1, (lv10,), (1,), dtype="float32")
            lv12 = R.call_tir(add1, (lv11, 1), (1,), dtype="float32")
            lv13 = R.call_tir(divide1, (1, lv12), (1,), dtype="float32")
            gv: R.Tensor((1,), dtype="float32") = lv13
            R.output(gv)
        return gv
        
    @T.prim_func
    def divide1(rxplaceholder: T.Buffer[(), "float32"], rxplaceholder_1: T.Buffer[T.int64(1), "float32"], T_divide: T.Buffer[T.int64(1), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(1)):
            with T.block("T_divide"):
                ax0 = T.axis.spatial(T.int64(1), i0)
                T.reads(rxplaceholder[()], rxplaceholder_1[ax0])
                T.writes(T_divide[ax0])
                T_divide[ax0] = rxplaceholder[()] / rxplaceholder_1[ax0]
    
    @T.prim_func
    def expand_dims1(rxplaceholder: T.Buffer[T.int64(3), "float32"], T_expand_dims: T.Buffer[(T.int64(1), T.int64(3)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0, i1 in T.grid(T.int64(1), T.int64(3)):
            with T.block("T_expand_dims"):
                ax0, ax1 = T.axis.remap("SS", [i0, i1])
                T.reads(rxplaceholder[ax1])
                T.writes(T_expand_dims[ax0, ax1])
                T_expand_dims[ax0, ax1] = rxplaceholder[ax1]
    
    @T.prim_func
    def divide(rxplaceholder: T.Buffer[(), "float32"], rxplaceholder_1: T.Buffer[T.int64(3), "float32"], T_divide: T.Buffer[T.int64(3), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(3)):
            with T.block("T_divide"):
                ax0 = T.axis.spatial(T.int64(3), i0)
                T.reads(rxplaceholder[()], rxplaceholder_1[ax0])
                T.writes(T_divide[ax0])
                T_divide[ax0] = rxplaceholder[()] / rxplaceholder_1[ax0]
    
    @T.prim_func
    def matmul(rxplaceholder: T.Buffer[(T.int64(1), T.int64(2)), "float32"], rxplaceholder_1: T.Buffer[(T.int64(2), T.int64(3)), "float32"], T_matmul_NN: T.Buffer[(T.int64(1), T.int64(3)), "float32"]):
        # function attr dict
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": True})
        # body
        # with T.block("root")
        for i0, i1, i2 in T.grid(T.int64(1), T.int64(3), T.int64(2)):
            with T.block("T_matmul_NN"):
                i, j, k = T.axis.remap("SSR", [i0, i1, i2])
                T.reads(rxplaceholder[i, k], rxplaceholder_1[k, j])
                T.writes(T_matmul_NN[i, j])
                with T.init():
                    T_matmul_NN[i, j] = T.float32(0)
                T_matmul_NN[i, j] = T_matmul_NN[i, j] + rxplaceholder[i, k] * rxplaceholder_1[k, j]
    
    @T.prim_func
    def squeeze(rxplaceholder: T.Buffer[(T.int64(1), T.int64(3)), "float32"], T_squeeze: T.Buffer[T.int64(3), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(3)):
            with T.block("T_squeeze"):
                ax0 = T.axis.spatial(T.int64(3), i0)
                T.reads(rxplaceholder[T.int64(0), ax0])
                T.writes(T_squeeze[ax0])
                T_squeeze[ax0] = rxplaceholder[T.int64(0), ax0]
    
    @T.prim_func
    def negative(rxplaceholder: T.Buffer[T.int64(3), "float32"], T_negative: T.Buffer[T.int64(3), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(3)):
            with T.block("T_negative"):
                ax0 = T.axis.spatial(T.int64(3), i0)
                T.reads(rxplaceholder[ax0])
                T.writes(T_negative[ax0])
                T_negative[ax0] = T.float32(0) - rxplaceholder[ax0]
    
    @T.prim_func
    def expand_dims(rxplaceholder: T.Buffer[T.int64(2), "float32"], T_expand_dims: T.Buffer[(T.int64(1), T.int64(2)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0, i1 in T.grid(T.int64(1), T.int64(2)):
            with T.block("T_expand_dims"):
                ax0, ax1 = T.axis.remap("SS", [i0, i1])
                T.reads(rxplaceholder[ax1])
                T.writes(T_expand_dims[ax0, ax1])
                T_expand_dims[ax0, ax1] = rxplaceholder[ax1]
    
    @T.prim_func
    def negative1(rxplaceholder: T.Buffer[T.int64(1), "float32"], T_negative: T.Buffer[T.int64(1), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(1)):
            with T.block("T_negative"):
                ax0 = T.axis.spatial(T.int64(1), i0)
                T.reads(rxplaceholder[ax0])
                T.writes(T_negative[ax0])
                T_negative[ax0] = T.float32(0) - rxplaceholder[ax0]
    
    @T.prim_func
    def matmul1(rxplaceholder: T.Buffer[(T.int64(1), T.int64(3)), "float32"], rxplaceholder_1: T.Buffer[(T.int64(3), T.int64(1)), "float32"], T_matmul_NN: T.Buffer[(T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": True})
        # body
        # with T.block("root")
        for i0, i1, i2 in T.grid(T.int64(1), T.int64(1), T.int64(3)):
            with T.block("T_matmul_NN"):
                i, j, k = T.axis.remap("SSR", [i0, i1, i2])
                T.reads(rxplaceholder[i, k], rxplaceholder_1[k, j])
                T.writes(T_matmul_NN[i, j])
                with T.init():
                    T_matmul_NN[i, j] = T.float32(0)
                T_matmul_NN[i, j] = T_matmul_NN[i, j] + rxplaceholder[i, k] * rxplaceholder_1[k, j]
    
    @T.prim_func
    def exp(rxplaceholder: T.Buffer[T.int64(3), "float32"], T_exp: T.Buffer[T.int64(3), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True})
        # body
        # with T.block("root")
        for i0 in T.serial(T.int64(3)):
            with T.block("T_exp"):
                ax0 = T.axis.spatial(T.int64(3), i0)
                T.reads(rxplaceholder[ax0])
                T.writes(T_exp[ax0])
                T_exp[ax0] = T.exp(rxplaceholder[ax0], dtype="float32")
    
