@add = primfn(var_rxplaceholder: handle, var_rxplaceholder_1: handle, var_T_add: handle) -> ()
  attr = {"global_symbol": "add", "tir.noalias": True}
  buffers = {rxplaceholder: Buffer(rxplaceholder_2: Pointer(global float32), float32, [3i64], []),
             rxplaceholder_1: Buffer(rxplaceholder_3: Pointer(global float32), float32, [], []),
             T_add: Buffer(T_add_1: Pointer(global float32), float32, [3i64], [])}
  buffer_map = {var_rxplaceholder: rxplaceholder, var_rxplaceholder_1: rxplaceholder_1, var_T_add: T_add} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0: int64, 0i64, 3i64) {
      block([3i64], "T_add") as [ax0] {
        bind(ax0, i0)
        tir.reads([rxplaceholder[ax0], rxplaceholder_1[]])
        tir.writes([T_add[ax0]])
        T_add[ax0] = (rxplaceholder[ax0] + rxplaceholder_1[])
    }
}

@add1 = primfn(var_rxplaceholder_2: handle, var_rxplaceholder_3: handle, var_T_add_1: handle) -> ()
  attr = {"global_symbol": "add1", "tir.noalias": True}
  buffers = {rxplaceholder_4: Buffer(rxplaceholder_6: Pointer(global float32), float32, [3i64], []),
             rxplaceholder_5: Buffer(rxplaceholder_7: Pointer(global float32), float32, [3i64], []),
             T_add_2: Buffer(T_add_3: Pointer(global float32), float32, [3i64], [])}
  buffer_map = {var_rxplaceholder_2: rxplaceholder_4, var_rxplaceholder_3: rxplaceholder_5, var_T_add_1: T_add_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_1: int64, 0i64, 3i64) {
      block([3i64], "T_add") as [ax0_1] {
        bind(ax0_1, i0_1)
        tir.reads([rxplaceholder_4[ax0_1], rxplaceholder_5[ax0_1]])
        tir.writes([T_add_2[ax0_1]])
        T_add_2[ax0_1] = (rxplaceholder_4[ax0_1] + rxplaceholder_5[ax0_1])
    }
}

@add10 = primfn(var_rxplaceholder_4: handle, var_rxplaceholder_5: handle, var_T_add_2: handle) -> ()
  attr = {"global_symbol": "add10", "tir.noalias": True}
  buffers = {rxplaceholder_8: Buffer(rxplaceholder_10: Pointer(global float32), float32, [128i64], []),
             rxplaceholder_9: Buffer(rxplaceholder_11: Pointer(global float32), float32, [128i64], []),
             T_add_4: Buffer(T_add_5: Pointer(global float32), float32, [128i64], [])}
  buffer_map = {var_rxplaceholder_4: rxplaceholder_8, var_rxplaceholder_5: rxplaceholder_9, var_T_add_2: T_add_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_2: int64, 0i64, 128i64) {
      block([128i64], "T_add") as [ax0_2] {
        bind(ax0_2, i0_2)
        tir.reads([rxplaceholder_8[ax0_2], rxplaceholder_9[ax0_2]])
        tir.writes([T_add_4[ax0_2]])
        T_add_4[ax0_2] = (rxplaceholder_8[ax0_2] + rxplaceholder_9[ax0_2])
    }
}

@add11 = primfn(var_rxplaceholder_6: handle, var_rxplaceholder_7: handle, var_T_add_3: handle) -> ()
  attr = {"global_symbol": "add11", "tir.noalias": True}
  buffers = {rxplaceholder_12: Buffer(rxplaceholder_14: Pointer(global float32), float32, [1, 128, 28, 28], []),
             rxplaceholder_13: Buffer(rxplaceholder_15: Pointer(global float32), float32, [1, 128i64, 1, 1], []),
             T_add_6: Buffer(T_add_7: Pointer(global float32), float32, [1, 128i64, 28, 28], [])}
  buffer_map = {var_rxplaceholder_6: rxplaceholder_12, var_rxplaceholder_7: rxplaceholder_13, var_T_add_3: T_add_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_3: int32, 0, 1) {
      for (i1: int64, 0i64, 128i64) {
        for (i2: int32, 0, 28) {
          for (i3: int32, 0, 28) {
            block([1, 128i64, 28, 28], "T_add") as [ax0_3, ax1, ax2, ax3] {
              bind(ax0_3, i0_3)
              bind(ax1, i1)
              bind(ax2, i2)
              bind(ax3, i3)
              tir.reads([rxplaceholder_12[ax0_3, ax1, ax2, ax3], rxplaceholder_13[ax0_3, ax1, 0, 0]])
              tir.writes([T_add_6[ax0_3, ax1, ax2, ax3]])
              T_add_6[ax0_3, ax1, ax2, ax3] = (rxplaceholder_12[ax0_3, ax1, ax2, ax3] + rxplaceholder_13[ax0_3, ax1, 0, 0])
          }
        }
      }
    }
}

@add12 = primfn(var_rxplaceholder_8: handle, var_rxplaceholder_9: handle, var_T_add_4: handle) -> ()
  attr = {"global_symbol": "add12", "tir.noalias": True}
  buffers = {rxplaceholder_16: Buffer(rxplaceholder_18: Pointer(global float32), float32, [1, 128, 28, 28], []),
             rxplaceholder_17: Buffer(rxplaceholder_19: Pointer(global float32), float32, [1, 128, 28, 28], []),
             T_add_8: Buffer(T_add_9: Pointer(global float32), float32, [1, 128, 28, 28], [])}
  buffer_map = {var_rxplaceholder_8: rxplaceholder_16, var_rxplaceholder_9: rxplaceholder_17, var_T_add_4: T_add_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_4: int32, 0, 1) {
      for (i1_1: int32, 0, 128) {
        for (i2_1: int32, 0, 28) {
          for (i3_1: int32, 0, 28) {
            block([1, 128, 28, 28], "T_add") as [ax0_4, ax1_1, ax2_1, ax3_1] {
              bind(ax0_4, i0_4)
              bind(ax1_1, i1_1)
              bind(ax2_1, i2_1)
              bind(ax3_1, i3_1)
              tir.reads([rxplaceholder_16[ax0_4, ax1_1, ax2_1, ax3_1], rxplaceholder_17[ax0_4, ax1_1, ax2_1, ax3_1]])
              tir.writes([T_add_8[ax0_4, ax1_1, ax2_1, ax3_1]])
              T_add_8[ax0_4, ax1_1, ax2_1, ax3_1] = (rxplaceholder_16[ax0_4, ax1_1, ax2_1, ax3_1] + rxplaceholder_17[ax0_4, ax1_1, ax2_1, ax3_1])
          }
        }
      }
    }
}

@add13 = primfn(var_rxplaceholder_10: handle, var_rxplaceholder_11: handle, var_T_add_5: handle) -> ()
  attr = {"global_symbol": "add13", "tir.noalias": True}
  buffers = {rxplaceholder_20: Buffer(rxplaceholder_22: Pointer(global float32), float32, [1, 128i64, 28, 28], []),
             rxplaceholder_21: Buffer(rxplaceholder_23: Pointer(global float32), float32, [1, 128i64, 1, 1], []),
             T_add_10: Buffer(T_add_11: Pointer(global float32), float32, [1, 128i64, 28, 28], [])}
  buffer_map = {var_rxplaceholder_10: rxplaceholder_20, var_rxplaceholder_11: rxplaceholder_21, var_T_add_5: T_add_10} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_5: int32, 0, 1) {
      for (i1_2: int64, 0i64, 128i64) {
        for (i2_2: int32, 0, 28) {
          for (i3_2: int32, 0, 28) {
            block([1, 128i64, 28, 28], "T_add") as [ax0_5, ax1_2, ax2_2, ax3_2] {
              bind(ax0_5, i0_5)
              bind(ax1_2, i1_2)
              bind(ax2_2, i2_2)
              bind(ax3_2, i3_2)
              tir.reads([rxplaceholder_20[ax0_5, ax1_2, ax2_2, ax3_2], rxplaceholder_21[ax0_5, ax1_2, 0, 0]])
              tir.writes([T_add_10[ax0_5, ax1_2, ax2_2, ax3_2]])
              T_add_10[ax0_5, ax1_2, ax2_2, ax3_2] = (rxplaceholder_20[ax0_5, ax1_2, ax2_2, ax3_2] + rxplaceholder_21[ax0_5, ax1_2, 0, 0])
          }
        }
      }
    }
}

@add14 = primfn(var_rxplaceholder_12: handle, var_rxplaceholder_13: handle, var_T_add_6: handle) -> ()
  attr = {"global_symbol": "add14", "tir.noalias": True}
  buffers = {rxplaceholder_24: Buffer(rxplaceholder_26: Pointer(global float32), float32, [256i64], []),
             rxplaceholder_25: Buffer(rxplaceholder_27: Pointer(global float32), float32, [], []),
             T_add_12: Buffer(T_add_13: Pointer(global float32), float32, [256i64], [])}
  buffer_map = {var_rxplaceholder_12: rxplaceholder_24, var_rxplaceholder_13: rxplaceholder_25, var_T_add_6: T_add_12} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_6: int64, 0i64, 256i64) {
      block([256i64], "T_add") as [ax0_6] {
        bind(ax0_6, i0_6)
        tir.reads([rxplaceholder_24[ax0_6], rxplaceholder_25[]])
        tir.writes([T_add_12[ax0_6]])
        T_add_12[ax0_6] = (rxplaceholder_24[ax0_6] + rxplaceholder_25[])
    }
}

@add15 = primfn(var_rxplaceholder_14: handle, var_rxplaceholder_15: handle, var_T_add_7: handle) -> ()
  attr = {"global_symbol": "add15", "tir.noalias": True}
  buffers = {rxplaceholder_28: Buffer(rxplaceholder_30: Pointer(global float32), float32, [256i64], []),
             rxplaceholder_29: Buffer(rxplaceholder_31: Pointer(global float32), float32, [256i64], []),
             T_add_14: Buffer(T_add_15: Pointer(global float32), float32, [256i64], [])}
  buffer_map = {var_rxplaceholder_14: rxplaceholder_28, var_rxplaceholder_15: rxplaceholder_29, var_T_add_7: T_add_14} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_7: int64, 0i64, 256i64) {
      block([256i64], "T_add") as [ax0_7] {
        bind(ax0_7, i0_7)
        tir.reads([rxplaceholder_28[ax0_7], rxplaceholder_29[ax0_7]])
        tir.writes([T_add_14[ax0_7]])
        T_add_14[ax0_7] = (rxplaceholder_28[ax0_7] + rxplaceholder_29[ax0_7])
    }
}

@add16 = primfn(var_rxplaceholder_16: handle, var_rxplaceholder_17: handle, var_T_add_8: handle) -> ()
  attr = {"global_symbol": "add16", "tir.noalias": True}
  buffers = {rxplaceholder_32: Buffer(rxplaceholder_34: Pointer(global float32), float32, [1, 256, 14, 14], []),
             rxplaceholder_33: Buffer(rxplaceholder_35: Pointer(global float32), float32, [1, 256i64, 1, 1], []),
             T_add_16: Buffer(T_add_17: Pointer(global float32), float32, [1, 256i64, 14, 14], [])}
  buffer_map = {var_rxplaceholder_16: rxplaceholder_32, var_rxplaceholder_17: rxplaceholder_33, var_T_add_8: T_add_16} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_8: int32, 0, 1) {
      for (i1_3: int64, 0i64, 256i64) {
        for (i2_3: int32, 0, 14) {
          for (i3_3: int32, 0, 14) {
            block([1, 256i64, 14, 14], "T_add") as [ax0_8, ax1_3, ax2_3, ax3_3] {
              bind(ax0_8, i0_8)
              bind(ax1_3, i1_3)
              bind(ax2_3, i2_3)
              bind(ax3_3, i3_3)
              tir.reads([rxplaceholder_32[ax0_8, ax1_3, ax2_3, ax3_3], rxplaceholder_33[ax0_8, ax1_3, 0, 0]])
              tir.writes([T_add_16[ax0_8, ax1_3, ax2_3, ax3_3]])
              T_add_16[ax0_8, ax1_3, ax2_3, ax3_3] = (rxplaceholder_32[ax0_8, ax1_3, ax2_3, ax3_3] + rxplaceholder_33[ax0_8, ax1_3, 0, 0])
          }
        }
      }
    }
}

@add17 = primfn(var_rxplaceholder_18: handle, var_rxplaceholder_19: handle, var_T_add_9: handle) -> ()
  attr = {"global_symbol": "add17", "tir.noalias": True}
  buffers = {rxplaceholder_36: Buffer(rxplaceholder_38: Pointer(global float32), float32, [1, 256, 14, 14], []),
             rxplaceholder_37: Buffer(rxplaceholder_39: Pointer(global float32), float32, [1, 256, 14, 14], []),
             T_add_18: Buffer(T_add_19: Pointer(global float32), float32, [1, 256, 14, 14], [])}
  buffer_map = {var_rxplaceholder_18: rxplaceholder_36, var_rxplaceholder_19: rxplaceholder_37, var_T_add_9: T_add_18} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_9: int32, 0, 1) {
      for (i1_4: int32, 0, 256) {
        for (i2_4: int32, 0, 14) {
          for (i3_4: int32, 0, 14) {
            block([1, 256, 14, 14], "T_add") as [ax0_9, ax1_4, ax2_4, ax3_4] {
              bind(ax0_9, i0_9)
              bind(ax1_4, i1_4)
              bind(ax2_4, i2_4)
              bind(ax3_4, i3_4)
              tir.reads([rxplaceholder_36[ax0_9, ax1_4, ax2_4, ax3_4], rxplaceholder_37[ax0_9, ax1_4, ax2_4, ax3_4]])
              tir.writes([T_add_18[ax0_9, ax1_4, ax2_4, ax3_4]])
              T_add_18[ax0_9, ax1_4, ax2_4, ax3_4] = (rxplaceholder_36[ax0_9, ax1_4, ax2_4, ax3_4] + rxplaceholder_37[ax0_9, ax1_4, ax2_4, ax3_4])
          }
        }
      }
    }
}

@add18 = primfn(var_rxplaceholder_20: handle, var_rxplaceholder_21: handle, var_T_add_10: handle) -> ()
  attr = {"global_symbol": "add18", "tir.noalias": True}
  buffers = {rxplaceholder_40: Buffer(rxplaceholder_42: Pointer(global float32), float32, [1, 256i64, 14, 14], []),
             rxplaceholder_41: Buffer(rxplaceholder_43: Pointer(global float32), float32, [1, 256i64, 1, 1], []),
             T_add_20: Buffer(T_add_21: Pointer(global float32), float32, [1, 256i64, 14, 14], [])}
  buffer_map = {var_rxplaceholder_20: rxplaceholder_40, var_rxplaceholder_21: rxplaceholder_41, var_T_add_10: T_add_20} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_10: int32, 0, 1) {
      for (i1_5: int64, 0i64, 256i64) {
        for (i2_5: int32, 0, 14) {
          for (i3_5: int32, 0, 14) {
            block([1, 256i64, 14, 14], "T_add") as [ax0_10, ax1_5, ax2_5, ax3_5] {
              bind(ax0_10, i0_10)
              bind(ax1_5, i1_5)
              bind(ax2_5, i2_5)
              bind(ax3_5, i3_5)
              tir.reads([rxplaceholder_40[ax0_10, ax1_5, ax2_5, ax3_5], rxplaceholder_41[ax0_10, ax1_5, 0, 0]])
              tir.writes([T_add_20[ax0_10, ax1_5, ax2_5, ax3_5]])
              T_add_20[ax0_10, ax1_5, ax2_5, ax3_5] = (rxplaceholder_40[ax0_10, ax1_5, ax2_5, ax3_5] + rxplaceholder_41[ax0_10, ax1_5, 0, 0])
          }
        }
      }
    }
}

@add19 = primfn(var_rxplaceholder_22: handle, var_rxplaceholder_23: handle, var_T_add_11: handle) -> ()
  attr = {"global_symbol": "add19", "tir.noalias": True}
  buffers = {rxplaceholder_44: Buffer(rxplaceholder_46: Pointer(global float32), float32, [512i64], []),
             rxplaceholder_45: Buffer(rxplaceholder_47: Pointer(global float32), float32, [], []),
             T_add_22: Buffer(T_add_23: Pointer(global float32), float32, [512i64], [])}
  buffer_map = {var_rxplaceholder_22: rxplaceholder_44, var_rxplaceholder_23: rxplaceholder_45, var_T_add_11: T_add_22} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_11: int64, 0i64, 512i64) {
      block([512i64], "T_add") as [ax0_11] {
        bind(ax0_11, i0_11)
        tir.reads([rxplaceholder_44[ax0_11], rxplaceholder_45[]])
        tir.writes([T_add_22[ax0_11]])
        T_add_22[ax0_11] = (rxplaceholder_44[ax0_11] + rxplaceholder_45[])
    }
}

@add2 = primfn(var_rxplaceholder_24: handle, var_rxplaceholder_25: handle, var_T_add_12: handle) -> ()
  attr = {"global_symbol": "add2", "tir.noalias": True}
  buffers = {rxplaceholder_48: Buffer(rxplaceholder_50: Pointer(global float32), float32, [1i64, 3i64, 224i64, 224i64], []),
             rxplaceholder_49: Buffer(rxplaceholder_51: Pointer(global float32), float32, [3i64, 1, 1], []),
             T_add_24: Buffer(T_add_25: Pointer(global float32), float32, [1i64, 3i64, 224i64, 224i64], [])}
  buffer_map = {var_rxplaceholder_24: rxplaceholder_48, var_rxplaceholder_25: rxplaceholder_49, var_T_add_12: T_add_24} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_12: int64, 0i64, 1i64) {
      for (i1_6: int64, 0i64, 3i64) {
        for (i2_6: int64, 0i64, 224i64) {
          for (i3_6: int64, 0i64, 224i64) {
            block([1i64, 3i64, 224i64, 224i64], "T_add") as [ax0_12, ax1_6, ax2_6, ax3_6] {
              bind(ax0_12, i0_12)
              bind(ax1_6, i1_6)
              bind(ax2_6, i2_6)
              bind(ax3_6, i3_6)
              tir.reads([rxplaceholder_48[ax0_12, ax1_6, ax2_6, ax3_6], rxplaceholder_49[ax1_6, 0i64, 0i64]])
              tir.writes([T_add_24[ax0_12, ax1_6, ax2_6, ax3_6]])
              T_add_24[ax0_12, ax1_6, ax2_6, ax3_6] = (rxplaceholder_48[ax0_12, ax1_6, ax2_6, ax3_6] + rxplaceholder_49[ax1_6, 0i64, 0i64])
          }
        }
      }
    }
}

@add20 = primfn(var_rxplaceholder_26: handle, var_rxplaceholder_27: handle, var_T_add_13: handle) -> ()
  attr = {"global_symbol": "add20", "tir.noalias": True}
  buffers = {rxplaceholder_52: Buffer(rxplaceholder_54: Pointer(global float32), float32, [512i64], []),
             rxplaceholder_53: Buffer(rxplaceholder_55: Pointer(global float32), float32, [512i64], []),
             T_add_26: Buffer(T_add_27: Pointer(global float32), float32, [512i64], [])}
  buffer_map = {var_rxplaceholder_26: rxplaceholder_52, var_rxplaceholder_27: rxplaceholder_53, var_T_add_13: T_add_26} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_13: int64, 0i64, 512i64) {
      block([512i64], "T_add") as [ax0_13] {
        bind(ax0_13, i0_13)
        tir.reads([rxplaceholder_52[ax0_13], rxplaceholder_53[ax0_13]])
        tir.writes([T_add_26[ax0_13]])
        T_add_26[ax0_13] = (rxplaceholder_52[ax0_13] + rxplaceholder_53[ax0_13])
    }
}

@add21 = primfn(var_rxplaceholder_28: handle, var_rxplaceholder_29: handle, var_T_add_14: handle) -> ()
  attr = {"global_symbol": "add21", "tir.noalias": True}
  buffers = {rxplaceholder_56: Buffer(rxplaceholder_58: Pointer(global float32), float32, [1, 512, 7, 7], []),
             rxplaceholder_57: Buffer(rxplaceholder_59: Pointer(global float32), float32, [1, 512i64, 1, 1], []),
             T_add_28: Buffer(T_add_29: Pointer(global float32), float32, [1, 512i64, 7, 7], [])}
  buffer_map = {var_rxplaceholder_28: rxplaceholder_56, var_rxplaceholder_29: rxplaceholder_57, var_T_add_14: T_add_28} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_14: int32, 0, 1) {
      for (i1_7: int64, 0i64, 512i64) {
        for (i2_7: int32, 0, 7) {
          for (i3_7: int32, 0, 7) {
            block([1, 512i64, 7, 7], "T_add") as [ax0_14, ax1_7, ax2_7, ax3_7] {
              bind(ax0_14, i0_14)
              bind(ax1_7, i1_7)
              bind(ax2_7, i2_7)
              bind(ax3_7, i3_7)
              tir.reads([rxplaceholder_56[ax0_14, ax1_7, ax2_7, ax3_7], rxplaceholder_57[ax0_14, ax1_7, 0, 0]])
              tir.writes([T_add_28[ax0_14, ax1_7, ax2_7, ax3_7]])
              T_add_28[ax0_14, ax1_7, ax2_7, ax3_7] = (rxplaceholder_56[ax0_14, ax1_7, ax2_7, ax3_7] + rxplaceholder_57[ax0_14, ax1_7, 0, 0])
          }
        }
      }
    }
}

@add22 = primfn(var_rxplaceholder_30: handle, var_rxplaceholder_31: handle, var_T_add_15: handle) -> ()
  attr = {"global_symbol": "add22", "tir.noalias": True}
  buffers = {rxplaceholder_60: Buffer(rxplaceholder_62: Pointer(global float32), float32, [1, 512, 7, 7], []),
             rxplaceholder_61: Buffer(rxplaceholder_63: Pointer(global float32), float32, [1, 512, 7, 7], []),
             T_add_30: Buffer(T_add_31: Pointer(global float32), float32, [1, 512, 7, 7], [])}
  buffer_map = {var_rxplaceholder_30: rxplaceholder_60, var_rxplaceholder_31: rxplaceholder_61, var_T_add_15: T_add_30} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_15: int32, 0, 1) {
      for (i1_8: int32, 0, 512) {
        for (i2_8: int32, 0, 7) {
          for (i3_8: int32, 0, 7) {
            block([1, 512, 7, 7], "T_add") as [ax0_15, ax1_8, ax2_8, ax3_8] {
              bind(ax0_15, i0_15)
              bind(ax1_8, i1_8)
              bind(ax2_8, i2_8)
              bind(ax3_8, i3_8)
              tir.reads([rxplaceholder_60[ax0_15, ax1_8, ax2_8, ax3_8], rxplaceholder_61[ax0_15, ax1_8, ax2_8, ax3_8]])
              tir.writes([T_add_30[ax0_15, ax1_8, ax2_8, ax3_8]])
              T_add_30[ax0_15, ax1_8, ax2_8, ax3_8] = (rxplaceholder_60[ax0_15, ax1_8, ax2_8, ax3_8] + rxplaceholder_61[ax0_15, ax1_8, ax2_8, ax3_8])
          }
        }
      }
    }
}

@add23 = primfn(var_rxplaceholder_32: handle, var_rxplaceholder_33: handle, var_T_add_16: handle) -> ()
  attr = {"global_symbol": "add23", "tir.noalias": True}
  buffers = {rxplaceholder_64: Buffer(rxplaceholder_66: Pointer(global float32), float32, [1, 512i64, 7, 7], []),
             rxplaceholder_65: Buffer(rxplaceholder_67: Pointer(global float32), float32, [1, 512i64, 1, 1], []),
             T_add_32: Buffer(T_add_33: Pointer(global float32), float32, [1, 512i64, 7, 7], [])}
  buffer_map = {var_rxplaceholder_32: rxplaceholder_64, var_rxplaceholder_33: rxplaceholder_65, var_T_add_16: T_add_32} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_16: int32, 0, 1) {
      for (i1_9: int64, 0i64, 512i64) {
        for (i2_9: int32, 0, 7) {
          for (i3_9: int32, 0, 7) {
            block([1, 512i64, 7, 7], "T_add") as [ax0_16, ax1_9, ax2_9, ax3_9] {
              bind(ax0_16, i0_16)
              bind(ax1_9, i1_9)
              bind(ax2_9, i2_9)
              bind(ax3_9, i3_9)
              tir.reads([rxplaceholder_64[ax0_16, ax1_9, ax2_9, ax3_9], rxplaceholder_65[ax0_16, ax1_9, 0, 0]])
              tir.writes([T_add_32[ax0_16, ax1_9, ax2_9, ax3_9]])
              T_add_32[ax0_16, ax1_9, ax2_9, ax3_9] = (rxplaceholder_64[ax0_16, ax1_9, ax2_9, ax3_9] + rxplaceholder_65[ax0_16, ax1_9, 0, 0])
          }
        }
      }
    }
}

@add24 = primfn(var_rxplaceholder_34: handle, var_rxplaceholder_35: handle, var_T_add_17: handle) -> ()
  attr = {"global_symbol": "add24", "tir.noalias": True}
  buffers = {rxplaceholder_68: Buffer(rxplaceholder_70: Pointer(global float32), float32, [1, 1000i64], []),
             rxplaceholder_69: Buffer(rxplaceholder_71: Pointer(global float32), float32, [1, 1000i64], []),
             T_add_34: Buffer(T_add_35: Pointer(global float32), float32, [1, 1000i64], [])}
  buffer_map = {var_rxplaceholder_34: rxplaceholder_68, var_rxplaceholder_35: rxplaceholder_69, var_T_add_17: T_add_34} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_17: int32, 0, 1) {
      for (i1_10: int64, 0i64, 1000i64) {
        block([1, 1000i64], "T_add") as [ax0_17, ax1_10] {
          bind(ax0_17, i0_17)
          bind(ax1_10, i1_10)
          tir.reads([rxplaceholder_68[ax0_17, ax1_10], rxplaceholder_69[ax0_17, ax1_10]])
          tir.writes([T_add_34[ax0_17, ax1_10]])
          T_add_34[ax0_17, ax1_10] = (rxplaceholder_68[ax0_17, ax1_10] + rxplaceholder_69[ax0_17, ax1_10])
      }
    }
}

@add3 = primfn(var_rxplaceholder_36: handle, var_rxplaceholder_37: handle, var_T_add_18: handle) -> ()
  attr = {"global_symbol": "add3", "tir.noalias": True}
  buffers = {rxplaceholder_72: Buffer(rxplaceholder_74: Pointer(global float32), float32, [64i64], []),
             rxplaceholder_73: Buffer(rxplaceholder_75: Pointer(global float32), float32, [], []),
             T_add_36: Buffer(T_add_37: Pointer(global float32), float32, [64i64], [])}
  buffer_map = {var_rxplaceholder_36: rxplaceholder_72, var_rxplaceholder_37: rxplaceholder_73, var_T_add_18: T_add_36} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_18: int64, 0i64, 64i64) {
      block([64i64], "T_add") as [ax0_18] {
        bind(ax0_18, i0_18)
        tir.reads([rxplaceholder_72[ax0_18], rxplaceholder_73[]])
        tir.writes([T_add_36[ax0_18]])
        T_add_36[ax0_18] = (rxplaceholder_72[ax0_18] + rxplaceholder_73[])
    }
}

@add4 = primfn(var_rxplaceholder_38: handle, var_rxplaceholder_39: handle, var_T_add_19: handle) -> ()
  attr = {"global_symbol": "add4", "tir.noalias": True}
  buffers = {rxplaceholder_76: Buffer(rxplaceholder_78: Pointer(global float32), float32, [64i64], []),
             rxplaceholder_77: Buffer(rxplaceholder_79: Pointer(global float32), float32, [64i64], []),
             T_add_38: Buffer(T_add_39: Pointer(global float32), float32, [64i64], [])}
  buffer_map = {var_rxplaceholder_38: rxplaceholder_76, var_rxplaceholder_39: rxplaceholder_77, var_T_add_19: T_add_38} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_19: int64, 0i64, 64i64) {
      block([64i64], "T_add") as [ax0_19] {
        bind(ax0_19, i0_19)
        tir.reads([rxplaceholder_76[ax0_19], rxplaceholder_77[ax0_19]])
        tir.writes([T_add_38[ax0_19]])
        T_add_38[ax0_19] = (rxplaceholder_76[ax0_19] + rxplaceholder_77[ax0_19])
    }
}

@add5 = primfn(var_rxplaceholder_40: handle, var_rxplaceholder_41: handle, var_T_add_20: handle) -> ()
  attr = {"global_symbol": "add5", "tir.noalias": True}
  buffers = {rxplaceholder_80: Buffer(rxplaceholder_82: Pointer(global float32), float32, [1, 64, 112, 112], []),
             rxplaceholder_81: Buffer(rxplaceholder_83: Pointer(global float32), float32, [1, 64i64, 1, 1], []),
             T_add_40: Buffer(T_add_41: Pointer(global float32), float32, [1, 64i64, 112, 112], [])}
  buffer_map = {var_rxplaceholder_40: rxplaceholder_80, var_rxplaceholder_41: rxplaceholder_81, var_T_add_20: T_add_40} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_20: int32, 0, 1) {
      for (i1_11: int64, 0i64, 64i64) {
        for (i2_10: int32, 0, 112) {
          for (i3_10: int32, 0, 112) {
            block([1, 64i64, 112, 112], "T_add") as [ax0_20, ax1_11, ax2_10, ax3_10] {
              bind(ax0_20, i0_20)
              bind(ax1_11, i1_11)
              bind(ax2_10, i2_10)
              bind(ax3_10, i3_10)
              tir.reads([rxplaceholder_80[ax0_20, ax1_11, ax2_10, ax3_10], rxplaceholder_81[ax0_20, ax1_11, 0, 0]])
              tir.writes([T_add_40[ax0_20, ax1_11, ax2_10, ax3_10]])
              T_add_40[ax0_20, ax1_11, ax2_10, ax3_10] = (rxplaceholder_80[ax0_20, ax1_11, ax2_10, ax3_10] + rxplaceholder_81[ax0_20, ax1_11, 0, 0])
          }
        }
      }
    }
}

@add6 = primfn(var_rxplaceholder_42: handle, var_rxplaceholder_43: handle, var_T_add_21: handle) -> ()
  attr = {"global_symbol": "add6", "tir.noalias": True}
  buffers = {rxplaceholder_84: Buffer(rxplaceholder_86: Pointer(global float32), float32, [1, 64i64, 56, 56], []),
             rxplaceholder_85: Buffer(rxplaceholder_87: Pointer(global float32), float32, [1, 64i64, 1, 1], []),
             T_add_42: Buffer(T_add_43: Pointer(global float32), float32, [1, 64i64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_42: rxplaceholder_84, var_rxplaceholder_43: rxplaceholder_85, var_T_add_21: T_add_42} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_21: int32, 0, 1) {
      for (i1_12: int64, 0i64, 64i64) {
        for (i2_11: int32, 0, 56) {
          for (i3_11: int32, 0, 56) {
            block([1, 64i64, 56, 56], "T_add") as [ax0_21, ax1_12, ax2_11, ax3_11] {
              bind(ax0_21, i0_21)
              bind(ax1_12, i1_12)
              bind(ax2_11, i2_11)
              bind(ax3_11, i3_11)
              tir.reads([rxplaceholder_84[ax0_21, ax1_12, ax2_11, ax3_11], rxplaceholder_85[ax0_21, ax1_12, 0, 0]])
              tir.writes([T_add_42[ax0_21, ax1_12, ax2_11, ax3_11]])
              T_add_42[ax0_21, ax1_12, ax2_11, ax3_11] = (rxplaceholder_84[ax0_21, ax1_12, ax2_11, ax3_11] + rxplaceholder_85[ax0_21, ax1_12, 0, 0])
          }
        }
      }
    }
}

@add7 = primfn(var_rxplaceholder_44: handle, var_rxplaceholder_45: handle, var_T_add_22: handle) -> ()
  attr = {"global_symbol": "add7", "tir.noalias": True}
  buffers = {rxplaceholder_88: Buffer(rxplaceholder_90: Pointer(global float32), float32, [1, 64, 56, 56], []),
             rxplaceholder_89: Buffer(rxplaceholder_91: Pointer(global float32), float32, [1, 64i64, 1, 1], []),
             T_add_44: Buffer(T_add_45: Pointer(global float32), float32, [1, 64i64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_44: rxplaceholder_88, var_rxplaceholder_45: rxplaceholder_89, var_T_add_22: T_add_44} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_22: int32, 0, 1) {
      for (i1_13: int64, 0i64, 64i64) {
        for (i2_12: int32, 0, 56) {
          for (i3_12: int32, 0, 56) {
            block([1, 64i64, 56, 56], "T_add") as [ax0_22, ax1_13, ax2_12, ax3_12] {
              bind(ax0_22, i0_22)
              bind(ax1_13, i1_13)
              bind(ax2_12, i2_12)
              bind(ax3_12, i3_12)
              tir.reads([rxplaceholder_88[ax0_22, ax1_13, ax2_12, ax3_12], rxplaceholder_89[ax0_22, ax1_13, 0, 0]])
              tir.writes([T_add_44[ax0_22, ax1_13, ax2_12, ax3_12]])
              T_add_44[ax0_22, ax1_13, ax2_12, ax3_12] = (rxplaceholder_88[ax0_22, ax1_13, ax2_12, ax3_12] + rxplaceholder_89[ax0_22, ax1_13, 0, 0])
          }
        }
      }
    }
}

@add8 = primfn(var_rxplaceholder_46: handle, var_rxplaceholder_47: handle, var_T_add_23: handle) -> ()
  attr = {"global_symbol": "add8", "tir.noalias": True}
  buffers = {rxplaceholder_92: Buffer(rxplaceholder_94: Pointer(global float32), float32, [1, 64, 56, 56], []),
             rxplaceholder_93: Buffer(rxplaceholder_95: Pointer(global float32), float32, [1, 64, 56, 56], []),
             T_add_46: Buffer(T_add_47: Pointer(global float32), float32, [1, 64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_46: rxplaceholder_92, var_rxplaceholder_47: rxplaceholder_93, var_T_add_23: T_add_46} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_23: int32, 0, 1) {
      for (i1_14: int32, 0, 64) {
        for (i2_13: int32, 0, 56) {
          for (i3_13: int32, 0, 56) {
            block([1, 64, 56, 56], "T_add") as [ax0_23, ax1_14, ax2_13, ax3_13] {
              bind(ax0_23, i0_23)
              bind(ax1_14, i1_14)
              bind(ax2_13, i2_13)
              bind(ax3_13, i3_13)
              tir.reads([rxplaceholder_92[ax0_23, ax1_14, ax2_13, ax3_13], rxplaceholder_93[ax0_23, ax1_14, ax2_13, ax3_13]])
              tir.writes([T_add_46[ax0_23, ax1_14, ax2_13, ax3_13]])
              T_add_46[ax0_23, ax1_14, ax2_13, ax3_13] = (rxplaceholder_92[ax0_23, ax1_14, ax2_13, ax3_13] + rxplaceholder_93[ax0_23, ax1_14, ax2_13, ax3_13])
          }
        }
      }
    }
}

@add9 = primfn(var_rxplaceholder_48: handle, var_rxplaceholder_49: handle, var_T_add_24: handle) -> ()
  attr = {"global_symbol": "add9", "tir.noalias": True}
  buffers = {rxplaceholder_96: Buffer(rxplaceholder_98: Pointer(global float32), float32, [128i64], []),
             rxplaceholder_97: Buffer(rxplaceholder_99: Pointer(global float32), float32, [], []),
             T_add_48: Buffer(T_add_49: Pointer(global float32), float32, [128i64], [])}
  buffer_map = {var_rxplaceholder_48: rxplaceholder_96, var_rxplaceholder_49: rxplaceholder_97, var_T_add_24: T_add_48} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_24: int64, 0i64, 128i64) {
      block([128i64], "T_add") as [ax0_24] {
        bind(ax0_24, i0_24)
        tir.reads([rxplaceholder_96[ax0_24], rxplaceholder_97[]])
        tir.writes([T_add_48[ax0_24]])
        T_add_48[ax0_24] = (rxplaceholder_96[ax0_24] + rxplaceholder_97[])
    }
}

@batch_flatten = primfn(var_rxplaceholder_50: handle, var_tensor: handle) -> ()
  attr = {"global_symbol": "batch_flatten", "tir.noalias": True}
  buffers = {rxplaceholder_100: Buffer(rxplaceholder_101: Pointer(global float32), float32, [1, 512, 1, 1], []),
             tensor: Buffer(tensor_1: Pointer(global float32), float32, [1, 512], [])}
  buffer_map = {var_rxplaceholder_50: rxplaceholder_100, var_tensor: tensor} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_25: int32, 0, 1) {
      for (i1_15: int32, 0, 512) {
        block([1, 512], "tensor") as [ax0_25, ax1_15] {
          bind(ax0_25, i0_25)
          bind(ax1_15, i1_15)
          tir.reads([rxplaceholder_100[ax0_25, floormod(ax1_15, 512), 0, 0]])
          tir.writes([tensor[ax0_25, ax1_15]])
          tensor[ax0_25, ax1_15] = rxplaceholder_100[ax0_25, floormod(ax1_15, 512), 0, 0]
      }
    }
}

@conv2d = primfn(var_rxplaceholder_51: handle, var_rxplaceholder_52: handle, var_conv2d_nchw: handle) -> ()
  attr = {"global_symbol": "conv2d", "tir.noalias": True}
  buffers = {rxplaceholder_102: Buffer(rxplaceholder_104: Pointer(global float32), float32, [1i64, 3i64, 224i64, 224i64], []),
             rxplaceholder_103: Buffer(rxplaceholder_105: Pointer(global float32), float32, [64i64, 3i64, 7i64, 7i64], []),
             conv2d_nchw: Buffer(conv2d_nchw_1: Pointer(global float32), float32, [1, 64, 112, 112], [])}
  buffer_map = {var_rxplaceholder_51: rxplaceholder_102, var_rxplaceholder_52: rxplaceholder_103, var_conv2d_nchw: conv2d_nchw} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp = alloc_buffer(float32[1i64, 3i64, 230i64, 230i64])
     {
      for (i0_26: int64, 0i64, 1i64) {
        for (i1_16: int64, 0i64, 3i64) {
          for (i2_14: int64, 0i64, 230i64) {
            for (i3_14: int64, 0i64, 230i64) {
              block([1i64, 3i64, 230i64, 230i64], "pad_temp") as [i0_27, i1_17, i2_15, i3_15] {
                bind(i0_27, i0_26)
                bind(i1_17, i1_16)
                bind(i2_15, i2_14)
                bind(i3_15, i3_14)
                tir.reads([rxplaceholder_102[i0_27, i1_17, (i2_15 - 3i64), (i3_15 - 3i64)]])
                tir.writes([pad_temp[i0_27, i1_17, i2_15, i3_15]])
                pad_temp[i0_27, i1_17, i2_15, i3_15] = @tir.if_then_else(((((3i64 <= i2_15) && (i2_15 < 227i64)) && (3i64 <= i3_15)) && (i3_15 < 227i64)), rxplaceholder_102[i0_27, i1_17, (i2_15 - 3i64), (i3_15 - 3i64)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_28: int32, 0, 1) {
        for (i1_18: int32, 0, 64) {
          for (i2_16: int32, 0, 112) {
            for (i3_16: int32, 0, 112) {
              for (i4: int32, 0, 3) {
                for (i5: int32, 0, 7) {
                  for (i6: int32, 0, 7) {
                    block([1, 64, 112, 112, tir.reduce_axis(0, 3), tir.reduce_axis(0, 7), tir.reduce_axis(0, 7)], "conv2d_nchw") as [nn, ff, yy, xx, rc, ry, rx] {
                      bind(nn, i0_28)
                      bind(ff, i1_18)
                      bind(yy, i2_16)
                      bind(xx, i3_16)
                      bind(rc, i4)
                      bind(ry, i5)
                      bind(rx, i6)
                      tir.reads([pad_temp[nn, rc, ((yy*2) + ry), ((xx*2) + rx)], rxplaceholder_103[ff, rc, ry, rx]])
                      tir.writes([conv2d_nchw[nn, ff, yy, xx]])
                      with init() {
                        conv2d_nchw[nn, ff, yy, xx] = 0f32
                      }
                      conv2d_nchw[nn, ff, yy, xx] = (conv2d_nchw[nn, ff, yy, xx] + (pad_temp[nn, rc, ((yy*2) + ry), ((xx*2) + rx)]*rxplaceholder_103[ff, rc, ry, rx]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d1 = primfn(var_rxplaceholder_53: handle, var_rxplaceholder_54: handle, var_conv2d_winograd: handle) -> ()
  attr = {"global_symbol": "conv2d1", "tir.noalias": True}
  buffers = {rxplaceholder_106: Buffer(rxplaceholder_108: Pointer(global float32), float32, [1, 64i64, 56, 56], []),
             rxplaceholder_107: Buffer(rxplaceholder_109: Pointer(global float32), float32, [64i64, 64i64, 3i64, 3i64], []),
             conv2d_winograd: Buffer(conv2d_winograd_1: Pointer(global float32), float32, [1, 64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_53: rxplaceholder_106, var_rxplaceholder_54: rxplaceholder_107, var_conv2d_winograd: conv2d_winograd} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    data_pad = alloc_buffer(float32[1, 64i64, 58, 58])
    input_tile = alloc_buffer(float32[64, 196, 6, 6])
    B = alloc_buffer(float32[6, 6])
    data_pack = alloc_buffer(float32[6, 6, 64, 196])
    G = alloc_buffer(float32[6, 3])
    kernel_pack = alloc_buffer(float32[6, 6, 64, 64])
    bgemm = alloc_buffer(float32[6, 6, 64, 196])
    A = alloc_buffer(float32[6, 4])
    inverse = alloc_buffer(float32[64, 196, 4, 4])
     {
      for (i0_29: int32, 0, 1) {
        for (i1_19: int64, 0i64, 64i64) {
          for (i2_17: int32, 0, 58) {
            for (i3_17: int32, 0, 58) {
              block([1, 64i64, 58, 58], "data_pad") as [i0_30, i1_20, i2_18, i3_18] {
                bind(i0_30, i0_29)
                bind(i1_20, i1_19)
                bind(i2_18, i2_17)
                bind(i3_18, i3_17)
                tir.reads([rxplaceholder_106[i0_30, i1_20, (i2_18 - 1), (i3_18 - 1)]])
                tir.writes([data_pad[i0_30, i1_20, i2_18, i3_18]])
                data_pad[i0_30, i1_20, i2_18, i3_18] = @tir.if_then_else(((((1 <= i2_18) && (i2_18 < 57)) && (1 <= i3_18)) && (i3_18 < 57)), rxplaceholder_106[i0_30, i1_20, (i2_18 - 1), (i3_18 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_31: int32, 0, 64) {
        for (i1_21: int32, 0, 196) {
          for (i2_19: int32, 0, 6) {
            for (i3_19: int32, 0, 6) {
              block([64, 196, 6, 6], "input_tile") as [ci, p, eps, nu] {
                bind(ci, i0_31)
                bind(p, i1_21)
                bind(eps, i2_19)
                bind(nu, i3_19)
                tir.reads([data_pad[floordiv(p, 196), ci, ((floordiv(floormod(p, 196), 14)*4) + eps), ((floormod(p, 14)*4) + nu)]])
                tir.writes([input_tile[ci, p, eps, nu]])
                tir.attrs({"schedule_rule": "None"})
                input_tile[ci, p, eps, nu] = data_pad[floordiv(p, 196), ci, ((floordiv(floormod(p, 196), 14)*4) + eps), ((floormod(p, 14)*4) + nu)]
            }
          }
        }
      }
      for (i0_32: int32, 0, 6) {
        for (i1_22: int32, 0, 6) {
          block([6, 6], "B") as [i, j] {
            bind(i, i0_32)
            bind(j, i1_22)
            tir.reads([])
            tir.writes([B[i, j]])
            tir.attrs({"schedule_rule": "None"})
            B[i, j] = select(((floormod(i, 6) == 5) && (floormod(j, 6) == 5)), 1f32, select(((floormod(i, 6) == 5) && (floormod(j, 6) == 4)), 0f32, select(((floormod(i, 6) == 5) && (floormod(j, 6) == 3)), 0f32, select(((floormod(i, 6) == 5) && (floormod(j, 6) == 2)), 0f32, select(((floormod(i, 6) == 5) && (floormod(j, 6) == 1)), 0f32, select(((floormod(i, 6) == 5) && (floormod(j, 6) == 0)), 0f32, select(((floormod(i, 6) == 4) && (floormod(j, 6) == 5)), 1.5f32, select(((floormod(i, 6) == 4) && (floormod(j, 6) == 4)), 1f32, select(((floormod(i, 6) == 4) && (floormod(j, 6) == 3)), 1f32, select(((floormod(i, 6) == 4) && (floormod(j, 6) == 2)), 1f32, select(((floormod(i, 6) == 4) && (floormod(j, 6) == 1)), 1f32, select(((floormod(i, 6) == 4) && (floormod(j, 6) == 0)), 1f32, select(((floormod(i, 6) == 3) && (floormod(j, 6) == 5)), -2f32, select(((floormod(i, 6) == 3) && (floormod(j, 6) == 4)), -0.5f32, select(((floormod(i, 6) == 3) && (floormod(j, 6) == 3)), 2f32, select(((floormod(i, 6) == 3) && (floormod(j, 6) == 2)), 2.5f32, select(((floormod(i, 6) == 3) && (floormod(j, 6) == 1)), 0.5f32, select(((floormod(i, 6) == 3) && (floormod(j, 6) == 0)), 1.5f32, select(((floormod(i, 6) == 2) && (floormod(j, 6) == 5)), -1.5f32, select(((floormod(i, 6) == 2) && (floormod(j, 6) == 4)), -1f32, select(((floormod(i, 6) == 2) && (floormod(j, 6) == 3)), -1f32, select(((floormod(i, 6) == 2) && (floormod(j, 6) == 2)), 0.5f32, select(((floormod(i, 6) == 2) && (floormod(j, 6) == 1)), -2.5f32, select(((floormod(i, 6) == 2) && (floormod(j, 6) == 0)), -2f32, select(((floormod(i, 6) == 1) && (floormod(j, 6) == 5)), 1f32, select(((floormod(i, 6) == 1) && (floormod(j, 6) == 4)), 0.5f32, select(((floormod(i, 6) == 1) && (floormod(j, 6) == 3)), -2f32, select(((floormod(i, 6) == 1) && (floormod(j, 6) == 2)), -1f32, select(((floormod(i, 6) == 1) && (floormod(j, 6) == 1)), 1f32, select(((floormod(i, 6) == 1) && (floormod(j, 6) == 0)), -1.5f32, select(((floormod(i, 6) == 0) && (floormod(j, 6) == 5)), 0f32, select(((floormod(i, 6) == 0) && (floormod(j, 6) == 4)), 0f32, select(((floormod(i, 6) == 0) && (floormod(j, 6) == 3)), 0f32, select(((floormod(i, 6) == 0) && (floormod(j, 6) == 2)), 0f32, select(((floormod(i, 6) == 0) && (floormod(j, 6) == 1)), 0f32, select(((floormod(i, 6) == 0) && (floormod(j, 6) == 0)), 1f32, 0f32))))))))))))))))))))))))))))))))))))
        }
      }
      for (i0_33: int32, 0, 6) {
        for (i1_23: int32, 0, 6) {
          for (i2_20: int32, 0, 64) {
            for (i3_20: int32, 0, 196) {
              for (i4_1: int32, 0, 6) {
                for (i5_1: int32, 0, 6) {
                  block([6, 6, 64, 196, tir.reduce_axis(0, 6), tir.reduce_axis(0, 6)], "data_pack") as [eps_1, nu_1, ci_1, p_1, r_a, r_b] {
                    bind(eps_1, i0_33)
                    bind(nu_1, i1_23)
                    bind(ci_1, i2_20)
                    bind(p_1, i3_20)
                    bind(r_a, i4_1)
                    bind(r_b, i5_1)
                    tir.reads([input_tile[ci_1, p_1, r_a, r_b], B[min(r_a, r_b):(min(r_a, r_b) + ((max(r_a, r_b) + 1) - min(r_a, r_b))), min(eps_1, nu_1):(min(eps_1, nu_1) + ((max(eps_1, nu_1) + 1) - min(eps_1, nu_1)))]])
                    tir.writes([data_pack[eps_1, nu_1, ci_1, p_1]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                    with init() {
                      data_pack[eps_1, nu_1, ci_1, p_1] = 0f32
                    }
                    data_pack[eps_1, nu_1, ci_1, p_1] = (data_pack[eps_1, nu_1, ci_1, p_1] + ((input_tile[ci_1, p_1, r_a, r_b]*B[r_a, eps_1])*B[r_b, nu_1]))
                }
              }
            }
          }
        }
      }
      for (i0_34: int32, 0, 6) {
        for (i1_24: int32, 0, 3) {
          block([6, 3], "G") as [i_1, j_1] {
            bind(i_1, i0_34)
            bind(j_1, i1_24)
            tir.reads([])
            tir.writes([G[i_1, j_1]])
            tir.attrs({"schedule_rule": "None"})
            G[i_1, j_1] = select(((floormod(i_1, 6) == 5) && (floormod(j_1, 3) == 2)), 1f32, select(((floormod(i_1, 6) == 5) && (floormod(j_1, 3) == 1)), 0f32, select(((floormod(i_1, 6) == 5) && (floormod(j_1, 3) == 0)), 0f32, select(((floormod(i_1, 6) == 4) && (floormod(j_1, 3) == 2)), 0.266667f32, select(((floormod(i_1, 6) == 4) && (floormod(j_1, 3) == 1)), -0.133333f32, select(((floormod(i_1, 6) == 4) && (floormod(j_1, 3) == 0)), 0.0666667f32, select(((floormod(i_1, 6) == 3) && (floormod(j_1, 3) == 2)), -0.266667f32, select(((floormod(i_1, 6) == 3) && (floormod(j_1, 3) == 1)), -0.533333f32, select(((floormod(i_1, 6) == 3) && (floormod(j_1, 3) == 0)), -1.06667f32, select(((floormod(i_1, 6) == 2) && (floormod(j_1, 3) == 2)), 0.333333f32, select(((floormod(i_1, 6) == 2) && (floormod(j_1, 3) == 1)), 0.333333f32, select(((floormod(i_1, 6) == 2) && (floormod(j_1, 3) == 0)), 0.333333f32, select(((floormod(i_1, 6) == 1) && (floormod(j_1, 3) == 2)), -0.333333f32, select(((floormod(i_1, 6) == 1) && (floormod(j_1, 3) == 1)), 0.333333f32, select(((floormod(i_1, 6) == 1) && (floormod(j_1, 3) == 0)), -0.333333f32, select(((floormod(i_1, 6) == 0) && (floormod(j_1, 3) == 2)), 0f32, select(((floormod(i_1, 6) == 0) && (floormod(j_1, 3) == 1)), 0f32, select(((floormod(i_1, 6) == 0) && (floormod(j_1, 3) == 0)), 1f32, 0f32))))))))))))))))))
        }
      }
      for (i0_35: int32, 0, 6) {
        for (i1_25: int32, 0, 6) {
          for (i2_21: int32, 0, 64) {
            for (i3_21: int32, 0, 64) {
              for (i4_2: int32, 0, 3) {
                for (i5_2: int32, 0, 3) {
                  block([6, 6, 64, 64, tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "kernel_pack") as [eps_2, nu_2, ci_2, co, r_kh, r_kw] {
                    bind(eps_2, i0_35)
                    bind(nu_2, i1_25)
                    bind(ci_2, i2_21)
                    bind(co, i3_21)
                    bind(r_kh, i4_2)
                    bind(r_kw, i5_2)
                    tir.reads([rxplaceholder_107[co, ci_2, r_kh, r_kw], G[min(eps_2, nu_2):(min(eps_2, nu_2) + ((max(eps_2, nu_2) + 1) - min(eps_2, nu_2))), min(r_kh, r_kw):(min(r_kh, r_kw) + ((max(r_kh, r_kw) + 1) - min(r_kh, r_kw)))]])
                    tir.writes([kernel_pack[eps_2, nu_2, ci_2, co]])
                    with init() {
                      kernel_pack[eps_2, nu_2, ci_2, co] = 0f32
                    }
                    kernel_pack[eps_2, nu_2, ci_2, co] = (kernel_pack[eps_2, nu_2, ci_2, co] + ((rxplaceholder_107[co, ci_2, r_kh, r_kw]*G[eps_2, r_kh])*G[nu_2, r_kw]))
                }
              }
            }
          }
        }
      }
      for (i0_36: int32, 0, 6) {
        for (i1_26: int32, 0, 6) {
          for (i2_22: int32, 0, 64) {
            for (i3_22: int32, 0, 196) {
              for (i4_3: int32, 0, 64) {
                block([6, 6, 64, 196, tir.reduce_axis(0, 64)], "bgemm") as [eps_3, nu_3, co_1, p_2, ci_3] {
                  bind(eps_3, i0_36)
                  bind(nu_3, i1_26)
                  bind(co_1, i2_22)
                  bind(p_2, i3_22)
                  bind(ci_3, i4_3)
                  tir.reads([data_pack[eps_3, nu_3, ci_3, p_2], kernel_pack[eps_3, nu_3, ci_3, co_1]])
                  tir.writes([bgemm[eps_3, nu_3, co_1, p_2]])
                  with init() {
                    bgemm[eps_3, nu_3, co_1, p_2] = 0f32
                  }
                  bgemm[eps_3, nu_3, co_1, p_2] = (bgemm[eps_3, nu_3, co_1, p_2] + (data_pack[eps_3, nu_3, ci_3, p_2]*kernel_pack[eps_3, nu_3, ci_3, co_1]))
              }
            }
          }
        }
      }
      for (i0_37: int32, 0, 6) {
        for (i1_27: int32, 0, 4) {
          block([6, 4], "A") as [i_2, j_2] {
            bind(i_2, i0_37)
            bind(j_2, i1_27)
            tir.reads([])
            tir.writes([A[i_2, j_2]])
            tir.attrs({"schedule_rule": "None"})
            A[i_2, j_2] = select(((floormod(i_2, 6) == 5) && (floormod(j_2, 4) == 3)), 1f32, select(((floormod(i_2, 6) == 5) && (floormod(j_2, 4) == 2)), 0f32, select(((floormod(i_2, 6) == 5) && (floormod(j_2, 4) == 1)), 0f32, select(((floormod(i_2, 6) == 5) && (floormod(j_2, 4) == 0)), 0f32, select(((floormod(i_2, 6) == 4) && (floormod(j_2, 4) == 3)), -8f32, select(((floormod(i_2, 6) == 4) && (floormod(j_2, 4) == 2)), 4f32, select(((floormod(i_2, 6) == 4) && (floormod(j_2, 4) == 1)), -2f32, select(((floormod(i_2, 6) == 4) && (floormod(j_2, 4) == 0)), 1f32, select(((floormod(i_2, 6) == 3) && (floormod(j_2, 4) == 3)), 0.125f32, select(((floormod(i_2, 6) == 3) && (floormod(j_2, 4) == 2)), 0.25f32, select(((floormod(i_2, 6) == 3) && (floormod(j_2, 4) == 1)), 0.5f32, select(((floormod(i_2, 6) == 3) && (floormod(j_2, 4) == 0)), 1f32, select(((floormod(i_2, 6) == 2) && (floormod(j_2, 4) == 3)), 1f32, select(((floormod(i_2, 6) == 2) && (floormod(j_2, 4) == 2)), 1f32, select(((floormod(i_2, 6) == 2) && (floormod(j_2, 4) == 1)), 1f32, select(((floormod(i_2, 6) == 2) && (floormod(j_2, 4) == 0)), 1f32, select(((floormod(i_2, 6) == 1) && (floormod(j_2, 4) == 3)), -1f32, select(((floormod(i_2, 6) == 1) && (floormod(j_2, 4) == 2)), 1f32, select(((floormod(i_2, 6) == 1) && (floormod(j_2, 4) == 1)), -1f32, select(((floormod(i_2, 6) == 1) && (floormod(j_2, 4) == 0)), 1f32, select(((floormod(i_2, 6) == 0) && (floormod(j_2, 4) == 3)), 0f32, select(((floormod(i_2, 6) == 0) && (floormod(j_2, 4) == 2)), 0f32, select(((floormod(i_2, 6) == 0) && (floormod(j_2, 4) == 1)), 0f32, select(((floormod(i_2, 6) == 0) && (floormod(j_2, 4) == 0)), 1f32, 0f32))))))))))))))))))))))))
        }
      }
      for (i0_38: int32, 0, 64) {
        for (i1_28: int32, 0, 196) {
          for (i2_23: int32, 0, 4) {
            for (i3_23: int32, 0, 4) {
              for (i4_4: int32, 0, 6) {
                for (i5_3: int32, 0, 6) {
                  block([64, 196, 4, 4, tir.reduce_axis(0, 6), tir.reduce_axis(0, 6)], "inverse") as [co_2, p_3, vh, vw, r_a_1, r_b_1] {
                    bind(co_2, i0_38)
                    bind(p_3, i1_28)
                    bind(vh, i2_23)
                    bind(vw, i3_23)
                    bind(r_a_1, i4_4)
                    bind(r_b_1, i5_3)
                    tir.reads([bgemm[r_a_1, r_b_1, co_2, p_3], A[min(r_a_1, r_b_1):(min(r_a_1, r_b_1) + ((max(r_a_1, r_b_1) + 1) - min(r_a_1, r_b_1))), min(vh, vw):(min(vh, vw) + ((max(vh, vw) + 1) - min(vh, vw)))]])
                    tir.writes([inverse[co_2, p_3, vh, vw]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                    with init() {
                      inverse[co_2, p_3, vh, vw] = 0f32
                    }
                    inverse[co_2, p_3, vh, vw] = (inverse[co_2, p_3, vh, vw] + ((bgemm[r_a_1, r_b_1, co_2, p_3]*A[r_a_1, vh])*A[r_b_1, vw]))
                }
              }
            }
          }
        }
      }
      for (i0_39: int32, 0, 1) {
        for (i1_29: int32, 0, 64) {
          for (i2_24: int32, 0, 56) {
            for (i3_24: int32, 0, 56) {
              block([1, 64, 56, 56], "conv2d_winograd") as [n, co_3, h, w] {
                bind(n, i0_39)
                bind(co_3, i1_29)
                bind(h, i2_24)
                bind(w, i3_24)
                tir.reads([inverse[co_3, (((n*196) + (floordiv(h, 4)*14)) + floordiv(w, 4)), floormod(h, 4), floormod(w, 4)]])
                tir.writes([conv2d_winograd[n, co_3, h, w]])
                conv2d_winograd[n, co_3, h, w] = inverse[co_3, (((n*196) + (floordiv(h, 4)*14)) + floordiv(w, 4)), floormod(h, 4), floormod(w, 4)]
            }
          }
        }
      }
    }
}

@conv2d10 = primfn(var_rxplaceholder_55: handle, var_rxplaceholder_56: handle, var_conv2d_winograd_1: handle) -> ()
  attr = {"global_symbol": "conv2d10", "tir.noalias": True}
  buffers = {rxplaceholder_110: Buffer(rxplaceholder_112: Pointer(global float32), float32, [1, 512i64, 7, 7], []),
             rxplaceholder_111: Buffer(rxplaceholder_113: Pointer(global float32), float32, [512i64, 512i64, 3i64, 3i64], []),
             conv2d_winograd_2: Buffer(conv2d_winograd_3: Pointer(global float32), float32, [1, 512, 7, 7], [])}
  buffer_map = {var_rxplaceholder_55: rxplaceholder_110, var_rxplaceholder_56: rxplaceholder_111, var_conv2d_winograd_1: conv2d_winograd_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    data_pad_1 = alloc_buffer(float32[1, 512i64, 9, 9])
    input_tile_1 = alloc_buffer(float32[512, 16, 4, 4])
    B_1 = alloc_buffer(float32[4, 4])
    data_pack_1 = alloc_buffer(float32[4, 4, 512, 16])
    G_1 = alloc_buffer(float32[4, 3])
    kernel_pack_1 = alloc_buffer(float32[4, 4, 512, 512])
    bgemm_1 = alloc_buffer(float32[4, 4, 512, 16])
    A_1 = alloc_buffer(float32[4, 2])
    inverse_1 = alloc_buffer(float32[512, 16, 2, 2])
     {
      for (i0_40: int32, 0, 1) {
        for (i1_30: int64, 0i64, 512i64) {
          for (i2_25: int32, 0, 9) {
            for (i3_25: int32, 0, 9) {
              block([1, 512i64, 9, 9], "data_pad") as [i0_41, i1_31, i2_26, i3_26] {
                bind(i0_41, i0_40)
                bind(i1_31, i1_30)
                bind(i2_26, i2_25)
                bind(i3_26, i3_25)
                tir.reads([rxplaceholder_110[i0_41, i1_31, (i2_26 - 1), (i3_26 - 1)]])
                tir.writes([data_pad_1[i0_41, i1_31, i2_26, i3_26]])
                data_pad_1[i0_41, i1_31, i2_26, i3_26] = @tir.if_then_else(((((1 <= i2_26) && (i2_26 < 8)) && (1 <= i3_26)) && (i3_26 < 8)), rxplaceholder_110[i0_41, i1_31, (i2_26 - 1), (i3_26 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_42: int32, 0, 512) {
        for (i1_32: int32, 0, 16) {
          for (i2_27: int32, 0, 4) {
            for (i3_27: int32, 0, 4) {
              block([512, 16, 4, 4], "input_tile") as [ci_4, p_4, eps_4, nu_4] {
                bind(ci_4, i0_42)
                bind(p_4, i1_32)
                bind(eps_4, i2_27)
                bind(nu_4, i3_27)
                tir.reads([data_pad_1[floordiv(p_4, 16), ci_4, ((floordiv(floormod(p_4, 16), 4)*2) + eps_4), ((floormod(p_4, 4)*2) + nu_4)]])
                tir.writes([input_tile_1[ci_4, p_4, eps_4, nu_4]])
                tir.attrs({"schedule_rule": "None"})
                input_tile_1[ci_4, p_4, eps_4, nu_4] = data_pad_1[floordiv(p_4, 16), ci_4, ((floordiv(floormod(p_4, 16), 4)*2) + eps_4), ((floormod(p_4, 4)*2) + nu_4)]
            }
          }
        }
      }
      for (i0_43: int32, 0, 4) {
        for (i1_33: int32, 0, 4) {
          block([4, 4], "B") as [i_3, j_3] {
            bind(i_3, i0_43)
            bind(j_3, i1_33)
            tir.reads([])
            tir.writes([B_1[i_3, j_3]])
            tir.attrs({"schedule_rule": "None"})
            B_1[i_3, j_3] = select(((floormod(i_3, 4) == 3) && (floormod(j_3, 4) == 3)), 1f32, select(((floormod(i_3, 4) == 3) && (floormod(j_3, 4) == 2)), 0f32, select(((floormod(i_3, 4) == 3) && (floormod(j_3, 4) == 1)), 0f32, select(((floormod(i_3, 4) == 3) && (floormod(j_3, 4) == 0)), 0f32, select(((floormod(i_3, 4) == 2) && (floormod(j_3, 4) == 3)), 0f32, select(((floormod(i_3, 4) == 2) && (floormod(j_3, 4) == 2)), 1f32, select(((floormod(i_3, 4) == 2) && (floormod(j_3, 4) == 1)), 1f32, select(((floormod(i_3, 4) == 2) && (floormod(j_3, 4) == 0)), -1f32, select(((floormod(i_3, 4) == 1) && (floormod(j_3, 4) == 3)), -1f32, select(((floormod(i_3, 4) == 1) && (floormod(j_3, 4) == 2)), 1f32, select(((floormod(i_3, 4) == 1) && (floormod(j_3, 4) == 1)), -1f32, select(((floormod(i_3, 4) == 1) && (floormod(j_3, 4) == 0)), 0f32, select(((floormod(i_3, 4) == 0) && (floormod(j_3, 4) == 3)), 0f32, select(((floormod(i_3, 4) == 0) && (floormod(j_3, 4) == 2)), 0f32, select(((floormod(i_3, 4) == 0) && (floormod(j_3, 4) == 1)), 0f32, select(((floormod(i_3, 4) == 0) && (floormod(j_3, 4) == 0)), 1f32, 0f32))))))))))))))))
        }
      }
      for (i0_44: int32, 0, 4) {
        for (i1_34: int32, 0, 4) {
          for (i2_28: int32, 0, 512) {
            for (i3_28: int32, 0, 16) {
              for (i4_5: int32, 0, 4) {
                for (i5_4: int32, 0, 4) {
                  block([4, 4, 512, 16, tir.reduce_axis(0, 4), tir.reduce_axis(0, 4)], "data_pack") as [eps_5, nu_5, ci_5, p_5, r_a_2, r_b_2] {
                    bind(eps_5, i0_44)
                    bind(nu_5, i1_34)
                    bind(ci_5, i2_28)
                    bind(p_5, i3_28)
                    bind(r_a_2, i4_5)
                    bind(r_b_2, i5_4)
                    tir.reads([input_tile_1[ci_5, p_5, r_a_2, r_b_2], B_1[min(r_a_2, r_b_2):(min(r_a_2, r_b_2) + ((max(r_a_2, r_b_2) + 1) - min(r_a_2, r_b_2))), min(eps_5, nu_5):(min(eps_5, nu_5) + ((max(eps_5, nu_5) + 1) - min(eps_5, nu_5)))]])
                    tir.writes([data_pack_1[eps_5, nu_5, ci_5, p_5]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                    with init() {
                      data_pack_1[eps_5, nu_5, ci_5, p_5] = 0f32
                    }
                    data_pack_1[eps_5, nu_5, ci_5, p_5] = (data_pack_1[eps_5, nu_5, ci_5, p_5] + ((input_tile_1[ci_5, p_5, r_a_2, r_b_2]*B_1[r_a_2, eps_5])*B_1[r_b_2, nu_5]))
                }
              }
            }
          }
        }
      }
      for (i0_45: int32, 0, 4) {
        for (i1_35: int32, 0, 3) {
          block([4, 3], "G") as [i_4, j_4] {
            bind(i_4, i0_45)
            bind(j_4, i1_35)
            tir.reads([])
            tir.writes([G_1[i_4, j_4]])
            tir.attrs({"schedule_rule": "None"})
            G_1[i_4, j_4] = select(((floormod(i_4, 4) == 3) && (floormod(j_4, 3) == 2)), 1f32, select(((floormod(i_4, 4) == 3) && (floormod(j_4, 3) == 1)), 0f32, select(((floormod(i_4, 4) == 3) && (floormod(j_4, 3) == 0)), 0f32, select(((floormod(i_4, 4) == 2) && (floormod(j_4, 3) == 2)), 0.5f32, select(((floormod(i_4, 4) == 2) && (floormod(j_4, 3) == 1)), 0.5f32, select(((floormod(i_4, 4) == 2) && (floormod(j_4, 3) == 0)), 0.5f32, select(((floormod(i_4, 4) == 1) && (floormod(j_4, 3) == 2)), 0.5f32, select(((floormod(i_4, 4) == 1) && (floormod(j_4, 3) == 1)), -0.5f32, select(((floormod(i_4, 4) == 1) && (floormod(j_4, 3) == 0)), 0.5f32, select(((floormod(i_4, 4) == 0) && (floormod(j_4, 3) == 2)), 0f32, select(((floormod(i_4, 4) == 0) && (floormod(j_4, 3) == 1)), 0f32, select(((floormod(i_4, 4) == 0) && (floormod(j_4, 3) == 0)), 1f32, 0f32))))))))))))
        }
      }
      for (i0_46: int32, 0, 4) {
        for (i1_36: int32, 0, 4) {
          for (i2_29: int32, 0, 512) {
            for (i3_29: int32, 0, 512) {
              for (i4_6: int32, 0, 3) {
                for (i5_5: int32, 0, 3) {
                  block([4, 4, 512, 512, tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "kernel_pack") as [eps_6, nu_6, ci_6, co_4, r_kh_1, r_kw_1] {
                    bind(eps_6, i0_46)
                    bind(nu_6, i1_36)
                    bind(ci_6, i2_29)
                    bind(co_4, i3_29)
                    bind(r_kh_1, i4_6)
                    bind(r_kw_1, i5_5)
                    tir.reads([rxplaceholder_111[co_4, ci_6, r_kh_1, r_kw_1], G_1[min(eps_6, nu_6):(min(eps_6, nu_6) + ((max(eps_6, nu_6) + 1) - min(eps_6, nu_6))), min(r_kh_1, r_kw_1):(min(r_kh_1, r_kw_1) + ((max(r_kh_1, r_kw_1) + 1) - min(r_kh_1, r_kw_1)))]])
                    tir.writes([kernel_pack_1[eps_6, nu_6, ci_6, co_4]])
                    with init() {
                      kernel_pack_1[eps_6, nu_6, ci_6, co_4] = 0f32
                    }
                    kernel_pack_1[eps_6, nu_6, ci_6, co_4] = (kernel_pack_1[eps_6, nu_6, ci_6, co_4] + ((rxplaceholder_111[co_4, ci_6, r_kh_1, r_kw_1]*G_1[eps_6, r_kh_1])*G_1[nu_6, r_kw_1]))
                }
              }
            }
          }
        }
      }
      for (i0_47: int32, 0, 4) {
        for (i1_37: int32, 0, 4) {
          for (i2_30: int32, 0, 512) {
            for (i3_30: int32, 0, 16) {
              for (i4_7: int32, 0, 512) {
                block([4, 4, 512, 16, tir.reduce_axis(0, 512)], "bgemm") as [eps_7, nu_7, co_5, p_6, ci_7] {
                  bind(eps_7, i0_47)
                  bind(nu_7, i1_37)
                  bind(co_5, i2_30)
                  bind(p_6, i3_30)
                  bind(ci_7, i4_7)
                  tir.reads([data_pack_1[eps_7, nu_7, ci_7, p_6], kernel_pack_1[eps_7, nu_7, ci_7, co_5]])
                  tir.writes([bgemm_1[eps_7, nu_7, co_5, p_6]])
                  with init() {
                    bgemm_1[eps_7, nu_7, co_5, p_6] = 0f32
                  }
                  bgemm_1[eps_7, nu_7, co_5, p_6] = (bgemm_1[eps_7, nu_7, co_5, p_6] + (data_pack_1[eps_7, nu_7, ci_7, p_6]*kernel_pack_1[eps_7, nu_7, ci_7, co_5]))
              }
            }
          }
        }
      }
      for (i0_48: int32, 0, 4) {
        for (i1_38: int32, 0, 2) {
          block([4, 2], "A") as [i_5, j_5] {
            bind(i_5, i0_48)
            bind(j_5, i1_38)
            tir.reads([])
            tir.writes([A_1[i_5, j_5]])
            tir.attrs({"schedule_rule": "None"})
            A_1[i_5, j_5] = select(((floormod(i_5, 4) == 3) && (floormod(j_5, 2) == 1)), 1f32, select(((floormod(i_5, 4) == 3) && (floormod(j_5, 2) == 0)), 0f32, select(((floormod(i_5, 4) == 2) && (floormod(j_5, 2) == 1)), 1f32, select(((floormod(i_5, 4) == 2) && (floormod(j_5, 2) == 0)), 1f32, select(((floormod(i_5, 4) == 1) && (floormod(j_5, 2) == 1)), -1f32, select(((floormod(i_5, 4) == 1) && (floormod(j_5, 2) == 0)), 1f32, select(((floormod(i_5, 4) == 0) && (floormod(j_5, 2) == 1)), 0f32, select(((floormod(i_5, 4) == 0) && (floormod(j_5, 2) == 0)), 1f32, 0f32))))))))
        }
      }
      for (i0_49: int32, 0, 512) {
        for (i1_39: int32, 0, 16) {
          for (i2_31: int32, 0, 2) {
            for (i3_31: int32, 0, 2) {
              for (i4_8: int32, 0, 4) {
                for (i5_6: int32, 0, 4) {
                  block([512, 16, 2, 2, tir.reduce_axis(0, 4), tir.reduce_axis(0, 4)], "inverse") as [co_6, p_7, vh_1, vw_1, r_a_3, r_b_3] {
                    bind(co_6, i0_49)
                    bind(p_7, i1_39)
                    bind(vh_1, i2_31)
                    bind(vw_1, i3_31)
                    bind(r_a_3, i4_8)
                    bind(r_b_3, i5_6)
                    tir.reads([bgemm_1[r_a_3, r_b_3, co_6, p_7], A_1[min(r_a_3, r_b_3):(min(r_a_3, r_b_3) + ((max(r_a_3, r_b_3) + 1) - min(r_a_3, r_b_3))), min(vh_1, vw_1):(min(vh_1, vw_1) + ((max(vh_1, vw_1) + 1) - min(vh_1, vw_1)))]])
                    tir.writes([inverse_1[co_6, p_7, vh_1, vw_1]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                    with init() {
                      inverse_1[co_6, p_7, vh_1, vw_1] = 0f32
                    }
                    inverse_1[co_6, p_7, vh_1, vw_1] = (inverse_1[co_6, p_7, vh_1, vw_1] + ((bgemm_1[r_a_3, r_b_3, co_6, p_7]*A_1[r_a_3, vh_1])*A_1[r_b_3, vw_1]))
                }
              }
            }
          }
        }
      }
      for (i0_50: int32, 0, 1) {
        for (i1_40: int32, 0, 512) {
          for (i2_32: int32, 0, 7) {
            for (i3_32: int32, 0, 7) {
              block([1, 512, 7, 7], "conv2d_winograd") as [n_1, co_7, h_1, w_1] {
                bind(n_1, i0_50)
                bind(co_7, i1_40)
                bind(h_1, i2_32)
                bind(w_1, i3_32)
                tir.reads([inverse_1[co_7, (((n_1*16) + (floordiv(h_1, 2)*4)) + floordiv(w_1, 2)), floormod(h_1, 2), floormod(w_1, 2)]])
                tir.writes([conv2d_winograd_2[n_1, co_7, h_1, w_1]])
                conv2d_winograd_2[n_1, co_7, h_1, w_1] = inverse_1[co_7, (((n_1*16) + (floordiv(h_1, 2)*4)) + floordiv(w_1, 2)), floormod(h_1, 2), floormod(w_1, 2)]
            }
          }
        }
      }
    }
}

@conv2d11 = primfn(var_rxplaceholder_57: handle, var_rxplaceholder_58: handle, var_conv2d_nchw_1: handle) -> ()
  attr = {"global_symbol": "conv2d11", "tir.noalias": True}
  buffers = {rxplaceholder_114: Buffer(rxplaceholder_116: Pointer(global float32), float32, [1, 256i64, 14, 14], []),
             rxplaceholder_115: Buffer(rxplaceholder_117: Pointer(global float32), float32, [512i64, 256i64, 1i64, 1i64], []),
             conv2d_nchw_2: Buffer(conv2d_nchw_3: Pointer(global float32), float32, [1, 512, 7, 7], [])}
  buffer_map = {var_rxplaceholder_57: rxplaceholder_114, var_rxplaceholder_58: rxplaceholder_115, var_conv2d_nchw_1: conv2d_nchw_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_1 = alloc_buffer(float32[1, 256i64, 14, 14])
     {
      for (i0_51: int32, 0, 1) {
        for (i1_41: int64, 0i64, 256i64) {
          for (i2_33: int32, 0, 14) {
            for (i3_33: int32, 0, 14) {
              block([1, 256i64, 14, 14], "pad_temp") as [i0_52, i1_42, i2_34, i3_34] {
                bind(i0_52, i0_51)
                bind(i1_42, i1_41)
                bind(i2_34, i2_33)
                bind(i3_34, i3_33)
                tir.reads([rxplaceholder_114[i0_52, i1_42, i2_34, i3_34]])
                tir.writes([pad_temp_1[i0_52, i1_42, i2_34, i3_34]])
                pad_temp_1[i0_52, i1_42, i2_34, i3_34] = rxplaceholder_114[i0_52, i1_42, i2_34, i3_34]
            }
          }
        }
      }
      for (i0_53: int32, 0, 1) {
        for (i1_43: int32, 0, 512) {
          for (i2_35: int32, 0, 7) {
            for (i3_35: int32, 0, 7) {
              for (i4_9: int32, 0, 256) {
                for (i5_7: int32, 0, 1) {
                  for (i6_1: int32, 0, 1) {
                    block([1, 512, 7, 7, tir.reduce_axis(0, 256), tir.reduce_axis(0, 1), tir.reduce_axis(0, 1)], "conv2d_nchw") as [nn_1, ff_1, yy_1, xx_1, rc_1, ry_1, rx_1] {
                      bind(nn_1, i0_53)
                      bind(ff_1, i1_43)
                      bind(yy_1, i2_35)
                      bind(xx_1, i3_35)
                      bind(rc_1, i4_9)
                      bind(ry_1, i5_7)
                      bind(rx_1, i6_1)
                      tir.reads([pad_temp_1[nn_1, rc_1, ((yy_1*2) + ry_1), ((xx_1*2) + rx_1)], rxplaceholder_115[ff_1, rc_1, ry_1, rx_1]])
                      tir.writes([conv2d_nchw_2[nn_1, ff_1, yy_1, xx_1]])
                      with init() {
                        conv2d_nchw_2[nn_1, ff_1, yy_1, xx_1] = 0f32
                      }
                      conv2d_nchw_2[nn_1, ff_1, yy_1, xx_1] = (conv2d_nchw_2[nn_1, ff_1, yy_1, xx_1] + (pad_temp_1[nn_1, rc_1, ((yy_1*2) + ry_1), ((xx_1*2) + rx_1)]*rxplaceholder_115[ff_1, rc_1, ry_1, rx_1]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d2 = primfn(var_rxplaceholder_59: handle, var_rxplaceholder_60: handle, var_conv2d_nchw_2: handle) -> ()
  attr = {"global_symbol": "conv2d2", "tir.noalias": True}
  buffers = {rxplaceholder_118: Buffer(rxplaceholder_120: Pointer(global float32), float32, [1, 64i64, 56, 56], []),
             rxplaceholder_119: Buffer(rxplaceholder_121: Pointer(global float32), float32, [64i64, 64i64, 1i64, 1i64], []),
             conv2d_nchw_4: Buffer(conv2d_nchw_5: Pointer(global float32), float32, [1, 64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_59: rxplaceholder_118, var_rxplaceholder_60: rxplaceholder_119, var_conv2d_nchw_2: conv2d_nchw_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_2 = alloc_buffer(float32[1, 64i64, 56, 56])
     {
      for (i0_54: int32, 0, 1) {
        for (i1_44: int64, 0i64, 64i64) {
          for (i2_36: int32, 0, 56) {
            for (i3_36: int32, 0, 56) {
              block([1, 64i64, 56, 56], "pad_temp") as [i0_55, i1_45, i2_37, i3_37] {
                bind(i0_55, i0_54)
                bind(i1_45, i1_44)
                bind(i2_37, i2_36)
                bind(i3_37, i3_36)
                tir.reads([rxplaceholder_118[i0_55, i1_45, i2_37, i3_37]])
                tir.writes([pad_temp_2[i0_55, i1_45, i2_37, i3_37]])
                pad_temp_2[i0_55, i1_45, i2_37, i3_37] = rxplaceholder_118[i0_55, i1_45, i2_37, i3_37]
            }
          }
        }
      }
      for (i0_56: int32, 0, 1) {
        for (i1_46: int32, 0, 64) {
          for (i2_38: int32, 0, 56) {
            for (i3_38: int32, 0, 56) {
              for (i4_10: int32, 0, 64) {
                for (i5_8: int32, 0, 1) {
                  for (i6_2: int32, 0, 1) {
                    block([1, 64, 56, 56, tir.reduce_axis(0, 64), tir.reduce_axis(0, 1), tir.reduce_axis(0, 1)], "conv2d_nchw") as [nn_2, ff_2, yy_2, xx_2, rc_2, ry_2, rx_2] {
                      bind(nn_2, i0_56)
                      bind(ff_2, i1_46)
                      bind(yy_2, i2_38)
                      bind(xx_2, i3_38)
                      bind(rc_2, i4_10)
                      bind(ry_2, i5_8)
                      bind(rx_2, i6_2)
                      tir.reads([pad_temp_2[nn_2, rc_2, (yy_2 + ry_2), (xx_2 + rx_2)], rxplaceholder_119[ff_2, rc_2, ry_2, rx_2]])
                      tir.writes([conv2d_nchw_4[nn_2, ff_2, yy_2, xx_2]])
                      with init() {
                        conv2d_nchw_4[nn_2, ff_2, yy_2, xx_2] = 0f32
                      }
                      conv2d_nchw_4[nn_2, ff_2, yy_2, xx_2] = (conv2d_nchw_4[nn_2, ff_2, yy_2, xx_2] + (pad_temp_2[nn_2, rc_2, (yy_2 + ry_2), (xx_2 + rx_2)]*rxplaceholder_119[ff_2, rc_2, ry_2, rx_2]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d3 = primfn(var_rxplaceholder_61: handle, var_rxplaceholder_62: handle, var_conv2d_nchw_3: handle) -> ()
  attr = {"global_symbol": "conv2d3", "tir.noalias": True}
  buffers = {rxplaceholder_122: Buffer(rxplaceholder_124: Pointer(global float32), float32, [1, 64i64, 56, 56], []),
             rxplaceholder_123: Buffer(rxplaceholder_125: Pointer(global float32), float32, [128i64, 64i64, 3i64, 3i64], []),
             conv2d_nchw_6: Buffer(conv2d_nchw_7: Pointer(global float32), float32, [1, 128, 28, 28], [])}
  buffer_map = {var_rxplaceholder_61: rxplaceholder_122, var_rxplaceholder_62: rxplaceholder_123, var_conv2d_nchw_3: conv2d_nchw_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_3 = alloc_buffer(float32[1, 64i64, 58, 58])
     {
      for (i0_57: int32, 0, 1) {
        for (i1_47: int64, 0i64, 64i64) {
          for (i2_39: int32, 0, 58) {
            for (i3_39: int32, 0, 58) {
              block([1, 64i64, 58, 58], "pad_temp") as [i0_58, i1_48, i2_40, i3_40] {
                bind(i0_58, i0_57)
                bind(i1_48, i1_47)
                bind(i2_40, i2_39)
                bind(i3_40, i3_39)
                tir.reads([rxplaceholder_122[i0_58, i1_48, (i2_40 - 1), (i3_40 - 1)]])
                tir.writes([pad_temp_3[i0_58, i1_48, i2_40, i3_40]])
                pad_temp_3[i0_58, i1_48, i2_40, i3_40] = @tir.if_then_else(((((1 <= i2_40) && (i2_40 < 57)) && (1 <= i3_40)) && (i3_40 < 57)), rxplaceholder_122[i0_58, i1_48, (i2_40 - 1), (i3_40 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_59: int32, 0, 1) {
        for (i1_49: int32, 0, 128) {
          for (i2_41: int32, 0, 28) {
            for (i3_41: int32, 0, 28) {
              for (i4_11: int32, 0, 64) {
                for (i5_9: int32, 0, 3) {
                  for (i6_3: int32, 0, 3) {
                    block([1, 128, 28, 28, tir.reduce_axis(0, 64), tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "conv2d_nchw") as [nn_3, ff_3, yy_3, xx_3, rc_3, ry_3, rx_3] {
                      bind(nn_3, i0_59)
                      bind(ff_3, i1_49)
                      bind(yy_3, i2_41)
                      bind(xx_3, i3_41)
                      bind(rc_3, i4_11)
                      bind(ry_3, i5_9)
                      bind(rx_3, i6_3)
                      tir.reads([pad_temp_3[nn_3, rc_3, ((yy_3*2) + ry_3), ((xx_3*2) + rx_3)], rxplaceholder_123[ff_3, rc_3, ry_3, rx_3]])
                      tir.writes([conv2d_nchw_6[nn_3, ff_3, yy_3, xx_3]])
                      with init() {
                        conv2d_nchw_6[nn_3, ff_3, yy_3, xx_3] = 0f32
                      }
                      conv2d_nchw_6[nn_3, ff_3, yy_3, xx_3] = (conv2d_nchw_6[nn_3, ff_3, yy_3, xx_3] + (pad_temp_3[nn_3, rc_3, ((yy_3*2) + ry_3), ((xx_3*2) + rx_3)]*rxplaceholder_123[ff_3, rc_3, ry_3, rx_3]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d4 = primfn(var_rxplaceholder_63: handle, var_rxplaceholder_64: handle, var_conv2d_winograd_2: handle) -> ()
  attr = {"global_symbol": "conv2d4", "tir.noalias": True}
  buffers = {rxplaceholder_126: Buffer(rxplaceholder_128: Pointer(global float32), float32, [1, 128i64, 28, 28], []),
             rxplaceholder_127: Buffer(rxplaceholder_129: Pointer(global float32), float32, [128i64, 128i64, 3i64, 3i64], []),
             conv2d_winograd_4: Buffer(conv2d_winograd_5: Pointer(global float32), float32, [1, 128, 28, 28], [])}
  buffer_map = {var_rxplaceholder_63: rxplaceholder_126, var_rxplaceholder_64: rxplaceholder_127, var_conv2d_winograd_2: conv2d_winograd_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    data_pad_2 = alloc_buffer(float32[1, 128i64, 30, 30])
    input_tile_2 = alloc_buffer(float32[128, 196, 4, 4])
    B_2 = alloc_buffer(float32[4, 4])
    data_pack_2 = alloc_buffer(float32[4, 4, 128, 196])
    G_2 = alloc_buffer(float32[4, 3])
    kernel_pack_2 = alloc_buffer(float32[4, 4, 128, 128])
    bgemm_2 = alloc_buffer(float32[4, 4, 128, 196])
    A_2 = alloc_buffer(float32[4, 2])
    inverse_2 = alloc_buffer(float32[128, 196, 2, 2])
     {
      for (i0_60: int32, 0, 1) {
        for (i1_50: int64, 0i64, 128i64) {
          for (i2_42: int32, 0, 30) {
            for (i3_42: int32, 0, 30) {
              block([1, 128i64, 30, 30], "data_pad") as [i0_61, i1_51, i2_43, i3_43] {
                bind(i0_61, i0_60)
                bind(i1_51, i1_50)
                bind(i2_43, i2_42)
                bind(i3_43, i3_42)
                tir.reads([rxplaceholder_126[i0_61, i1_51, (i2_43 - 1), (i3_43 - 1)]])
                tir.writes([data_pad_2[i0_61, i1_51, i2_43, i3_43]])
                data_pad_2[i0_61, i1_51, i2_43, i3_43] = @tir.if_then_else(((((1 <= i2_43) && (i2_43 < 29)) && (1 <= i3_43)) && (i3_43 < 29)), rxplaceholder_126[i0_61, i1_51, (i2_43 - 1), (i3_43 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_62: int32, 0, 128) {
        for (i1_52: int32, 0, 196) {
          for (i2_44: int32, 0, 4) {
            for (i3_44: int32, 0, 4) {
              block([128, 196, 4, 4], "input_tile") as [ci_8, p_8, eps_8, nu_8] {
                bind(ci_8, i0_62)
                bind(p_8, i1_52)
                bind(eps_8, i2_44)
                bind(nu_8, i3_44)
                tir.reads([data_pad_2[floordiv(p_8, 196), ci_8, ((floordiv(floormod(p_8, 196), 14)*2) + eps_8), ((floormod(p_8, 14)*2) + nu_8)]])
                tir.writes([input_tile_2[ci_8, p_8, eps_8, nu_8]])
                tir.attrs({"schedule_rule": "None"})
                input_tile_2[ci_8, p_8, eps_8, nu_8] = data_pad_2[floordiv(p_8, 196), ci_8, ((floordiv(floormod(p_8, 196), 14)*2) + eps_8), ((floormod(p_8, 14)*2) + nu_8)]
            }
          }
        }
      }
      for (i0_63: int32, 0, 4) {
        for (i1_53: int32, 0, 4) {
          block([4, 4], "B") as [i_6, j_6] {
            bind(i_6, i0_63)
            bind(j_6, i1_53)
            tir.reads([])
            tir.writes([B_2[i_6, j_6]])
            tir.attrs({"schedule_rule": "None"})
            B_2[i_6, j_6] = select(((floormod(i_6, 4) == 3) && (floormod(j_6, 4) == 3)), 1f32, select(((floormod(i_6, 4) == 3) && (floormod(j_6, 4) == 2)), 0f32, select(((floormod(i_6, 4) == 3) && (floormod(j_6, 4) == 1)), 0f32, select(((floormod(i_6, 4) == 3) && (floormod(j_6, 4) == 0)), 0f32, select(((floormod(i_6, 4) == 2) && (floormod(j_6, 4) == 3)), 0f32, select(((floormod(i_6, 4) == 2) && (floormod(j_6, 4) == 2)), 1f32, select(((floormod(i_6, 4) == 2) && (floormod(j_6, 4) == 1)), 1f32, select(((floormod(i_6, 4) == 2) && (floormod(j_6, 4) == 0)), -1f32, select(((floormod(i_6, 4) == 1) && (floormod(j_6, 4) == 3)), -1f32, select(((floormod(i_6, 4) == 1) && (floormod(j_6, 4) == 2)), 1f32, select(((floormod(i_6, 4) == 1) && (floormod(j_6, 4) == 1)), -1f32, select(((floormod(i_6, 4) == 1) && (floormod(j_6, 4) == 0)), 0f32, select(((floormod(i_6, 4) == 0) && (floormod(j_6, 4) == 3)), 0f32, select(((floormod(i_6, 4) == 0) && (floormod(j_6, 4) == 2)), 0f32, select(((floormod(i_6, 4) == 0) && (floormod(j_6, 4) == 1)), 0f32, select(((floormod(i_6, 4) == 0) && (floormod(j_6, 4) == 0)), 1f32, 0f32))))))))))))))))
        }
      }
      for (i0_64: int32, 0, 4) {
        for (i1_54: int32, 0, 4) {
          for (i2_45: int32, 0, 128) {
            for (i3_45: int32, 0, 196) {
              for (i4_12: int32, 0, 4) {
                for (i5_10: int32, 0, 4) {
                  block([4, 4, 128, 196, tir.reduce_axis(0, 4), tir.reduce_axis(0, 4)], "data_pack") as [eps_9, nu_9, ci_9, p_9, r_a_4, r_b_4] {
                    bind(eps_9, i0_64)
                    bind(nu_9, i1_54)
                    bind(ci_9, i2_45)
                    bind(p_9, i3_45)
                    bind(r_a_4, i4_12)
                    bind(r_b_4, i5_10)
                    tir.reads([input_tile_2[ci_9, p_9, r_a_4, r_b_4], B_2[min(r_a_4, r_b_4):(min(r_a_4, r_b_4) + ((max(r_a_4, r_b_4) + 1) - min(r_a_4, r_b_4))), min(eps_9, nu_9):(min(eps_9, nu_9) + ((max(eps_9, nu_9) + 1) - min(eps_9, nu_9)))]])
                    tir.writes([data_pack_2[eps_9, nu_9, ci_9, p_9]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                    with init() {
                      data_pack_2[eps_9, nu_9, ci_9, p_9] = 0f32
                    }
                    data_pack_2[eps_9, nu_9, ci_9, p_9] = (data_pack_2[eps_9, nu_9, ci_9, p_9] + ((input_tile_2[ci_9, p_9, r_a_4, r_b_4]*B_2[r_a_4, eps_9])*B_2[r_b_4, nu_9]))
                }
              }
            }
          }
        }
      }
      for (i0_65: int32, 0, 4) {
        for (i1_55: int32, 0, 3) {
          block([4, 3], "G") as [i_7, j_7] {
            bind(i_7, i0_65)
            bind(j_7, i1_55)
            tir.reads([])
            tir.writes([G_2[i_7, j_7]])
            tir.attrs({"schedule_rule": "None"})
            G_2[i_7, j_7] = select(((floormod(i_7, 4) == 3) && (floormod(j_7, 3) == 2)), 1f32, select(((floormod(i_7, 4) == 3) && (floormod(j_7, 3) == 1)), 0f32, select(((floormod(i_7, 4) == 3) && (floormod(j_7, 3) == 0)), 0f32, select(((floormod(i_7, 4) == 2) && (floormod(j_7, 3) == 2)), 0.5f32, select(((floormod(i_7, 4) == 2) && (floormod(j_7, 3) == 1)), 0.5f32, select(((floormod(i_7, 4) == 2) && (floormod(j_7, 3) == 0)), 0.5f32, select(((floormod(i_7, 4) == 1) && (floormod(j_7, 3) == 2)), 0.5f32, select(((floormod(i_7, 4) == 1) && (floormod(j_7, 3) == 1)), -0.5f32, select(((floormod(i_7, 4) == 1) && (floormod(j_7, 3) == 0)), 0.5f32, select(((floormod(i_7, 4) == 0) && (floormod(j_7, 3) == 2)), 0f32, select(((floormod(i_7, 4) == 0) && (floormod(j_7, 3) == 1)), 0f32, select(((floormod(i_7, 4) == 0) && (floormod(j_7, 3) == 0)), 1f32, 0f32))))))))))))
        }
      }
      for (i0_66: int32, 0, 4) {
        for (i1_56: int32, 0, 4) {
          for (i2_46: int32, 0, 128) {
            for (i3_46: int32, 0, 128) {
              for (i4_13: int32, 0, 3) {
                for (i5_11: int32, 0, 3) {
                  block([4, 4, 128, 128, tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "kernel_pack") as [eps_10, nu_10, ci_10, co_8, r_kh_2, r_kw_2] {
                    bind(eps_10, i0_66)
                    bind(nu_10, i1_56)
                    bind(ci_10, i2_46)
                    bind(co_8, i3_46)
                    bind(r_kh_2, i4_13)
                    bind(r_kw_2, i5_11)
                    tir.reads([rxplaceholder_127[co_8, ci_10, r_kh_2, r_kw_2], G_2[min(eps_10, nu_10):(min(eps_10, nu_10) + ((max(eps_10, nu_10) + 1) - min(eps_10, nu_10))), min(r_kh_2, r_kw_2):(min(r_kh_2, r_kw_2) + ((max(r_kh_2, r_kw_2) + 1) - min(r_kh_2, r_kw_2)))]])
                    tir.writes([kernel_pack_2[eps_10, nu_10, ci_10, co_8]])
                    with init() {
                      kernel_pack_2[eps_10, nu_10, ci_10, co_8] = 0f32
                    }
                    kernel_pack_2[eps_10, nu_10, ci_10, co_8] = (kernel_pack_2[eps_10, nu_10, ci_10, co_8] + ((rxplaceholder_127[co_8, ci_10, r_kh_2, r_kw_2]*G_2[eps_10, r_kh_2])*G_2[nu_10, r_kw_2]))
                }
              }
            }
          }
        }
      }
      for (i0_67: int32, 0, 4) {
        for (i1_57: int32, 0, 4) {
          for (i2_47: int32, 0, 128) {
            for (i3_47: int32, 0, 196) {
              for (i4_14: int32, 0, 128) {
                block([4, 4, 128, 196, tir.reduce_axis(0, 128)], "bgemm") as [eps_11, nu_11, co_9, p_10, ci_11] {
                  bind(eps_11, i0_67)
                  bind(nu_11, i1_57)
                  bind(co_9, i2_47)
                  bind(p_10, i3_47)
                  bind(ci_11, i4_14)
                  tir.reads([data_pack_2[eps_11, nu_11, ci_11, p_10], kernel_pack_2[eps_11, nu_11, ci_11, co_9]])
                  tir.writes([bgemm_2[eps_11, nu_11, co_9, p_10]])
                  with init() {
                    bgemm_2[eps_11, nu_11, co_9, p_10] = 0f32
                  }
                  bgemm_2[eps_11, nu_11, co_9, p_10] = (bgemm_2[eps_11, nu_11, co_9, p_10] + (data_pack_2[eps_11, nu_11, ci_11, p_10]*kernel_pack_2[eps_11, nu_11, ci_11, co_9]))
              }
            }
          }
        }
      }
      for (i0_68: int32, 0, 4) {
        for (i1_58: int32, 0, 2) {
          block([4, 2], "A") as [i_8, j_8] {
            bind(i_8, i0_68)
            bind(j_8, i1_58)
            tir.reads([])
            tir.writes([A_2[i_8, j_8]])
            tir.attrs({"schedule_rule": "None"})
            A_2[i_8, j_8] = select(((floormod(i_8, 4) == 3) && (floormod(j_8, 2) == 1)), 1f32, select(((floormod(i_8, 4) == 3) && (floormod(j_8, 2) == 0)), 0f32, select(((floormod(i_8, 4) == 2) && (floormod(j_8, 2) == 1)), 1f32, select(((floormod(i_8, 4) == 2) && (floormod(j_8, 2) == 0)), 1f32, select(((floormod(i_8, 4) == 1) && (floormod(j_8, 2) == 1)), -1f32, select(((floormod(i_8, 4) == 1) && (floormod(j_8, 2) == 0)), 1f32, select(((floormod(i_8, 4) == 0) && (floormod(j_8, 2) == 1)), 0f32, select(((floormod(i_8, 4) == 0) && (floormod(j_8, 2) == 0)), 1f32, 0f32))))))))
        }
      }
      for (i0_69: int32, 0, 128) {
        for (i1_59: int32, 0, 196) {
          for (i2_48: int32, 0, 2) {
            for (i3_48: int32, 0, 2) {
              for (i4_15: int32, 0, 4) {
                for (i5_12: int32, 0, 4) {
                  block([128, 196, 2, 2, tir.reduce_axis(0, 4), tir.reduce_axis(0, 4)], "inverse") as [co_10, p_11, vh_2, vw_2, r_a_5, r_b_5] {
                    bind(co_10, i0_69)
                    bind(p_11, i1_59)
                    bind(vh_2, i2_48)
                    bind(vw_2, i3_48)
                    bind(r_a_5, i4_15)
                    bind(r_b_5, i5_12)
                    tir.reads([bgemm_2[r_a_5, r_b_5, co_10, p_11], A_2[min(r_a_5, r_b_5):(min(r_a_5, r_b_5) + ((max(r_a_5, r_b_5) + 1) - min(r_a_5, r_b_5))), min(vh_2, vw_2):(min(vh_2, vw_2) + ((max(vh_2, vw_2) + 1) - min(vh_2, vw_2)))]])
                    tir.writes([inverse_2[co_10, p_11, vh_2, vw_2]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                    with init() {
                      inverse_2[co_10, p_11, vh_2, vw_2] = 0f32
                    }
                    inverse_2[co_10, p_11, vh_2, vw_2] = (inverse_2[co_10, p_11, vh_2, vw_2] + ((bgemm_2[r_a_5, r_b_5, co_10, p_11]*A_2[r_a_5, vh_2])*A_2[r_b_5, vw_2]))
                }
              }
            }
          }
        }
      }
      for (i0_70: int32, 0, 1) {
        for (i1_60: int32, 0, 128) {
          for (i2_49: int32, 0, 28) {
            for (i3_49: int32, 0, 28) {
              block([1, 128, 28, 28], "conv2d_winograd") as [n_2, co_11, h_2, w_2] {
                bind(n_2, i0_70)
                bind(co_11, i1_60)
                bind(h_2, i2_49)
                bind(w_2, i3_49)
                tir.reads([inverse_2[co_11, (((n_2*196) + (floordiv(h_2, 2)*14)) + floordiv(w_2, 2)), floormod(h_2, 2), floormod(w_2, 2)]])
                tir.writes([conv2d_winograd_4[n_2, co_11, h_2, w_2]])
                conv2d_winograd_4[n_2, co_11, h_2, w_2] = inverse_2[co_11, (((n_2*196) + (floordiv(h_2, 2)*14)) + floordiv(w_2, 2)), floormod(h_2, 2), floormod(w_2, 2)]
            }
          }
        }
      }
    }
}

@conv2d5 = primfn(var_rxplaceholder_65: handle, var_rxplaceholder_66: handle, var_conv2d_nchw_4: handle) -> ()
  attr = {"global_symbol": "conv2d5", "tir.noalias": True}
  buffers = {rxplaceholder_130: Buffer(rxplaceholder_132: Pointer(global float32), float32, [1, 64i64, 56, 56], []),
             rxplaceholder_131: Buffer(rxplaceholder_133: Pointer(global float32), float32, [128i64, 64i64, 1i64, 1i64], []),
             conv2d_nchw_8: Buffer(conv2d_nchw_9: Pointer(global float32), float32, [1, 128, 28, 28], [])}
  buffer_map = {var_rxplaceholder_65: rxplaceholder_130, var_rxplaceholder_66: rxplaceholder_131, var_conv2d_nchw_4: conv2d_nchw_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_4 = alloc_buffer(float32[1, 64i64, 56, 56])
     {
      for (i0_71: int32, 0, 1) {
        for (i1_61: int64, 0i64, 64i64) {
          for (i2_50: int32, 0, 56) {
            for (i3_50: int32, 0, 56) {
              block([1, 64i64, 56, 56], "pad_temp") as [i0_72, i1_62, i2_51, i3_51] {
                bind(i0_72, i0_71)
                bind(i1_62, i1_61)
                bind(i2_51, i2_50)
                bind(i3_51, i3_50)
                tir.reads([rxplaceholder_130[i0_72, i1_62, i2_51, i3_51]])
                tir.writes([pad_temp_4[i0_72, i1_62, i2_51, i3_51]])
                pad_temp_4[i0_72, i1_62, i2_51, i3_51] = rxplaceholder_130[i0_72, i1_62, i2_51, i3_51]
            }
          }
        }
      }
      for (i0_73: int32, 0, 1) {
        for (i1_63: int32, 0, 128) {
          for (i2_52: int32, 0, 28) {
            for (i3_52: int32, 0, 28) {
              for (i4_16: int32, 0, 64) {
                for (i5_13: int32, 0, 1) {
                  for (i6_4: int32, 0, 1) {
                    block([1, 128, 28, 28, tir.reduce_axis(0, 64), tir.reduce_axis(0, 1), tir.reduce_axis(0, 1)], "conv2d_nchw") as [nn_4, ff_4, yy_4, xx_4, rc_4, ry_4, rx_4] {
                      bind(nn_4, i0_73)
                      bind(ff_4, i1_63)
                      bind(yy_4, i2_52)
                      bind(xx_4, i3_52)
                      bind(rc_4, i4_16)
                      bind(ry_4, i5_13)
                      bind(rx_4, i6_4)
                      tir.reads([pad_temp_4[nn_4, rc_4, ((yy_4*2) + ry_4), ((xx_4*2) + rx_4)], rxplaceholder_131[ff_4, rc_4, ry_4, rx_4]])
                      tir.writes([conv2d_nchw_8[nn_4, ff_4, yy_4, xx_4]])
                      with init() {
                        conv2d_nchw_8[nn_4, ff_4, yy_4, xx_4] = 0f32
                      }
                      conv2d_nchw_8[nn_4, ff_4, yy_4, xx_4] = (conv2d_nchw_8[nn_4, ff_4, yy_4, xx_4] + (pad_temp_4[nn_4, rc_4, ((yy_4*2) + ry_4), ((xx_4*2) + rx_4)]*rxplaceholder_131[ff_4, rc_4, ry_4, rx_4]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d6 = primfn(var_rxplaceholder_67: handle, var_rxplaceholder_68: handle, var_conv2d_nchw_5: handle) -> ()
  attr = {"global_symbol": "conv2d6", "tir.noalias": True}
  buffers = {rxplaceholder_134: Buffer(rxplaceholder_136: Pointer(global float32), float32, [1, 128i64, 28, 28], []),
             rxplaceholder_135: Buffer(rxplaceholder_137: Pointer(global float32), float32, [256i64, 128i64, 3i64, 3i64], []),
             conv2d_nchw_10: Buffer(conv2d_nchw_11: Pointer(global float32), float32, [1, 256, 14, 14], [])}
  buffer_map = {var_rxplaceholder_67: rxplaceholder_134, var_rxplaceholder_68: rxplaceholder_135, var_conv2d_nchw_5: conv2d_nchw_10} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_5 = alloc_buffer(float32[1, 128i64, 30, 30])
     {
      for (i0_74: int32, 0, 1) {
        for (i1_64: int64, 0i64, 128i64) {
          for (i2_53: int32, 0, 30) {
            for (i3_53: int32, 0, 30) {
              block([1, 128i64, 30, 30], "pad_temp") as [i0_75, i1_65, i2_54, i3_54] {
                bind(i0_75, i0_74)
                bind(i1_65, i1_64)
                bind(i2_54, i2_53)
                bind(i3_54, i3_53)
                tir.reads([rxplaceholder_134[i0_75, i1_65, (i2_54 - 1), (i3_54 - 1)]])
                tir.writes([pad_temp_5[i0_75, i1_65, i2_54, i3_54]])
                pad_temp_5[i0_75, i1_65, i2_54, i3_54] = @tir.if_then_else(((((1 <= i2_54) && (i2_54 < 29)) && (1 <= i3_54)) && (i3_54 < 29)), rxplaceholder_134[i0_75, i1_65, (i2_54 - 1), (i3_54 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_76: int32, 0, 1) {
        for (i1_66: int32, 0, 256) {
          for (i2_55: int32, 0, 14) {
            for (i3_55: int32, 0, 14) {
              for (i4_17: int32, 0, 128) {
                for (i5_14: int32, 0, 3) {
                  for (i6_5: int32, 0, 3) {
                    block([1, 256, 14, 14, tir.reduce_axis(0, 128), tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "conv2d_nchw") as [nn_5, ff_5, yy_5, xx_5, rc_5, ry_5, rx_5] {
                      bind(nn_5, i0_76)
                      bind(ff_5, i1_66)
                      bind(yy_5, i2_55)
                      bind(xx_5, i3_55)
                      bind(rc_5, i4_17)
                      bind(ry_5, i5_14)
                      bind(rx_5, i6_5)
                      tir.reads([pad_temp_5[nn_5, rc_5, ((yy_5*2) + ry_5), ((xx_5*2) + rx_5)], rxplaceholder_135[ff_5, rc_5, ry_5, rx_5]])
                      tir.writes([conv2d_nchw_10[nn_5, ff_5, yy_5, xx_5]])
                      with init() {
                        conv2d_nchw_10[nn_5, ff_5, yy_5, xx_5] = 0f32
                      }
                      conv2d_nchw_10[nn_5, ff_5, yy_5, xx_5] = (conv2d_nchw_10[nn_5, ff_5, yy_5, xx_5] + (pad_temp_5[nn_5, rc_5, ((yy_5*2) + ry_5), ((xx_5*2) + rx_5)]*rxplaceholder_135[ff_5, rc_5, ry_5, rx_5]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d7 = primfn(var_rxplaceholder_69: handle, var_rxplaceholder_70: handle, var_conv2d_winograd_3: handle) -> ()
  attr = {"global_symbol": "conv2d7", "tir.noalias": True}
  buffers = {rxplaceholder_138: Buffer(rxplaceholder_140: Pointer(global float32), float32, [1, 256i64, 14, 14], []),
             rxplaceholder_139: Buffer(rxplaceholder_141: Pointer(global float32), float32, [256i64, 256i64, 3i64, 3i64], []),
             conv2d_winograd_6: Buffer(conv2d_winograd_7: Pointer(global float32), float32, [1, 256, 14, 14], [])}
  buffer_map = {var_rxplaceholder_69: rxplaceholder_138, var_rxplaceholder_70: rxplaceholder_139, var_conv2d_winograd_3: conv2d_winograd_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    data_pad_3 = alloc_buffer(float32[1, 256i64, 16, 16])
    input_tile_3 = alloc_buffer(float32[256, 49, 4, 4])
    B_3 = alloc_buffer(float32[4, 4])
    data_pack_3 = alloc_buffer(float32[4, 4, 256, 49])
    G_3 = alloc_buffer(float32[4, 3])
    kernel_pack_3 = alloc_buffer(float32[4, 4, 256, 256])
    bgemm_3 = alloc_buffer(float32[4, 4, 256, 49])
    A_3 = alloc_buffer(float32[4, 2])
    inverse_3 = alloc_buffer(float32[256, 49, 2, 2])
     {
      for (i0_77: int32, 0, 1) {
        for (i1_67: int64, 0i64, 256i64) {
          for (i2_56: int32, 0, 16) {
            for (i3_56: int32, 0, 16) {
              block([1, 256i64, 16, 16], "data_pad") as [i0_78, i1_68, i2_57, i3_57] {
                bind(i0_78, i0_77)
                bind(i1_68, i1_67)
                bind(i2_57, i2_56)
                bind(i3_57, i3_56)
                tir.reads([rxplaceholder_138[i0_78, i1_68, (i2_57 - 1), (i3_57 - 1)]])
                tir.writes([data_pad_3[i0_78, i1_68, i2_57, i3_57]])
                data_pad_3[i0_78, i1_68, i2_57, i3_57] = @tir.if_then_else(((((1 <= i2_57) && (i2_57 < 15)) && (1 <= i3_57)) && (i3_57 < 15)), rxplaceholder_138[i0_78, i1_68, (i2_57 - 1), (i3_57 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_79: int32, 0, 256) {
        for (i1_69: int32, 0, 49) {
          for (i2_58: int32, 0, 4) {
            for (i3_58: int32, 0, 4) {
              block([256, 49, 4, 4], "input_tile") as [ci_12, p_12, eps_12, nu_12] {
                bind(ci_12, i0_79)
                bind(p_12, i1_69)
                bind(eps_12, i2_58)
                bind(nu_12, i3_58)
                tir.reads([data_pad_3[floordiv(p_12, 49), ci_12, ((floordiv(floormod(p_12, 49), 7)*2) + eps_12), ((floormod(p_12, 7)*2) + nu_12)]])
                tir.writes([input_tile_3[ci_12, p_12, eps_12, nu_12]])
                tir.attrs({"schedule_rule": "None"})
                input_tile_3[ci_12, p_12, eps_12, nu_12] = data_pad_3[floordiv(p_12, 49), ci_12, ((floordiv(floormod(p_12, 49), 7)*2) + eps_12), ((floormod(p_12, 7)*2) + nu_12)]
            }
          }
        }
      }
      for (i0_80: int32, 0, 4) {
        for (i1_70: int32, 0, 4) {
          block([4, 4], "B") as [i_9, j_9] {
            bind(i_9, i0_80)
            bind(j_9, i1_70)
            tir.reads([])
            tir.writes([B_3[i_9, j_9]])
            tir.attrs({"schedule_rule": "None"})
            B_3[i_9, j_9] = select(((floormod(i_9, 4) == 3) && (floormod(j_9, 4) == 3)), 1f32, select(((floormod(i_9, 4) == 3) && (floormod(j_9, 4) == 2)), 0f32, select(((floormod(i_9, 4) == 3) && (floormod(j_9, 4) == 1)), 0f32, select(((floormod(i_9, 4) == 3) && (floormod(j_9, 4) == 0)), 0f32, select(((floormod(i_9, 4) == 2) && (floormod(j_9, 4) == 3)), 0f32, select(((floormod(i_9, 4) == 2) && (floormod(j_9, 4) == 2)), 1f32, select(((floormod(i_9, 4) == 2) && (floormod(j_9, 4) == 1)), 1f32, select(((floormod(i_9, 4) == 2) && (floormod(j_9, 4) == 0)), -1f32, select(((floormod(i_9, 4) == 1) && (floormod(j_9, 4) == 3)), -1f32, select(((floormod(i_9, 4) == 1) && (floormod(j_9, 4) == 2)), 1f32, select(((floormod(i_9, 4) == 1) && (floormod(j_9, 4) == 1)), -1f32, select(((floormod(i_9, 4) == 1) && (floormod(j_9, 4) == 0)), 0f32, select(((floormod(i_9, 4) == 0) && (floormod(j_9, 4) == 3)), 0f32, select(((floormod(i_9, 4) == 0) && (floormod(j_9, 4) == 2)), 0f32, select(((floormod(i_9, 4) == 0) && (floormod(j_9, 4) == 1)), 0f32, select(((floormod(i_9, 4) == 0) && (floormod(j_9, 4) == 0)), 1f32, 0f32))))))))))))))))
        }
      }
      for (i0_81: int32, 0, 4) {
        for (i1_71: int32, 0, 4) {
          for (i2_59: int32, 0, 256) {
            for (i3_59: int32, 0, 49) {
              for (i4_18: int32, 0, 4) {
                for (i5_15: int32, 0, 4) {
                  block([4, 4, 256, 49, tir.reduce_axis(0, 4), tir.reduce_axis(0, 4)], "data_pack") as [eps_13, nu_13, ci_13, p_13, r_a_6, r_b_6] {
                    bind(eps_13, i0_81)
                    bind(nu_13, i1_71)
                    bind(ci_13, i2_59)
                    bind(p_13, i3_59)
                    bind(r_a_6, i4_18)
                    bind(r_b_6, i5_15)
                    tir.reads([input_tile_3[ci_13, p_13, r_a_6, r_b_6], B_3[min(r_a_6, r_b_6):(min(r_a_6, r_b_6) + ((max(r_a_6, r_b_6) + 1) - min(r_a_6, r_b_6))), min(eps_13, nu_13):(min(eps_13, nu_13) + ((max(eps_13, nu_13) + 1) - min(eps_13, nu_13)))]])
                    tir.writes([data_pack_3[eps_13, nu_13, ci_13, p_13]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                    with init() {
                      data_pack_3[eps_13, nu_13, ci_13, p_13] = 0f32
                    }
                    data_pack_3[eps_13, nu_13, ci_13, p_13] = (data_pack_3[eps_13, nu_13, ci_13, p_13] + ((input_tile_3[ci_13, p_13, r_a_6, r_b_6]*B_3[r_a_6, eps_13])*B_3[r_b_6, nu_13]))
                }
              }
            }
          }
        }
      }
      for (i0_82: int32, 0, 4) {
        for (i1_72: int32, 0, 3) {
          block([4, 3], "G") as [i_10, j_10] {
            bind(i_10, i0_82)
            bind(j_10, i1_72)
            tir.reads([])
            tir.writes([G_3[i_10, j_10]])
            tir.attrs({"schedule_rule": "None"})
            G_3[i_10, j_10] = select(((floormod(i_10, 4) == 3) && (floormod(j_10, 3) == 2)), 1f32, select(((floormod(i_10, 4) == 3) && (floormod(j_10, 3) == 1)), 0f32, select(((floormod(i_10, 4) == 3) && (floormod(j_10, 3) == 0)), 0f32, select(((floormod(i_10, 4) == 2) && (floormod(j_10, 3) == 2)), 0.5f32, select(((floormod(i_10, 4) == 2) && (floormod(j_10, 3) == 1)), 0.5f32, select(((floormod(i_10, 4) == 2) && (floormod(j_10, 3) == 0)), 0.5f32, select(((floormod(i_10, 4) == 1) && (floormod(j_10, 3) == 2)), 0.5f32, select(((floormod(i_10, 4) == 1) && (floormod(j_10, 3) == 1)), -0.5f32, select(((floormod(i_10, 4) == 1) && (floormod(j_10, 3) == 0)), 0.5f32, select(((floormod(i_10, 4) == 0) && (floormod(j_10, 3) == 2)), 0f32, select(((floormod(i_10, 4) == 0) && (floormod(j_10, 3) == 1)), 0f32, select(((floormod(i_10, 4) == 0) && (floormod(j_10, 3) == 0)), 1f32, 0f32))))))))))))
        }
      }
      for (i0_83: int32, 0, 4) {
        for (i1_73: int32, 0, 4) {
          for (i2_60: int32, 0, 256) {
            for (i3_60: int32, 0, 256) {
              for (i4_19: int32, 0, 3) {
                for (i5_16: int32, 0, 3) {
                  block([4, 4, 256, 256, tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "kernel_pack") as [eps_14, nu_14, ci_14, co_12, r_kh_3, r_kw_3] {
                    bind(eps_14, i0_83)
                    bind(nu_14, i1_73)
                    bind(ci_14, i2_60)
                    bind(co_12, i3_60)
                    bind(r_kh_3, i4_19)
                    bind(r_kw_3, i5_16)
                    tir.reads([rxplaceholder_139[co_12, ci_14, r_kh_3, r_kw_3], G_3[min(eps_14, nu_14):(min(eps_14, nu_14) + ((max(eps_14, nu_14) + 1) - min(eps_14, nu_14))), min(r_kh_3, r_kw_3):(min(r_kh_3, r_kw_3) + ((max(r_kh_3, r_kw_3) + 1) - min(r_kh_3, r_kw_3)))]])
                    tir.writes([kernel_pack_3[eps_14, nu_14, ci_14, co_12]])
                    with init() {
                      kernel_pack_3[eps_14, nu_14, ci_14, co_12] = 0f32
                    }
                    kernel_pack_3[eps_14, nu_14, ci_14, co_12] = (kernel_pack_3[eps_14, nu_14, ci_14, co_12] + ((rxplaceholder_139[co_12, ci_14, r_kh_3, r_kw_3]*G_3[eps_14, r_kh_3])*G_3[nu_14, r_kw_3]))
                }
              }
            }
          }
        }
      }
      for (i0_84: int32, 0, 4) {
        for (i1_74: int32, 0, 4) {
          for (i2_61: int32, 0, 256) {
            for (i3_61: int32, 0, 49) {
              for (i4_20: int32, 0, 256) {
                block([4, 4, 256, 49, tir.reduce_axis(0, 256)], "bgemm") as [eps_15, nu_15, co_13, p_14, ci_15] {
                  bind(eps_15, i0_84)
                  bind(nu_15, i1_74)
                  bind(co_13, i2_61)
                  bind(p_14, i3_61)
                  bind(ci_15, i4_20)
                  tir.reads([data_pack_3[eps_15, nu_15, ci_15, p_14], kernel_pack_3[eps_15, nu_15, ci_15, co_13]])
                  tir.writes([bgemm_3[eps_15, nu_15, co_13, p_14]])
                  with init() {
                    bgemm_3[eps_15, nu_15, co_13, p_14] = 0f32
                  }
                  bgemm_3[eps_15, nu_15, co_13, p_14] = (bgemm_3[eps_15, nu_15, co_13, p_14] + (data_pack_3[eps_15, nu_15, ci_15, p_14]*kernel_pack_3[eps_15, nu_15, ci_15, co_13]))
              }
            }
          }
        }
      }
      for (i0_85: int32, 0, 4) {
        for (i1_75: int32, 0, 2) {
          block([4, 2], "A") as [i_11, j_11] {
            bind(i_11, i0_85)
            bind(j_11, i1_75)
            tir.reads([])
            tir.writes([A_3[i_11, j_11]])
            tir.attrs({"schedule_rule": "None"})
            A_3[i_11, j_11] = select(((floormod(i_11, 4) == 3) && (floormod(j_11, 2) == 1)), 1f32, select(((floormod(i_11, 4) == 3) && (floormod(j_11, 2) == 0)), 0f32, select(((floormod(i_11, 4) == 2) && (floormod(j_11, 2) == 1)), 1f32, select(((floormod(i_11, 4) == 2) && (floormod(j_11, 2) == 0)), 1f32, select(((floormod(i_11, 4) == 1) && (floormod(j_11, 2) == 1)), -1f32, select(((floormod(i_11, 4) == 1) && (floormod(j_11, 2) == 0)), 1f32, select(((floormod(i_11, 4) == 0) && (floormod(j_11, 2) == 1)), 0f32, select(((floormod(i_11, 4) == 0) && (floormod(j_11, 2) == 0)), 1f32, 0f32))))))))
        }
      }
      for (i0_86: int32, 0, 256) {
        for (i1_76: int32, 0, 49) {
          for (i2_62: int32, 0, 2) {
            for (i3_62: int32, 0, 2) {
              for (i4_21: int32, 0, 4) {
                for (i5_17: int32, 0, 4) {
                  block([256, 49, 2, 2, tir.reduce_axis(0, 4), tir.reduce_axis(0, 4)], "inverse") as [co_14, p_15, vh_3, vw_3, r_a_7, r_b_7] {
                    bind(co_14, i0_86)
                    bind(p_15, i1_76)
                    bind(vh_3, i2_62)
                    bind(vw_3, i3_62)
                    bind(r_a_7, i4_21)
                    bind(r_b_7, i5_17)
                    tir.reads([bgemm_3[r_a_7, r_b_7, co_14, p_15], A_3[min(r_a_7, r_b_7):(min(r_a_7, r_b_7) + ((max(r_a_7, r_b_7) + 1) - min(r_a_7, r_b_7))), min(vh_3, vw_3):(min(vh_3, vw_3) + ((max(vh_3, vw_3) + 1) - min(vh_3, vw_3)))]])
                    tir.writes([inverse_3[co_14, p_15, vh_3, vw_3]])
                    tir.attrs({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                    with init() {
                      inverse_3[co_14, p_15, vh_3, vw_3] = 0f32
                    }
                    inverse_3[co_14, p_15, vh_3, vw_3] = (inverse_3[co_14, p_15, vh_3, vw_3] + ((bgemm_3[r_a_7, r_b_7, co_14, p_15]*A_3[r_a_7, vh_3])*A_3[r_b_7, vw_3]))
                }
              }
            }
          }
        }
      }
      for (i0_87: int32, 0, 1) {
        for (i1_77: int32, 0, 256) {
          for (i2_63: int32, 0, 14) {
            for (i3_63: int32, 0, 14) {
              block([1, 256, 14, 14], "conv2d_winograd") as [n_3, co_15, h_3, w_3] {
                bind(n_3, i0_87)
                bind(co_15, i1_77)
                bind(h_3, i2_63)
                bind(w_3, i3_63)
                tir.reads([inverse_3[co_15, (((n_3*49) + (floordiv(h_3, 2)*7)) + floordiv(w_3, 2)), floormod(h_3, 2), floormod(w_3, 2)]])
                tir.writes([conv2d_winograd_6[n_3, co_15, h_3, w_3]])
                conv2d_winograd_6[n_3, co_15, h_3, w_3] = inverse_3[co_15, (((n_3*49) + (floordiv(h_3, 2)*7)) + floordiv(w_3, 2)), floormod(h_3, 2), floormod(w_3, 2)]
            }
          }
        }
      }
    }
}

@conv2d8 = primfn(var_rxplaceholder_71: handle, var_rxplaceholder_72: handle, var_conv2d_nchw_6: handle) -> ()
  attr = {"global_symbol": "conv2d8", "tir.noalias": True}
  buffers = {rxplaceholder_142: Buffer(rxplaceholder_144: Pointer(global float32), float32, [1, 128i64, 28, 28], []),
             rxplaceholder_143: Buffer(rxplaceholder_145: Pointer(global float32), float32, [256i64, 128i64, 1i64, 1i64], []),
             conv2d_nchw_12: Buffer(conv2d_nchw_13: Pointer(global float32), float32, [1, 256, 14, 14], [])}
  buffer_map = {var_rxplaceholder_71: rxplaceholder_142, var_rxplaceholder_72: rxplaceholder_143, var_conv2d_nchw_6: conv2d_nchw_12} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_6 = alloc_buffer(float32[1, 128i64, 28, 28])
     {
      for (i0_88: int32, 0, 1) {
        for (i1_78: int64, 0i64, 128i64) {
          for (i2_64: int32, 0, 28) {
            for (i3_64: int32, 0, 28) {
              block([1, 128i64, 28, 28], "pad_temp") as [i0_89, i1_79, i2_65, i3_65] {
                bind(i0_89, i0_88)
                bind(i1_79, i1_78)
                bind(i2_65, i2_64)
                bind(i3_65, i3_64)
                tir.reads([rxplaceholder_142[i0_89, i1_79, i2_65, i3_65]])
                tir.writes([pad_temp_6[i0_89, i1_79, i2_65, i3_65]])
                pad_temp_6[i0_89, i1_79, i2_65, i3_65] = rxplaceholder_142[i0_89, i1_79, i2_65, i3_65]
            }
          }
        }
      }
      for (i0_90: int32, 0, 1) {
        for (i1_80: int32, 0, 256) {
          for (i2_66: int32, 0, 14) {
            for (i3_66: int32, 0, 14) {
              for (i4_22: int32, 0, 128) {
                for (i5_18: int32, 0, 1) {
                  for (i6_6: int32, 0, 1) {
                    block([1, 256, 14, 14, tir.reduce_axis(0, 128), tir.reduce_axis(0, 1), tir.reduce_axis(0, 1)], "conv2d_nchw") as [nn_6, ff_6, yy_6, xx_6, rc_6, ry_6, rx_6] {
                      bind(nn_6, i0_90)
                      bind(ff_6, i1_80)
                      bind(yy_6, i2_66)
                      bind(xx_6, i3_66)
                      bind(rc_6, i4_22)
                      bind(ry_6, i5_18)
                      bind(rx_6, i6_6)
                      tir.reads([pad_temp_6[nn_6, rc_6, ((yy_6*2) + ry_6), ((xx_6*2) + rx_6)], rxplaceholder_143[ff_6, rc_6, ry_6, rx_6]])
                      tir.writes([conv2d_nchw_12[nn_6, ff_6, yy_6, xx_6]])
                      with init() {
                        conv2d_nchw_12[nn_6, ff_6, yy_6, xx_6] = 0f32
                      }
                      conv2d_nchw_12[nn_6, ff_6, yy_6, xx_6] = (conv2d_nchw_12[nn_6, ff_6, yy_6, xx_6] + (pad_temp_6[nn_6, rc_6, ((yy_6*2) + ry_6), ((xx_6*2) + rx_6)]*rxplaceholder_143[ff_6, rc_6, ry_6, rx_6]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@conv2d9 = primfn(var_rxplaceholder_73: handle, var_rxplaceholder_74: handle, var_conv2d_nchw_7: handle) -> ()
  attr = {"global_symbol": "conv2d9", "tir.noalias": True}
  buffers = {rxplaceholder_146: Buffer(rxplaceholder_148: Pointer(global float32), float32, [1, 256i64, 14, 14], []),
             rxplaceholder_147: Buffer(rxplaceholder_149: Pointer(global float32), float32, [512i64, 256i64, 3i64, 3i64], []),
             conv2d_nchw_14: Buffer(conv2d_nchw_15: Pointer(global float32), float32, [1, 512, 7, 7], [])}
  buffer_map = {var_rxplaceholder_73: rxplaceholder_146, var_rxplaceholder_74: rxplaceholder_147, var_conv2d_nchw_7: conv2d_nchw_14} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_7 = alloc_buffer(float32[1, 256i64, 16, 16])
     {
      for (i0_91: int32, 0, 1) {
        for (i1_81: int64, 0i64, 256i64) {
          for (i2_67: int32, 0, 16) {
            for (i3_67: int32, 0, 16) {
              block([1, 256i64, 16, 16], "pad_temp") as [i0_92, i1_82, i2_68, i3_68] {
                bind(i0_92, i0_91)
                bind(i1_82, i1_81)
                bind(i2_68, i2_67)
                bind(i3_68, i3_67)
                tir.reads([rxplaceholder_146[i0_92, i1_82, (i2_68 - 1), (i3_68 - 1)]])
                tir.writes([pad_temp_7[i0_92, i1_82, i2_68, i3_68]])
                pad_temp_7[i0_92, i1_82, i2_68, i3_68] = @tir.if_then_else(((((1 <= i2_68) && (i2_68 < 15)) && (1 <= i3_68)) && (i3_68 < 15)), rxplaceholder_146[i0_92, i1_82, (i2_68 - 1), (i3_68 - 1)], 0f32, dtype=float32)
            }
          }
        }
      }
      for (i0_93: int32, 0, 1) {
        for (i1_83: int32, 0, 512) {
          for (i2_69: int32, 0, 7) {
            for (i3_69: int32, 0, 7) {
              for (i4_23: int32, 0, 256) {
                for (i5_19: int32, 0, 3) {
                  for (i6_7: int32, 0, 3) {
                    block([1, 512, 7, 7, tir.reduce_axis(0, 256), tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "conv2d_nchw") as [nn_7, ff_7, yy_7, xx_7, rc_7, ry_7, rx_7] {
                      bind(nn_7, i0_93)
                      bind(ff_7, i1_83)
                      bind(yy_7, i2_69)
                      bind(xx_7, i3_69)
                      bind(rc_7, i4_23)
                      bind(ry_7, i5_19)
                      bind(rx_7, i6_7)
                      tir.reads([pad_temp_7[nn_7, rc_7, ((yy_7*2) + ry_7), ((xx_7*2) + rx_7)], rxplaceholder_147[ff_7, rc_7, ry_7, rx_7]])
                      tir.writes([conv2d_nchw_14[nn_7, ff_7, yy_7, xx_7]])
                      with init() {
                        conv2d_nchw_14[nn_7, ff_7, yy_7, xx_7] = 0f32
                      }
                      conv2d_nchw_14[nn_7, ff_7, yy_7, xx_7] = (conv2d_nchw_14[nn_7, ff_7, yy_7, xx_7] + (pad_temp_7[nn_7, rc_7, ((yy_7*2) + ry_7), ((xx_7*2) + rx_7)]*rxplaceholder_147[ff_7, rc_7, ry_7, rx_7]))
                  }
                }
              }
            }
          }
        }
      }
    }
}

@dense = primfn(var_rxplaceholder_75: handle, var_rxplaceholder_76: handle, var_T_matmul_NT: handle) -> ()
  attr = {"global_symbol": "dense", "tir.noalias": True, "layout_free_buffers": [1]}
  buffers = {rxplaceholder_150: Buffer(rxplaceholder_152: Pointer(global float32), float32, [1, 512], []),
             rxplaceholder_151: Buffer(rxplaceholder_153: Pointer(global float32), float32, [1000i64, 512i64], []),
             T_matmul_NT: Buffer(T_matmul_NT_1: Pointer(global float32), float32, [1, 1000i64], [])}
  buffer_map = {var_rxplaceholder_75: rxplaceholder_150, var_rxplaceholder_76: rxplaceholder_151, var_T_matmul_NT: T_matmul_NT} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_94: int32, 0, 1) {
      for (i1_84: int64, 0i64, 1000i64) {
        for (i2_70: int32, 0, 512) {
          block([1, 1000i64, tir.reduce_axis(0, 512)], "T_matmul_NT") as [i_12, j_12, k] {
            bind(i_12, i0_94)
            bind(j_12, i1_84)
            bind(k, i2_70)
            tir.reads([rxplaceholder_150[i_12, k], rxplaceholder_151[j_12, k]])
            tir.writes([T_matmul_NT[i_12, j_12]])
            with init() {
              T_matmul_NT[i_12, j_12] = 0f32
            }
            T_matmul_NT[i_12, j_12] = (T_matmul_NT[i_12, j_12] + (rxplaceholder_150[i_12, k]*rxplaceholder_151[j_12, k]))
        }
      }
    }
}

@divide = primfn(var_rxplaceholder_77: handle, var_rxplaceholder_78: handle, var_T_divide: handle) -> ()
  attr = {"global_symbol": "divide", "tir.noalias": True}
  buffers = {rxplaceholder_154: Buffer(rxplaceholder_156: Pointer(global float32), float32, [3i64, 1, 1], []),
             rxplaceholder_155: Buffer(rxplaceholder_157: Pointer(global float32), float32, [3i64, 1, 1], []),
             T_divide: Buffer(T_divide_1: Pointer(global float32), float32, [3i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_77: rxplaceholder_154, var_rxplaceholder_78: rxplaceholder_155, var_T_divide: T_divide} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_95: int64, 0i64, 3i64) {
      for (i1_85: int32, 0, 1) {
        for (i2_71: int32, 0, 1) {
          block([3i64, 1, 1], "T_divide") as [ax0_26, ax1_16, ax2_14] {
            bind(ax0_26, i0_95)
            bind(ax1_16, i1_85)
            bind(ax2_14, i2_71)
            tir.reads([rxplaceholder_154[ax0_26, ax1_16, ax2_14], rxplaceholder_155[ax0_26, ax1_16, ax2_14]])
            tir.writes([T_divide[ax0_26, ax1_16, ax2_14]])
            T_divide[ax0_26, ax1_16, ax2_14] = (rxplaceholder_154[ax0_26, ax1_16, ax2_14] / rxplaceholder_155[ax0_26, ax1_16, ax2_14])
        }
      }
    }
}

@expand_dims = primfn(var_rxplaceholder_79: handle, var_T_expand_dims: handle) -> ()
  attr = {"global_symbol": "expand_dims", "tir.noalias": True}
  buffers = {rxplaceholder_158: Buffer(rxplaceholder_159: Pointer(global float32), float32, [3i64], []),
             T_expand_dims: Buffer(T_expand_dims_1: Pointer(global float32), float32, [3i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_79: rxplaceholder_158, var_T_expand_dims: T_expand_dims} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_96: int64, 0i64, 3i64) {
      for (i1_86: int32, 0, 1) {
        for (i2_72: int32, 0, 1) {
          block([3i64, 1, 1], "T_expand_dims") as [ax0_27, ax1_17, ax2_15] {
            bind(ax0_27, i0_96)
            bind(ax1_17, i1_86)
            bind(ax2_15, i2_72)
            tir.reads([rxplaceholder_158[ax0_27]])
            tir.writes([T_expand_dims[ax0_27, ax1_17, ax2_15]])
            T_expand_dims[ax0_27, ax1_17, ax2_15] = rxplaceholder_158[ax0_27]
        }
      }
    }
}

@expand_dims1 = primfn(var_rxplaceholder_80: handle, var_T_expand_dims_1: handle) -> ()
  attr = {"global_symbol": "expand_dims1", "tir.noalias": True}
  buffers = {rxplaceholder_160: Buffer(rxplaceholder_161: Pointer(global float32), float32, [64i64], []),
             T_expand_dims_2: Buffer(T_expand_dims_3: Pointer(global float32), float32, [64i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_80: rxplaceholder_160, var_T_expand_dims_1: T_expand_dims_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_97: int64, 0i64, 64i64) {
      for (i1_87: int32, 0, 1) {
        for (i2_73: int32, 0, 1) {
          block([64i64, 1, 1], "T_expand_dims") as [ax0_28, ax1_18, ax2_16] {
            bind(ax0_28, i0_97)
            bind(ax1_18, i1_87)
            bind(ax2_16, i2_73)
            tir.reads([rxplaceholder_160[ax0_28]])
            tir.writes([T_expand_dims_2[ax0_28, ax1_18, ax2_16]])
            T_expand_dims_2[ax0_28, ax1_18, ax2_16] = rxplaceholder_160[ax0_28]
        }
      }
    }
}

@expand_dims10 = primfn(var_rxplaceholder_81: handle, var_T_expand_dims_2: handle) -> ()
  attr = {"global_symbol": "expand_dims10", "tir.noalias": True}
  buffers = {rxplaceholder_162: Buffer(rxplaceholder_163: Pointer(global float32), float32, [512i64], []),
             T_expand_dims_4: Buffer(T_expand_dims_5: Pointer(global float32), float32, [512i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_81: rxplaceholder_162, var_T_expand_dims_2: T_expand_dims_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_98: int64, 0i64, 512i64) {
      for (i1_88: int32, 0, 1) {
        for (i2_74: int32, 0, 1) {
          block([512i64, 1, 1], "T_expand_dims") as [ax0_29, ax1_19, ax2_17] {
            bind(ax0_29, i0_98)
            bind(ax1_19, i1_88)
            bind(ax2_17, i2_74)
            tir.reads([rxplaceholder_162[ax0_29]])
            tir.writes([T_expand_dims_4[ax0_29, ax1_19, ax2_17]])
            T_expand_dims_4[ax0_29, ax1_19, ax2_17] = rxplaceholder_162[ax0_29]
        }
      }
    }
}

@expand_dims11 = primfn(var_rxplaceholder_82: handle, var_T_expand_dims_3: handle) -> ()
  attr = {"global_symbol": "expand_dims11", "tir.noalias": True}
  buffers = {rxplaceholder_164: Buffer(rxplaceholder_165: Pointer(global float32), float32, [512i64], []),
             T_expand_dims_6: Buffer(T_expand_dims_7: Pointer(global float32), float32, [512i64, 1, 1, 1], [])}
  buffer_map = {var_rxplaceholder_82: rxplaceholder_164, var_T_expand_dims_3: T_expand_dims_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_99: int64, 0i64, 512i64) {
      for (i1_89: int32, 0, 1) {
        for (i2_75: int32, 0, 1) {
          for (i3_70: int32, 0, 1) {
            block([512i64, 1, 1, 1], "T_expand_dims") as [ax0_30, ax1_20, ax2_18, ax3_14] {
              bind(ax0_30, i0_99)
              bind(ax1_20, i1_89)
              bind(ax2_18, i2_75)
              bind(ax3_14, i3_70)
              tir.reads([rxplaceholder_164[ax0_30]])
              tir.writes([T_expand_dims_6[ax0_30, ax1_20, ax2_18, ax3_14]])
              T_expand_dims_6[ax0_30, ax1_20, ax2_18, ax3_14] = rxplaceholder_164[ax0_30]
          }
        }
      }
    }
}

@expand_dims12 = primfn(var_rxplaceholder_83: handle, var_T_expand_dims_4: handle) -> ()
  attr = {"global_symbol": "expand_dims12", "tir.noalias": True}
  buffers = {rxplaceholder_166: Buffer(rxplaceholder_167: Pointer(global float32), float32, [512i64, 1, 1], []),
             T_expand_dims_8: Buffer(T_expand_dims_9: Pointer(global float32), float32, [1, 512i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_83: rxplaceholder_166, var_T_expand_dims_4: T_expand_dims_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_100: int32, 0, 1) {
      for (i1_90: int64, 0i64, 512i64) {
        for (i2_76: int32, 0, 1) {
          for (i3_71: int32, 0, 1) {
            block([1, 512i64, 1, 1], "T_expand_dims") as [ax0_31, ax1_21, ax2_19, ax3_15] {
              bind(ax0_31, i0_100)
              bind(ax1_21, i1_90)
              bind(ax2_19, i2_76)
              bind(ax3_15, i3_71)
              tir.reads([rxplaceholder_166[ax1_21, ax2_19, ax3_15]])
              tir.writes([T_expand_dims_8[ax0_31, ax1_21, ax2_19, ax3_15]])
              T_expand_dims_8[ax0_31, ax1_21, ax2_19, ax3_15] = rxplaceholder_166[ax1_21, ax2_19, ax3_15]
          }
        }
      }
    }
}

@expand_dims13 = primfn(var_rxplaceholder_84: handle, var_T_expand_dims_5: handle) -> ()
  attr = {"global_symbol": "expand_dims13", "tir.noalias": True}
  buffers = {rxplaceholder_168: Buffer(rxplaceholder_169: Pointer(global float32), float32, [1000i64], []),
             T_expand_dims_10: Buffer(T_expand_dims_11: Pointer(global float32), float32, [1, 1000i64], [])}
  buffer_map = {var_rxplaceholder_84: rxplaceholder_168, var_T_expand_dims_5: T_expand_dims_10} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_101: int32, 0, 1) {
      for (i1_91: int64, 0i64, 1000i64) {
        block([1, 1000i64], "T_expand_dims") as [ax0_32, ax1_22] {
          bind(ax0_32, i0_101)
          bind(ax1_22, i1_91)
          tir.reads([rxplaceholder_168[ax1_22]])
          tir.writes([T_expand_dims_10[ax0_32, ax1_22]])
          T_expand_dims_10[ax0_32, ax1_22] = rxplaceholder_168[ax1_22]
      }
    }
}

@expand_dims2 = primfn(var_rxplaceholder_85: handle, var_T_expand_dims_6: handle) -> ()
  attr = {"global_symbol": "expand_dims2", "tir.noalias": True}
  buffers = {rxplaceholder_170: Buffer(rxplaceholder_171: Pointer(global float32), float32, [64i64], []),
             T_expand_dims_12: Buffer(T_expand_dims_13: Pointer(global float32), float32, [64i64, 1, 1, 1], [])}
  buffer_map = {var_rxplaceholder_85: rxplaceholder_170, var_T_expand_dims_6: T_expand_dims_12} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_102: int64, 0i64, 64i64) {
      for (i1_92: int32, 0, 1) {
        for (i2_77: int32, 0, 1) {
          for (i3_72: int32, 0, 1) {
            block([64i64, 1, 1, 1], "T_expand_dims") as [ax0_33, ax1_23, ax2_20, ax3_16] {
              bind(ax0_33, i0_102)
              bind(ax1_23, i1_92)
              bind(ax2_20, i2_77)
              bind(ax3_16, i3_72)
              tir.reads([rxplaceholder_170[ax0_33]])
              tir.writes([T_expand_dims_12[ax0_33, ax1_23, ax2_20, ax3_16]])
              T_expand_dims_12[ax0_33, ax1_23, ax2_20, ax3_16] = rxplaceholder_170[ax0_33]
          }
        }
      }
    }
}

@expand_dims3 = primfn(var_rxplaceholder_86: handle, var_T_expand_dims_7: handle) -> ()
  attr = {"global_symbol": "expand_dims3", "tir.noalias": True}
  buffers = {rxplaceholder_172: Buffer(rxplaceholder_173: Pointer(global float32), float32, [64i64, 1, 1], []),
             T_expand_dims_14: Buffer(T_expand_dims_15: Pointer(global float32), float32, [1, 64i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_86: rxplaceholder_172, var_T_expand_dims_7: T_expand_dims_14} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_103: int32, 0, 1) {
      for (i1_93: int64, 0i64, 64i64) {
        for (i2_78: int32, 0, 1) {
          for (i3_73: int32, 0, 1) {
            block([1, 64i64, 1, 1], "T_expand_dims") as [ax0_34, ax1_24, ax2_21, ax3_17] {
              bind(ax0_34, i0_103)
              bind(ax1_24, i1_93)
              bind(ax2_21, i2_78)
              bind(ax3_17, i3_73)
              tir.reads([rxplaceholder_172[ax1_24, ax2_21, ax3_17]])
              tir.writes([T_expand_dims_14[ax0_34, ax1_24, ax2_21, ax3_17]])
              T_expand_dims_14[ax0_34, ax1_24, ax2_21, ax3_17] = rxplaceholder_172[ax1_24, ax2_21, ax3_17]
          }
        }
      }
    }
}

@expand_dims4 = primfn(var_rxplaceholder_87: handle, var_T_expand_dims_8: handle) -> ()
  attr = {"global_symbol": "expand_dims4", "tir.noalias": True}
  buffers = {rxplaceholder_174: Buffer(rxplaceholder_175: Pointer(global float32), float32, [128i64], []),
             T_expand_dims_16: Buffer(T_expand_dims_17: Pointer(global float32), float32, [128i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_87: rxplaceholder_174, var_T_expand_dims_8: T_expand_dims_16} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_104: int64, 0i64, 128i64) {
      for (i1_94: int32, 0, 1) {
        for (i2_79: int32, 0, 1) {
          block([128i64, 1, 1], "T_expand_dims") as [ax0_35, ax1_25, ax2_22] {
            bind(ax0_35, i0_104)
            bind(ax1_25, i1_94)
            bind(ax2_22, i2_79)
            tir.reads([rxplaceholder_174[ax0_35]])
            tir.writes([T_expand_dims_16[ax0_35, ax1_25, ax2_22]])
            T_expand_dims_16[ax0_35, ax1_25, ax2_22] = rxplaceholder_174[ax0_35]
        }
      }
    }
}

@expand_dims5 = primfn(var_rxplaceholder_88: handle, var_T_expand_dims_9: handle) -> ()
  attr = {"global_symbol": "expand_dims5", "tir.noalias": True}
  buffers = {rxplaceholder_176: Buffer(rxplaceholder_177: Pointer(global float32), float32, [128i64], []),
             T_expand_dims_18: Buffer(T_expand_dims_19: Pointer(global float32), float32, [128i64, 1, 1, 1], [])}
  buffer_map = {var_rxplaceholder_88: rxplaceholder_176, var_T_expand_dims_9: T_expand_dims_18} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_105: int64, 0i64, 128i64) {
      for (i1_95: int32, 0, 1) {
        for (i2_80: int32, 0, 1) {
          for (i3_74: int32, 0, 1) {
            block([128i64, 1, 1, 1], "T_expand_dims") as [ax0_36, ax1_26, ax2_23, ax3_18] {
              bind(ax0_36, i0_105)
              bind(ax1_26, i1_95)
              bind(ax2_23, i2_80)
              bind(ax3_18, i3_74)
              tir.reads([rxplaceholder_176[ax0_36]])
              tir.writes([T_expand_dims_18[ax0_36, ax1_26, ax2_23, ax3_18]])
              T_expand_dims_18[ax0_36, ax1_26, ax2_23, ax3_18] = rxplaceholder_176[ax0_36]
          }
        }
      }
    }
}

@expand_dims6 = primfn(var_rxplaceholder_89: handle, var_T_expand_dims_10: handle) -> ()
  attr = {"global_symbol": "expand_dims6", "tir.noalias": True}
  buffers = {rxplaceholder_178: Buffer(rxplaceholder_179: Pointer(global float32), float32, [128i64, 1, 1], []),
             T_expand_dims_20: Buffer(T_expand_dims_21: Pointer(global float32), float32, [1, 128i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_89: rxplaceholder_178, var_T_expand_dims_10: T_expand_dims_20} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_106: int32, 0, 1) {
      for (i1_96: int64, 0i64, 128i64) {
        for (i2_81: int32, 0, 1) {
          for (i3_75: int32, 0, 1) {
            block([1, 128i64, 1, 1], "T_expand_dims") as [ax0_37, ax1_27, ax2_24, ax3_19] {
              bind(ax0_37, i0_106)
              bind(ax1_27, i1_96)
              bind(ax2_24, i2_81)
              bind(ax3_19, i3_75)
              tir.reads([rxplaceholder_178[ax1_27, ax2_24, ax3_19]])
              tir.writes([T_expand_dims_20[ax0_37, ax1_27, ax2_24, ax3_19]])
              T_expand_dims_20[ax0_37, ax1_27, ax2_24, ax3_19] = rxplaceholder_178[ax1_27, ax2_24, ax3_19]
          }
        }
      }
    }
}

@expand_dims7 = primfn(var_rxplaceholder_90: handle, var_T_expand_dims_11: handle) -> ()
  attr = {"global_symbol": "expand_dims7", "tir.noalias": True}
  buffers = {rxplaceholder_180: Buffer(rxplaceholder_181: Pointer(global float32), float32, [256i64], []),
             T_expand_dims_22: Buffer(T_expand_dims_23: Pointer(global float32), float32, [256i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_90: rxplaceholder_180, var_T_expand_dims_11: T_expand_dims_22} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_107: int64, 0i64, 256i64) {
      for (i1_97: int32, 0, 1) {
        for (i2_82: int32, 0, 1) {
          block([256i64, 1, 1], "T_expand_dims") as [ax0_38, ax1_28, ax2_25] {
            bind(ax0_38, i0_107)
            bind(ax1_28, i1_97)
            bind(ax2_25, i2_82)
            tir.reads([rxplaceholder_180[ax0_38]])
            tir.writes([T_expand_dims_22[ax0_38, ax1_28, ax2_25]])
            T_expand_dims_22[ax0_38, ax1_28, ax2_25] = rxplaceholder_180[ax0_38]
        }
      }
    }
}

@expand_dims8 = primfn(var_rxplaceholder_91: handle, var_T_expand_dims_12: handle) -> ()
  attr = {"global_symbol": "expand_dims8", "tir.noalias": True}
  buffers = {rxplaceholder_182: Buffer(rxplaceholder_183: Pointer(global float32), float32, [256i64], []),
             T_expand_dims_24: Buffer(T_expand_dims_25: Pointer(global float32), float32, [256i64, 1, 1, 1], [])}
  buffer_map = {var_rxplaceholder_91: rxplaceholder_182, var_T_expand_dims_12: T_expand_dims_24} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_108: int64, 0i64, 256i64) {
      for (i1_98: int32, 0, 1) {
        for (i2_83: int32, 0, 1) {
          for (i3_76: int32, 0, 1) {
            block([256i64, 1, 1, 1], "T_expand_dims") as [ax0_39, ax1_29, ax2_26, ax3_20] {
              bind(ax0_39, i0_108)
              bind(ax1_29, i1_98)
              bind(ax2_26, i2_83)
              bind(ax3_20, i3_76)
              tir.reads([rxplaceholder_182[ax0_39]])
              tir.writes([T_expand_dims_24[ax0_39, ax1_29, ax2_26, ax3_20]])
              T_expand_dims_24[ax0_39, ax1_29, ax2_26, ax3_20] = rxplaceholder_182[ax0_39]
          }
        }
      }
    }
}

@expand_dims9 = primfn(var_rxplaceholder_92: handle, var_T_expand_dims_13: handle) -> ()
  attr = {"global_symbol": "expand_dims9", "tir.noalias": True}
  buffers = {rxplaceholder_184: Buffer(rxplaceholder_185: Pointer(global float32), float32, [256i64, 1, 1], []),
             T_expand_dims_26: Buffer(T_expand_dims_27: Pointer(global float32), float32, [1, 256i64, 1, 1], [])}
  buffer_map = {var_rxplaceholder_92: rxplaceholder_184, var_T_expand_dims_13: T_expand_dims_26} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_109: int32, 0, 1) {
      for (i1_99: int64, 0i64, 256i64) {
        for (i2_84: int32, 0, 1) {
          for (i3_77: int32, 0, 1) {
            block([1, 256i64, 1, 1], "T_expand_dims") as [ax0_40, ax1_30, ax2_27, ax3_21] {
              bind(ax0_40, i0_109)
              bind(ax1_30, i1_99)
              bind(ax2_27, i2_84)
              bind(ax3_21, i3_77)
              tir.reads([rxplaceholder_184[ax1_30, ax2_27, ax3_21]])
              tir.writes([T_expand_dims_26[ax0_40, ax1_30, ax2_27, ax3_21]])
              T_expand_dims_26[ax0_40, ax1_30, ax2_27, ax3_21] = rxplaceholder_184[ax1_30, ax2_27, ax3_21]
          }
        }
      }
    }
}

@global_avg_pool2d = primfn(var_rxplaceholder_93: handle, var_adaptive_pool_avg: handle) -> ()
  attr = {"global_symbol": "global_avg_pool2d", "tir.noalias": True}
  buffers = {rxplaceholder_186: Buffer(rxplaceholder_187: Pointer(global float32), float32, [1, 512i64, 7, 7], []),
             adaptive_pool_avg: Buffer(adaptive_pool_avg_1: Pointer(global float32), float32, [1, 512, 1, 1], [])}
  buffer_map = {var_rxplaceholder_93: rxplaceholder_186, var_adaptive_pool_avg: adaptive_pool_avg} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    adaptive_pool_sum = alloc_buffer(float32[1, 512, 1, 1])
     {
      for (i0_110: int32, 0, 1) {
        for (i1_100: int32, 0, 512) {
          for (i2_85: int32, 0, 1) {
            for (i3_78: int32, 0, 1) {
              for (i4_24: int32, 0, 7) {
                for (i5_20: int32, 0, 7) {
                  block([1, 512, 1, 1, tir.reduce_axis(0, 7), tir.reduce_axis(0, 7)], "adaptive_pool_sum") as [ax0_41, ax1_31, ax2_28, ax3_22, rv0, rv1] {
                    bind(ax0_41, i0_110)
                    bind(ax1_31, i1_100)
                    bind(ax2_28, i2_85)
                    bind(ax3_22, i3_78)
                    bind(rv0, i4_24)
                    bind(rv1, i5_20)
                    tir.reads([rxplaceholder_186[ax0_41, ax1_31, ((ax2_28*7) + rv0), ((ax3_22*7) + rv1)]])
                    tir.writes([adaptive_pool_sum[ax0_41, ax1_31, ax2_28, ax3_22]])
                    with init() {
                      adaptive_pool_sum[ax0_41, ax1_31, ax2_28, ax3_22] = 0f32
                    }
                    adaptive_pool_sum[ax0_41, ax1_31, ax2_28, ax3_22] = (adaptive_pool_sum[ax0_41, ax1_31, ax2_28, ax3_22] + rxplaceholder_186[ax0_41, ax1_31, ((ax2_28*7) + rv0), ((ax3_22*7) + rv1)])
                }
              }
            }
          }
        }
      }
      for (i0_111: int32, 0, 1) {
        for (i1_101: int32, 0, 512) {
          for (i2_86: int32, 0, 1) {
            for (i3_79: int32, 0, 1) {
              block([1, 512, 1, 1], "adaptive_pool_avg") as [ax0_42, ax1_32, ax2_29, ax3_23] {
                bind(ax0_42, i0_111)
                bind(ax1_32, i1_101)
                bind(ax2_29, i2_86)
                bind(ax3_23, i3_79)
                tir.reads([adaptive_pool_sum[ax0_42, ax1_32, ax2_29, ax3_23]])
                tir.writes([adaptive_pool_avg[ax0_42, ax1_32, ax2_29, ax3_23]])
                tir.attrs({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[ax0_42, ax1_32, ax2_29, ax3_23] = (adaptive_pool_sum[ax0_42, ax1_32, ax2_29, ax3_23]*0.0204082f32)
            }
          }
        }
      }
    }
}

@R.function
def main(data: Tensor((1, 3, 224, 224), "float32"), bn_data_gamma: Tensor((3,), "float32"), bn_data_beta: Tensor((3,), "float32"), bn_data_moving_mean: Tensor((3,), "float32"), bn_data_moving_var: Tensor((3,), "float32"), conv0_weight: Tensor((64, 3, 7, 7), "float32"), bn0_gamma: Tensor((64,), "float32"), bn0_beta: Tensor((64,), "float32"), bn0_moving_mean: Tensor((64,), "float32"), bn0_moving_var: Tensor((64,), "float32"), stage1_unit1_bn1_gamma: Tensor((64,), "float32"), stage1_unit1_bn1_beta: Tensor((64,), "float32"), stage1_unit1_bn1_moving_mean: Tensor((64,), "float32"), stage1_unit1_bn1_moving_var: Tensor((64,), "float32"), stage1_unit1_conv1_weight: Tensor((64, 64, 3, 3), "float32"), stage1_unit1_bn2_gamma: Tensor((64,), "float32"), stage1_unit1_bn2_beta: Tensor((64,), "float32"), stage1_unit1_bn2_moving_mean: Tensor((64,), "float32"), stage1_unit1_bn2_moving_var: Tensor((64,), "float32"), stage1_unit1_conv2_weight: Tensor((64, 64, 3, 3), "float32"), stage1_unit1_sc_weight: Tensor((64, 64, 1, 1), "float32"), stage1_unit2_bn1_gamma: Tensor((64,), "float32"), stage1_unit2_bn1_beta: Tensor((64,), "float32"), stage1_unit2_bn1_moving_mean: Tensor((64,), "float32"), stage1_unit2_bn1_moving_var: Tensor((64,), "float32"), stage1_unit2_conv1_weight: Tensor((64, 64, 3, 3), "float32"), stage1_unit2_bn2_gamma: Tensor((64,), "float32"), stage1_unit2_bn2_beta: Tensor((64,), "float32"), stage1_unit2_bn2_moving_mean: Tensor((64,), "float32"), stage1_unit2_bn2_moving_var: Tensor((64,), "float32"), stage1_unit2_conv2_weight: Tensor((64, 64, 3, 3), "float32"), stage2_unit1_bn1_gamma: Tensor((64,), "float32"), stage2_unit1_bn1_beta: Tensor((64,), "float32"), stage2_unit1_bn1_moving_mean: Tensor((64,), "float32"), stage2_unit1_bn1_moving_var: Tensor((64,), "float32"), stage2_unit1_conv1_weight: Tensor((128, 64, 3, 3), "float32"), stage2_unit1_bn2_gamma: Tensor((128,), "float32"), stage2_unit1_bn2_beta: Tensor((128,), "float32"), stage2_unit1_bn2_moving_mean: Tensor((128,), "float32"), stage2_unit1_bn2_moving_var: Tensor((128,), "float32"), stage2_unit1_conv2_weight: Tensor((128, 128, 3, 3), "float32"), stage2_unit1_sc_weight: Tensor((128, 64, 1, 1), "float32"), stage2_unit2_bn1_gamma: Tensor((128,), "float32"), stage2_unit2_bn1_beta: Tensor((128,), "float32"), stage2_unit2_bn1_moving_mean: Tensor((128,), "float32"), stage2_unit2_bn1_moving_var: Tensor((128,), "float32"), stage2_unit2_conv1_weight: Tensor((128, 128, 3, 3), "float32"), stage2_unit2_bn2_gamma: Tensor((128,), "float32"), stage2_unit2_bn2_beta: Tensor((128,), "float32"), stage2_unit2_bn2_moving_mean: Tensor((128,), "float32"), stage2_unit2_bn2_moving_var: Tensor((128,), "float32"), stage2_unit2_conv2_weight: Tensor((128, 128, 3, 3), "float32"), stage3_unit1_bn1_gamma: Tensor((128,), "float32"), stage3_unit1_bn1_beta: Tensor((128,), "float32"), stage3_unit1_bn1_moving_mean: Tensor((128,), "float32"), stage3_unit1_bn1_moving_var: Tensor((128,), "float32"), stage3_unit1_conv1_weight: Tensor((256, 128, 3, 3), "float32"), stage3_unit1_bn2_gamma: Tensor((256,), "float32"), stage3_unit1_bn2_beta: Tensor((256,), "float32"), stage3_unit1_bn2_moving_mean: Tensor((256,), "float32"), stage3_unit1_bn2_moving_var: Tensor((256,), "float32"), stage3_unit1_conv2_weight: Tensor((256, 256, 3, 3), "float32"), stage3_unit1_sc_weight: Tensor((256, 128, 1, 1), "float32"), stage3_unit2_bn1_gamma: Tensor((256,), "float32"), stage3_unit2_bn1_beta: Tensor((256,), "float32"), stage3_unit2_bn1_moving_mean: Tensor((256,), "float32"), stage3_unit2_bn1_moving_var: Tensor((256,), "float32"), stage3_unit2_conv1_weight: Tensor((256, 256, 3, 3), "float32"), stage3_unit2_bn2_gamma: Tensor((256,), "float32"), stage3_unit2_bn2_beta: Tensor((256,), "float32"), stage3_unit2_bn2_moving_mean: Tensor((256,), "float32"), stage3_unit2_bn2_moving_var: Tensor((256,), "float32"), stage3_unit2_conv2_weight: Tensor((256, 256, 3, 3), "float32"), stage4_unit1_bn1_gamma: Tensor((256,), "float32"), stage4_unit1_bn1_beta: Tensor((256,), "float32"), stage4_unit1_bn1_moving_mean: Tensor((256,), "float32"), stage4_unit1_bn1_moving_var: Tensor((256,), "float32"), stage4_unit1_conv1_weight: Tensor((512, 256, 3, 3), "float32"), stage4_unit1_bn2_gamma: Tensor((512,), "float32"), stage4_unit1_bn2_beta: Tensor((512,), "float32"), stage4_unit1_bn2_moving_mean: Tensor((512,), "float32"), stage4_unit1_bn2_moving_var: Tensor((512,), "float32"), stage4_unit1_conv2_weight: Tensor((512, 512, 3, 3), "float32"), stage4_unit1_sc_weight: Tensor((512, 256, 1, 1), "float32"), stage4_unit2_bn1_gamma: Tensor((512,), "float32"), stage4_unit2_bn1_beta: Tensor((512,), "float32"), stage4_unit2_bn1_moving_mean: Tensor((512,), "float32"), stage4_unit2_bn1_moving_var: Tensor((512,), "float32"), stage4_unit2_conv1_weight: Tensor((512, 512, 3, 3), "float32"), stage4_unit2_bn2_gamma: Tensor((512,), "float32"), stage4_unit2_bn2_beta: Tensor((512,), "float32"), stage4_unit2_bn2_moving_mean: Tensor((512,), "float32"), stage4_unit2_bn2_moving_var: Tensor((512,), "float32"), stage4_unit2_conv2_weight: Tensor((512, 512, 3, 3), "float32"), bn1_gamma: Tensor((512,), "float32"), bn1_beta: Tensor((512,), "float32"), bn1_moving_mean: Tensor((512,), "float32"), bn1_moving_var: Tensor((512,), "float32"), fc1_weight: Tensor((1000, 512), "float32"), fc1_bias: Tensor((1000,), "float32")) -> Tensor(None, "float32", ndim = 2):
    # block 0
    with R.dataflow():
        lv = R.call_tir(negative, (bn_data_moving_mean,), (3,), dtype="float32")
        lv1 = R.call_tir(add, (bn_data_moving_var, 2e-05), (3,), dtype="float32")
        lv2 = R.call_tir(rsqrt, (lv1,), (3,), dtype="float32")
        lv3 = R.call_tir(multiply, (lv, lv2), (3,), dtype="float32")
        lv4 = R.call_tir(add1, (lv3, bn_data_beta), (3,), dtype="float32")
        lv5 = R.call_tir(expand_dims, (lv4,), (3, 1, 1), dtype="float32")
        lv6 = R.call_tir(expand_dims, (lv2,), (3, 1, 1), dtype="float32")
        lv7 = R.call_tir(squeeze, (lv6,), (3,), dtype="float32")
        lv8 = R.call_tir(expand_dims, (lv7,), (3, 1, 1), dtype="float32")
        lv9 = R.call_tir(divide, (lv5, lv8), (3, 1, 1), dtype="float32")
        lv10 = R.call_tir(add2, (data, lv9), (1, 3, 224, 224), dtype="float32")
        lv11 = R.call_tir(add3, (bn0_moving_var, 2e-05), (64,), dtype="float32")
        lv12 = R.call_tir(rsqrt1, (lv11,), (64,), dtype="float32")
        lv13 = R.call_tir(multiply1, (lv12, bn0_gamma), (64,), dtype="float32")
        lv14 = R.call_tir(expand_dims1, (lv13,), (64, 1, 1), dtype="float32")
        lv15 = R.call_tir(squeeze1, (lv14,), (64,), dtype="float32")
        lv16 = R.call_tir(expand_dims2, (lv15,), (64, 1, 1, 1), dtype="float32")
        lv17 = R.call_tir(multiply2, (conv0_weight, lv16), (64, 3, 7, 7), dtype="float32")
        lv18 = R.call_tir(expand_dims, (lv7,), (3, 1, 1), dtype="float32")
        lv19 = R.call_tir(multiply3, (lv17, lv18), (64, 3, 7, 7), dtype="float32")
        lv20 = R.call_tir(conv2d, (lv10, lv19), (1, 64, 112, 112), dtype="float32")
        lv21 = R.call_tir(negative1, (bn0_moving_mean,), (64,), dtype="float32")
        lv22 = R.call_tir(multiply1, (lv21, lv13), (64,), dtype="float32")
        lv23 = R.call_tir(add4, (lv22, bn0_beta), (64,), dtype="float32")
        lv24 = R.call_tir(expand_dims1, (lv23,), (64, 1, 1), dtype="float32")
        lv25 = R.call_tir(expand_dims3, (lv24,), (1, 64, 1, 1), dtype="float32")
        lv26 = R.call_tir(add5, (lv20, lv25), (1, 64, 112, 112), dtype="float32")
        lv27 = R.call_tir(relu, (lv26,), (1, 64, 112, 112), dtype="float32")
        lv28 = R.call_tir(max_pool2d, (lv27,), (1, 64, 56, 56), dtype="float32")
        lv29 = R.call_tir(add3, (stage1_unit1_bn1_moving_var, 2e-05), (64,), dtype="float32")
        lv30 = R.call_tir(rsqrt1, (lv29,), (64,), dtype="float32")
        lv31 = R.call_tir(multiply1, (lv30, stage1_unit1_bn1_gamma), (64,), dtype="float32")
        lv32 = R.call_tir(expand_dims1, (lv31,), (64, 1, 1), dtype="float32")
        lv33 = R.call_tir(expand_dims3, (lv32,), (1, 64, 1, 1), dtype="float32")
        lv34 = R.call_tir(multiply4, (lv28, lv33), (1, 64, 56, 56), dtype="float32")
        lv35 = R.call_tir(negative1, (stage1_unit1_bn1_moving_mean,), (64,), dtype="float32")
        lv36 = R.call_tir(multiply1, (lv35, lv31), (64,), dtype="float32")
        lv37 = R.call_tir(add4, (lv36, stage1_unit1_bn1_beta), (64,), dtype="float32")
        lv38 = R.call_tir(expand_dims1, (lv37,), (64, 1, 1), dtype="float32")
        lv39 = R.call_tir(expand_dims3, (lv38,), (1, 64, 1, 1), dtype="float32")
        lv40 = R.call_tir(add6, (lv34, lv39), (1, 64, 56, 56), dtype="float32")
        lv41 = R.call_tir(relu1, (lv40,), (1, 64, 56, 56), dtype="float32")
        lv42 = R.call_tir(add3, (stage1_unit1_bn2_moving_var, 2e-05), (64,), dtype="float32")
        lv43 = R.call_tir(rsqrt1, (lv42,), (64,), dtype="float32")
        lv44 = R.call_tir(multiply1, (lv43, stage1_unit1_bn2_gamma), (64,), dtype="float32")
        lv45 = R.call_tir(expand_dims1, (lv44,), (64, 1, 1), dtype="float32")
        lv46 = R.call_tir(squeeze1, (lv45,), (64,), dtype="float32")
        lv47 = R.call_tir(expand_dims2, (lv46,), (64, 1, 1, 1), dtype="float32")
        lv48 = R.call_tir(multiply5, (stage1_unit1_conv1_weight, lv47), (64, 64, 3, 3), dtype="float32")
        lv49 = R.call_tir(conv2d1, (lv41, lv48), (1, 64, 56, 56), dtype="float32")
        lv50 = R.call_tir(negative1, (stage1_unit1_bn2_moving_mean,), (64,), dtype="float32")
        lv51 = R.call_tir(multiply1, (lv50, lv44), (64,), dtype="float32")
        lv52 = R.call_tir(add4, (lv51, stage1_unit1_bn2_beta), (64,), dtype="float32")
        lv53 = R.call_tir(expand_dims1, (lv52,), (64, 1, 1), dtype="float32")
        lv54 = R.call_tir(expand_dims3, (lv53,), (1, 64, 1, 1), dtype="float32")
        lv55 = R.call_tir(add7, (lv49, lv54), (1, 64, 56, 56), dtype="float32")
        lv56 = R.call_tir(relu1, (lv55,), (1, 64, 56, 56), dtype="float32")
        lv57 = R.call_tir(conv2d1, (lv56, stage1_unit1_conv2_weight), (1, 64, 56, 56), dtype="float32")
        lv58 = R.call_tir(conv2d2, (lv41, stage1_unit1_sc_weight), (1, 64, 56, 56), dtype="float32")
        lv59 = R.call_tir(add8, (lv57, lv58), (1, 64, 56, 56), dtype="float32")
        lv60 = R.call_tir(add3, (stage1_unit2_bn1_moving_var, 2e-05), (64,), dtype="float32")
        lv61 = R.call_tir(rsqrt1, (lv60,), (64,), dtype="float32")
        lv62 = R.call_tir(multiply1, (lv61, stage1_unit2_bn1_gamma), (64,), dtype="float32")
        lv63 = R.call_tir(expand_dims1, (lv62,), (64, 1, 1), dtype="float32")
        lv64 = R.call_tir(expand_dims3, (lv63,), (1, 64, 1, 1), dtype="float32")
        lv65 = R.call_tir(multiply4, (lv59, lv64), (1, 64, 56, 56), dtype="float32")
        lv66 = R.call_tir(negative1, (stage1_unit2_bn1_moving_mean,), (64,), dtype="float32")
        lv67 = R.call_tir(multiply1, (lv66, lv62), (64,), dtype="float32")
        lv68 = R.call_tir(add4, (lv67, stage1_unit2_bn1_beta), (64,), dtype="float32")
        lv69 = R.call_tir(expand_dims1, (lv68,), (64, 1, 1), dtype="float32")
        lv70 = R.call_tir(expand_dims3, (lv69,), (1, 64, 1, 1), dtype="float32")
        lv71 = R.call_tir(add6, (lv65, lv70), (1, 64, 56, 56), dtype="float32")
        lv72 = R.call_tir(relu1, (lv71,), (1, 64, 56, 56), dtype="float32")
        lv73 = R.call_tir(add3, (stage1_unit2_bn2_moving_var, 2e-05), (64,), dtype="float32")
        lv74 = R.call_tir(rsqrt1, (lv73,), (64,), dtype="float32")
        lv75 = R.call_tir(multiply1, (lv74, stage1_unit2_bn2_gamma), (64,), dtype="float32")
        lv76 = R.call_tir(expand_dims1, (lv75,), (64, 1, 1), dtype="float32")
        lv77 = R.call_tir(squeeze1, (lv76,), (64,), dtype="float32")
        lv78 = R.call_tir(expand_dims2, (lv77,), (64, 1, 1, 1), dtype="float32")
        lv79 = R.call_tir(multiply5, (stage1_unit2_conv1_weight, lv78), (64, 64, 3, 3), dtype="float32")
        lv80 = R.call_tir(conv2d1, (lv72, lv79), (1, 64, 56, 56), dtype="float32")
        lv81 = R.call_tir(negative1, (stage1_unit2_bn2_moving_mean,), (64,), dtype="float32")
        lv82 = R.call_tir(multiply1, (lv81, lv75), (64,), dtype="float32")
        lv83 = R.call_tir(add4, (lv82, stage1_unit2_bn2_beta), (64,), dtype="float32")
        lv84 = R.call_tir(expand_dims1, (lv83,), (64, 1, 1), dtype="float32")
        lv85 = R.call_tir(expand_dims3, (lv84,), (1, 64, 1, 1), dtype="float32")
        lv86 = R.call_tir(add7, (lv80, lv85), (1, 64, 56, 56), dtype="float32")
        lv87 = R.call_tir(relu1, (lv86,), (1, 64, 56, 56), dtype="float32")
        lv88 = R.call_tir(conv2d1, (lv87, stage1_unit2_conv2_weight), (1, 64, 56, 56), dtype="float32")
        lv89 = R.call_tir(add8, (lv88, lv59), (1, 64, 56, 56), dtype="float32")
        lv90 = R.call_tir(add3, (stage2_unit1_bn1_moving_var, 2e-05), (64,), dtype="float32")
        lv91 = R.call_tir(rsqrt1, (lv90,), (64,), dtype="float32")
        lv92 = R.call_tir(multiply1, (lv91, stage2_unit1_bn1_gamma), (64,), dtype="float32")
        lv93 = R.call_tir(expand_dims1, (lv92,), (64, 1, 1), dtype="float32")
        lv94 = R.call_tir(expand_dims3, (lv93,), (1, 64, 1, 1), dtype="float32")
        lv95 = R.call_tir(multiply4, (lv89, lv94), (1, 64, 56, 56), dtype="float32")
        lv96 = R.call_tir(negative1, (stage2_unit1_bn1_moving_mean,), (64,), dtype="float32")
        lv97 = R.call_tir(multiply1, (lv96, lv92), (64,), dtype="float32")
        lv98 = R.call_tir(add4, (lv97, stage2_unit1_bn1_beta), (64,), dtype="float32")
        lv99 = R.call_tir(expand_dims1, (lv98,), (64, 1, 1), dtype="float32")
        lv100 = R.call_tir(expand_dims3, (lv99,), (1, 64, 1, 1), dtype="float32")
        lv101 = R.call_tir(add6, (lv95, lv100), (1, 64, 56, 56), dtype="float32")
        lv102 = R.call_tir(relu1, (lv101,), (1, 64, 56, 56), dtype="float32")
        lv103 = R.call_tir(add9, (stage2_unit1_bn2_moving_var, 2e-05), (128,), dtype="float32")
        lv104 = R.call_tir(rsqrt2, (lv103,), (128,), dtype="float32")
        lv105 = R.call_tir(multiply6, (lv104, stage2_unit1_bn2_gamma), (128,), dtype="float32")
        lv106 = R.call_tir(expand_dims4, (lv105,), (128, 1, 1), dtype="float32")
        lv107 = R.call_tir(squeeze2, (lv106,), (128,), dtype="float32")
        lv108 = R.call_tir(expand_dims5, (lv107,), (128, 1, 1, 1), dtype="float32")
        lv109 = R.call_tir(multiply7, (stage2_unit1_conv1_weight, lv108), (128, 64, 3, 3), dtype="float32")
        lv110 = R.call_tir(conv2d3, (lv102, lv109), (1, 128, 28, 28), dtype="float32")
        lv111 = R.call_tir(negative2, (stage2_unit1_bn2_moving_mean,), (128,), dtype="float32")
        lv112 = R.call_tir(multiply6, (lv111, lv105), (128,), dtype="float32")
        lv113 = R.call_tir(add10, (lv112, stage2_unit1_bn2_beta), (128,), dtype="float32")
        lv114 = R.call_tir(expand_dims4, (lv113,), (128, 1, 1), dtype="float32")
        lv115 = R.call_tir(expand_dims6, (lv114,), (1, 128, 1, 1), dtype="float32")
        lv116 = R.call_tir(add11, (lv110, lv115), (1, 128, 28, 28), dtype="float32")
        lv117 = R.call_tir(relu2, (lv116,), (1, 128, 28, 28), dtype="float32")
        lv118 = R.call_tir(conv2d4, (lv117, stage2_unit1_conv2_weight), (1, 128, 28, 28), dtype="float32")
        lv119 = R.call_tir(conv2d5, (lv102, stage2_unit1_sc_weight), (1, 128, 28, 28), dtype="float32")
        lv120 = R.call_tir(add12, (lv118, lv119), (1, 128, 28, 28), dtype="float32")
        lv121 = R.call_tir(add9, (stage2_unit2_bn1_moving_var, 2e-05), (128,), dtype="float32")
        lv122 = R.call_tir(rsqrt2, (lv121,), (128,), dtype="float32")
        lv123 = R.call_tir(multiply6, (lv122, stage2_unit2_bn1_gamma), (128,), dtype="float32")
        lv124 = R.call_tir(expand_dims4, (lv123,), (128, 1, 1), dtype="float32")
        lv125 = R.call_tir(expand_dims6, (lv124,), (1, 128, 1, 1), dtype="float32")
        lv126 = R.call_tir(multiply8, (lv120, lv125), (1, 128, 28, 28), dtype="float32")
        lv127 = R.call_tir(negative2, (stage2_unit2_bn1_moving_mean,), (128,), dtype="float32")
        lv128 = R.call_tir(multiply6, (lv127, lv123), (128,), dtype="float32")
        lv129 = R.call_tir(add10, (lv128, stage2_unit2_bn1_beta), (128,), dtype="float32")
        lv130 = R.call_tir(expand_dims4, (lv129,), (128, 1, 1), dtype="float32")
        lv131 = R.call_tir(expand_dims6, (lv130,), (1, 128, 1, 1), dtype="float32")
        lv132 = R.call_tir(add13, (lv126, lv131), (1, 128, 28, 28), dtype="float32")
        lv133 = R.call_tir(relu2, (lv132,), (1, 128, 28, 28), dtype="float32")
        lv134 = R.call_tir(add9, (stage2_unit2_bn2_moving_var, 2e-05), (128,), dtype="float32")
        lv135 = R.call_tir(rsqrt2, (lv134,), (128,), dtype="float32")
        lv136 = R.call_tir(multiply6, (lv135, stage2_unit2_bn2_gamma), (128,), dtype="float32")
        lv137 = R.call_tir(expand_dims4, (lv136,), (128, 1, 1), dtype="float32")
        lv138 = R.call_tir(squeeze2, (lv137,), (128,), dtype="float32")
        lv139 = R.call_tir(expand_dims5, (lv138,), (128, 1, 1, 1), dtype="float32")
        lv140 = R.call_tir(multiply9, (stage2_unit2_conv1_weight, lv139), (128, 128, 3, 3), dtype="float32")
        lv141 = R.call_tir(conv2d4, (lv133, lv140), (1, 128, 28, 28), dtype="float32")
        lv142 = R.call_tir(negative2, (stage2_unit2_bn2_moving_mean,), (128,), dtype="float32")
        lv143 = R.call_tir(multiply6, (lv142, lv136), (128,), dtype="float32")
        lv144 = R.call_tir(add10, (lv143, stage2_unit2_bn2_beta), (128,), dtype="float32")
        lv145 = R.call_tir(expand_dims4, (lv144,), (128, 1, 1), dtype="float32")
        lv146 = R.call_tir(expand_dims6, (lv145,), (1, 128, 1, 1), dtype="float32")
        lv147 = R.call_tir(add11, (lv141, lv146), (1, 128, 28, 28), dtype="float32")
        lv148 = R.call_tir(relu2, (lv147,), (1, 128, 28, 28), dtype="float32")
        lv149 = R.call_tir(conv2d4, (lv148, stage2_unit2_conv2_weight), (1, 128, 28, 28), dtype="float32")
        lv150 = R.call_tir(add12, (lv149, lv120), (1, 128, 28, 28), dtype="float32")
        lv151 = R.call_tir(add9, (stage3_unit1_bn1_moving_var, 2e-05), (128,), dtype="float32")
        lv152 = R.call_tir(rsqrt2, (lv151,), (128,), dtype="float32")
        lv153 = R.call_tir(multiply6, (lv152, stage3_unit1_bn1_gamma), (128,), dtype="float32")
        lv154 = R.call_tir(expand_dims4, (lv153,), (128, 1, 1), dtype="float32")
        lv155 = R.call_tir(expand_dims6, (lv154,), (1, 128, 1, 1), dtype="float32")
        lv156 = R.call_tir(multiply8, (lv150, lv155), (1, 128, 28, 28), dtype="float32")
        lv157 = R.call_tir(negative2, (stage3_unit1_bn1_moving_mean,), (128,), dtype="float32")
        lv158 = R.call_tir(multiply6, (lv157, lv153), (128,), dtype="float32")
        lv159 = R.call_tir(add10, (lv158, stage3_unit1_bn1_beta), (128,), dtype="float32")
        lv160 = R.call_tir(expand_dims4, (lv159,), (128, 1, 1), dtype="float32")
        lv161 = R.call_tir(expand_dims6, (lv160,), (1, 128, 1, 1), dtype="float32")
        lv162 = R.call_tir(add13, (lv156, lv161), (1, 128, 28, 28), dtype="float32")
        lv163 = R.call_tir(relu2, (lv162,), (1, 128, 28, 28), dtype="float32")
        lv164 = R.call_tir(add14, (stage3_unit1_bn2_moving_var, 2e-05), (256,), dtype="float32")
        lv165 = R.call_tir(rsqrt3, (lv164,), (256,), dtype="float32")
        lv166 = R.call_tir(multiply10, (lv165, stage3_unit1_bn2_gamma), (256,), dtype="float32")
        lv167 = R.call_tir(expand_dims7, (lv166,), (256, 1, 1), dtype="float32")
        lv168 = R.call_tir(squeeze3, (lv167,), (256,), dtype="float32")
        lv169 = R.call_tir(expand_dims8, (lv168,), (256, 1, 1, 1), dtype="float32")
        lv170 = R.call_tir(multiply11, (stage3_unit1_conv1_weight, lv169), (256, 128, 3, 3), dtype="float32")
        lv171 = R.call_tir(conv2d6, (lv163, lv170), (1, 256, 14, 14), dtype="float32")
        lv172 = R.call_tir(negative3, (stage3_unit1_bn2_moving_mean,), (256,), dtype="float32")
        lv173 = R.call_tir(multiply10, (lv172, lv166), (256,), dtype="float32")
        lv174 = R.call_tir(add15, (lv173, stage3_unit1_bn2_beta), (256,), dtype="float32")
        lv175 = R.call_tir(expand_dims7, (lv174,), (256, 1, 1), dtype="float32")
        lv176 = R.call_tir(expand_dims9, (lv175,), (1, 256, 1, 1), dtype="float32")
        lv177 = R.call_tir(add16, (lv171, lv176), (1, 256, 14, 14), dtype="float32")
        lv178 = R.call_tir(relu3, (lv177,), (1, 256, 14, 14), dtype="float32")
        lv179 = R.call_tir(conv2d7, (lv178, stage3_unit1_conv2_weight), (1, 256, 14, 14), dtype="float32")
        lv180 = R.call_tir(conv2d8, (lv163, stage3_unit1_sc_weight), (1, 256, 14, 14), dtype="float32")
        lv181 = R.call_tir(add17, (lv179, lv180), (1, 256, 14, 14), dtype="float32")
        lv182 = R.call_tir(add14, (stage3_unit2_bn1_moving_var, 2e-05), (256,), dtype="float32")
        lv183 = R.call_tir(rsqrt3, (lv182,), (256,), dtype="float32")
        lv184 = R.call_tir(multiply10, (lv183, stage3_unit2_bn1_gamma), (256,), dtype="float32")
        lv185 = R.call_tir(expand_dims7, (lv184,), (256, 1, 1), dtype="float32")
        lv186 = R.call_tir(expand_dims9, (lv185,), (1, 256, 1, 1), dtype="float32")
        lv187 = R.call_tir(multiply12, (lv181, lv186), (1, 256, 14, 14), dtype="float32")
        lv188 = R.call_tir(negative3, (stage3_unit2_bn1_moving_mean,), (256,), dtype="float32")
        lv189 = R.call_tir(multiply10, (lv188, lv184), (256,), dtype="float32")
        lv190 = R.call_tir(add15, (lv189, stage3_unit2_bn1_beta), (256,), dtype="float32")
        lv191 = R.call_tir(expand_dims7, (lv190,), (256, 1, 1), dtype="float32")
        lv192 = R.call_tir(expand_dims9, (lv191,), (1, 256, 1, 1), dtype="float32")
        lv193 = R.call_tir(add18, (lv187, lv192), (1, 256, 14, 14), dtype="float32")
        lv194 = R.call_tir(relu3, (lv193,), (1, 256, 14, 14), dtype="float32")
        lv195 = R.call_tir(add14, (stage3_unit2_bn2_moving_var, 2e-05), (256,), dtype="float32")
        lv196 = R.call_tir(rsqrt3, (lv195,), (256,), dtype="float32")
        lv197 = R.call_tir(multiply10, (lv196, stage3_unit2_bn2_gamma), (256,), dtype="float32")
        lv198 = R.call_tir(expand_dims7, (lv197,), (256, 1, 1), dtype="float32")
        lv199 = R.call_tir(squeeze3, (lv198,), (256,), dtype="float32")
        lv200 = R.call_tir(expand_dims8, (lv199,), (256, 1, 1, 1), dtype="float32")
        lv201 = R.call_tir(multiply13, (stage3_unit2_conv1_weight, lv200), (256, 256, 3, 3), dtype="float32")
        lv202 = R.call_tir(conv2d7, (lv194, lv201), (1, 256, 14, 14), dtype="float32")
        lv203 = R.call_tir(negative3, (stage3_unit2_bn2_moving_mean,), (256,), dtype="float32")
        lv204 = R.call_tir(multiply10, (lv203, lv197), (256,), dtype="float32")
        lv205 = R.call_tir(add15, (lv204, stage3_unit2_bn2_beta), (256,), dtype="float32")
        lv206 = R.call_tir(expand_dims7, (lv205,), (256, 1, 1), dtype="float32")
        lv207 = R.call_tir(expand_dims9, (lv206,), (1, 256, 1, 1), dtype="float32")
        lv208 = R.call_tir(add16, (lv202, lv207), (1, 256, 14, 14), dtype="float32")
        lv209 = R.call_tir(relu3, (lv208,), (1, 256, 14, 14), dtype="float32")
        lv210 = R.call_tir(conv2d7, (lv209, stage3_unit2_conv2_weight), (1, 256, 14, 14), dtype="float32")
        lv211 = R.call_tir(add17, (lv210, lv181), (1, 256, 14, 14), dtype="float32")
        lv212 = R.call_tir(add14, (stage4_unit1_bn1_moving_var, 2e-05), (256,), dtype="float32")
        lv213 = R.call_tir(rsqrt3, (lv212,), (256,), dtype="float32")
        lv214 = R.call_tir(multiply10, (lv213, stage4_unit1_bn1_gamma), (256,), dtype="float32")
        lv215 = R.call_tir(expand_dims7, (lv214,), (256, 1, 1), dtype="float32")
        lv216 = R.call_tir(expand_dims9, (lv215,), (1, 256, 1, 1), dtype="float32")
        lv217 = R.call_tir(multiply12, (lv211, lv216), (1, 256, 14, 14), dtype="float32")
        lv218 = R.call_tir(negative3, (stage4_unit1_bn1_moving_mean,), (256,), dtype="float32")
        lv219 = R.call_tir(multiply10, (lv218, lv214), (256,), dtype="float32")
        lv220 = R.call_tir(add15, (lv219, stage4_unit1_bn1_beta), (256,), dtype="float32")
        lv221 = R.call_tir(expand_dims7, (lv220,), (256, 1, 1), dtype="float32")
        lv222 = R.call_tir(expand_dims9, (lv221,), (1, 256, 1, 1), dtype="float32")
        lv223 = R.call_tir(add18, (lv217, lv222), (1, 256, 14, 14), dtype="float32")
        lv224 = R.call_tir(relu3, (lv223,), (1, 256, 14, 14), dtype="float32")
        lv225 = R.call_tir(add19, (stage4_unit1_bn2_moving_var, 2e-05), (512,), dtype="float32")
        lv226 = R.call_tir(rsqrt4, (lv225,), (512,), dtype="float32")
        lv227 = R.call_tir(multiply14, (lv226, stage4_unit1_bn2_gamma), (512,), dtype="float32")
        lv228 = R.call_tir(expand_dims10, (lv227,), (512, 1, 1), dtype="float32")
        lv229 = R.call_tir(squeeze4, (lv228,), (512,), dtype="float32")
        lv230 = R.call_tir(expand_dims11, (lv229,), (512, 1, 1, 1), dtype="float32")
        lv231 = R.call_tir(multiply15, (stage4_unit1_conv1_weight, lv230), (512, 256, 3, 3), dtype="float32")
        lv232 = R.call_tir(conv2d9, (lv224, lv231), (1, 512, 7, 7), dtype="float32")
        lv233 = R.call_tir(negative4, (stage4_unit1_bn2_moving_mean,), (512,), dtype="float32")
        lv234 = R.call_tir(multiply14, (lv233, lv227), (512,), dtype="float32")
        lv235 = R.call_tir(add20, (lv234, stage4_unit1_bn2_beta), (512,), dtype="float32")
        lv236 = R.call_tir(expand_dims10, (lv235,), (512, 1, 1), dtype="float32")
        lv237 = R.call_tir(expand_dims12, (lv236,), (1, 512, 1, 1), dtype="float32")
        lv238 = R.call_tir(add21, (lv232, lv237), (1, 512, 7, 7), dtype="float32")
        lv239 = R.call_tir(relu4, (lv238,), (1, 512, 7, 7), dtype="float32")
        lv240 = R.call_tir(conv2d10, (lv239, stage4_unit1_conv2_weight), (1, 512, 7, 7), dtype="float32")
        lv241 = R.call_tir(conv2d11, (lv224, stage4_unit1_sc_weight), (1, 512, 7, 7), dtype="float32")
        lv242 = R.call_tir(add22, (lv240, lv241), (1, 512, 7, 7), dtype="float32")
        lv243 = R.call_tir(add19, (stage4_unit2_bn1_moving_var, 2e-05), (512,), dtype="float32")
        lv244 = R.call_tir(rsqrt4, (lv243,), (512,), dtype="float32")
        lv245 = R.call_tir(multiply14, (lv244, stage4_unit2_bn1_gamma), (512,), dtype="float32")
        lv246 = R.call_tir(expand_dims10, (lv245,), (512, 1, 1), dtype="float32")
        lv247 = R.call_tir(expand_dims12, (lv246,), (1, 512, 1, 1), dtype="float32")
        lv248 = R.call_tir(multiply16, (lv242, lv247), (1, 512, 7, 7), dtype="float32")
        lv249 = R.call_tir(negative4, (stage4_unit2_bn1_moving_mean,), (512,), dtype="float32")
        lv250 = R.call_tir(multiply14, (lv249, lv245), (512,), dtype="float32")
        lv251 = R.call_tir(add20, (lv250, stage4_unit2_bn1_beta), (512,), dtype="float32")
        lv252 = R.call_tir(expand_dims10, (lv251,), (512, 1, 1), dtype="float32")
        lv253 = R.call_tir(expand_dims12, (lv252,), (1, 512, 1, 1), dtype="float32")
        lv254 = R.call_tir(add23, (lv248, lv253), (1, 512, 7, 7), dtype="float32")
        lv255 = R.call_tir(relu4, (lv254,), (1, 512, 7, 7), dtype="float32")
        lv256 = R.call_tir(add19, (stage4_unit2_bn2_moving_var, 2e-05), (512,), dtype="float32")
        lv257 = R.call_tir(rsqrt4, (lv256,), (512,), dtype="float32")
        lv258 = R.call_tir(multiply14, (lv257, stage4_unit2_bn2_gamma), (512,), dtype="float32")
        lv259 = R.call_tir(expand_dims10, (lv258,), (512, 1, 1), dtype="float32")
        lv260 = R.call_tir(squeeze4, (lv259,), (512,), dtype="float32")
        lv261 = R.call_tir(expand_dims11, (lv260,), (512, 1, 1, 1), dtype="float32")
        lv262 = R.call_tir(multiply17, (stage4_unit2_conv1_weight, lv261), (512, 512, 3, 3), dtype="float32")
        lv263 = R.call_tir(conv2d10, (lv255, lv262), (1, 512, 7, 7), dtype="float32")
        lv264 = R.call_tir(negative4, (stage4_unit2_bn2_moving_mean,), (512,), dtype="float32")
        lv265 = R.call_tir(multiply14, (lv264, lv258), (512,), dtype="float32")
        lv266 = R.call_tir(add20, (lv265, stage4_unit2_bn2_beta), (512,), dtype="float32")
        lv267 = R.call_tir(expand_dims10, (lv266,), (512, 1, 1), dtype="float32")
        lv268 = R.call_tir(expand_dims12, (lv267,), (1, 512, 1, 1), dtype="float32")
        lv269 = R.call_tir(add21, (lv263, lv268), (1, 512, 7, 7), dtype="float32")
        lv270 = R.call_tir(relu4, (lv269,), (1, 512, 7, 7), dtype="float32")
        lv271 = R.call_tir(conv2d10, (lv270, stage4_unit2_conv2_weight), (1, 512, 7, 7), dtype="float32")
        lv272 = R.call_tir(add22, (lv271, lv242), (1, 512, 7, 7), dtype="float32")
        lv273 = R.call_tir(add19, (bn1_moving_var, 2e-05), (512,), dtype="float32")
        lv274 = R.call_tir(rsqrt4, (lv273,), (512,), dtype="float32")
        lv275 = R.call_tir(multiply14, (lv274, bn1_gamma), (512,), dtype="float32")
        lv276 = R.call_tir(expand_dims10, (lv275,), (512, 1, 1), dtype="float32")
        lv277 = R.call_tir(expand_dims12, (lv276,), (1, 512, 1, 1), dtype="float32")
        lv278 = R.call_tir(multiply16, (lv272, lv277), (1, 512, 7, 7), dtype="float32")
        lv279 = R.call_tir(negative4, (bn1_moving_mean,), (512,), dtype="float32")
        lv280 = R.call_tir(multiply14, (lv279, lv275), (512,), dtype="float32")
        lv281 = R.call_tir(add20, (lv280, bn1_beta), (512,), dtype="float32")
        lv282 = R.call_tir(expand_dims10, (lv281,), (512, 1, 1), dtype="float32")
        lv283 = R.call_tir(expand_dims12, (lv282,), (1, 512, 1, 1), dtype="float32")
        lv284 = R.call_tir(add23, (lv278, lv283), (1, 512, 7, 7), dtype="float32")
        lv285 = R.call_tir(relu4, (lv284,), (1, 512, 7, 7), dtype="float32")
        lv286 = R.call_tir(global_avg_pool2d, (lv285,), (1, 512, 1, 1), dtype="float32")
        lv287 = R.call_tir(batch_flatten, (lv286,), (1, 512), dtype="float32")
        lv288 = R.call_tir(dense, (lv287, fc1_weight), (1, 1000), dtype="float32")
        lv289 = R.call_tir(expand_dims13, (fc1_bias,), (1, 1000), dtype="float32")
        lv290 = R.call_tir(add24, (lv288, lv289), (1, 1000), dtype="float32")
        lv291 = R.call_tir(softmax, (lv290,), (1, 1000), dtype="float32")
        gv: Tensor((1, 1000), "float32") = lv291
        R.output(gv)
    return gv


@max_pool2d = primfn(var_rxplaceholder_94: handle, var_pool_max: handle) -> ()
  attr = {"global_symbol": "max_pool2d", "tir.noalias": True}
  buffers = {rxplaceholder_188: Buffer(rxplaceholder_189: Pointer(global float32), float32, [1, 64i64, 112, 112], []),
             pool_max: Buffer(pool_max_1: Pointer(global float32), float32, [1, 64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_94: rxplaceholder_188, var_pool_max: pool_max} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    pad_temp_8 = alloc_buffer(float32[1, 64i64, 114, 114])
     {
      for (i0_112: int32, 0, 1) {
        for (i1_102: int64, 0i64, 64i64) {
          for (i2_87: int32, 0, 114) {
            for (i3_80: int32, 0, 114) {
              block([1, 64i64, 114, 114], "pad_temp") as [ax0_43, ax1_33, ax2_30, ax3_24] {
                bind(ax0_43, i0_112)
                bind(ax1_33, i1_102)
                bind(ax2_30, i2_87)
                bind(ax3_24, i3_80)
                tir.reads([rxplaceholder_188[ax0_43, ax1_33, (ax2_30 - 1), (ax3_24 - 1)]])
                tir.writes([pad_temp_8[ax0_43, ax1_33, ax2_30, ax3_24]])
                pad_temp_8[ax0_43, ax1_33, ax2_30, ax3_24] = @tir.if_then_else(((((1 <= ax2_30) && (ax2_30 < 113)) && (1 <= ax3_24)) && (ax3_24 < 113)), rxplaceholder_188[ax0_43, ax1_33, (ax2_30 - 1), (ax3_24 - 1)], -3.40282e+38f32, dtype=float32)
            }
          }
        }
      }
      for (i0_113: int32, 0, 1) {
        for (i1_103: int32, 0, 64) {
          for (i2_88: int32, 0, 56) {
            for (i3_81: int32, 0, 56) {
              for (i4_25: int32, 0, 3) {
                for (i5_21: int32, 0, 3) {
                  block([1, 64, 56, 56, tir.reduce_axis(0, 3), tir.reduce_axis(0, 3)], "pool_max") as [ax0_44, ax1_34, ax2_31, ax3_25, rv0_1, rv1_1] {
                    bind(ax0_44, i0_113)
                    bind(ax1_34, i1_103)
                    bind(ax2_31, i2_88)
                    bind(ax3_25, i3_81)
                    bind(rv0_1, i4_25)
                    bind(rv1_1, i5_21)
                    tir.reads([pad_temp_8[ax0_44, ax1_34, ((ax2_31*2) + rv0_1), ((ax3_25*2) + rv1_1)]])
                    tir.writes([pool_max[ax0_44, ax1_34, ax2_31, ax3_25]])
                    tir.attrs({"schedule_rule": "meta_schedule.pool_max"})
                    with init() {
                      pool_max[ax0_44, ax1_34, ax2_31, ax3_25] = -3.40282e+38f32
                    }
                    pool_max[ax0_44, ax1_34, ax2_31, ax3_25] = max(pool_max[ax0_44, ax1_34, ax2_31, ax3_25], pad_temp_8[ax0_44, ax1_34, ((ax2_31*2) + rv0_1), ((ax3_25*2) + rv1_1)])
                }
              }
            }
          }
        }
      }
    }
}

@multiply = primfn(var_rxplaceholder_95: handle, var_rxplaceholder_96: handle, var_T_multiply: handle) -> ()
  attr = {"global_symbol": "multiply", "tir.noalias": True}
  buffers = {rxplaceholder_190: Buffer(rxplaceholder_192: Pointer(global float32), float32, [3i64], []),
             rxplaceholder_191: Buffer(rxplaceholder_193: Pointer(global float32), float32, [3i64], []),
             T_multiply: Buffer(T_multiply_1: Pointer(global float32), float32, [3i64], [])}
  buffer_map = {var_rxplaceholder_95: rxplaceholder_190, var_rxplaceholder_96: rxplaceholder_191, var_T_multiply: T_multiply} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_114: int64, 0i64, 3i64) {
      block([3i64], "T_multiply") as [ax0_45] {
        bind(ax0_45, i0_114)
        tir.reads([rxplaceholder_190[ax0_45], rxplaceholder_191[ax0_45]])
        tir.writes([T_multiply[ax0_45]])
        T_multiply[ax0_45] = (rxplaceholder_190[ax0_45]*rxplaceholder_191[ax0_45])
    }
}

@multiply1 = primfn(var_rxplaceholder_97: handle, var_rxplaceholder_98: handle, var_T_multiply_1: handle) -> ()
  attr = {"global_symbol": "multiply1", "tir.noalias": True}
  buffers = {rxplaceholder_194: Buffer(rxplaceholder_196: Pointer(global float32), float32, [64i64], []),
             rxplaceholder_195: Buffer(rxplaceholder_197: Pointer(global float32), float32, [64i64], []),
             T_multiply_2: Buffer(T_multiply_3: Pointer(global float32), float32, [64i64], [])}
  buffer_map = {var_rxplaceholder_97: rxplaceholder_194, var_rxplaceholder_98: rxplaceholder_195, var_T_multiply_1: T_multiply_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_115: int64, 0i64, 64i64) {
      block([64i64], "T_multiply") as [ax0_46] {
        bind(ax0_46, i0_115)
        tir.reads([rxplaceholder_194[ax0_46], rxplaceholder_195[ax0_46]])
        tir.writes([T_multiply_2[ax0_46]])
        T_multiply_2[ax0_46] = (rxplaceholder_194[ax0_46]*rxplaceholder_195[ax0_46])
    }
}

@multiply10 = primfn(var_rxplaceholder_99: handle, var_rxplaceholder_100: handle, var_T_multiply_2: handle) -> ()
  attr = {"global_symbol": "multiply10", "tir.noalias": True}
  buffers = {rxplaceholder_198: Buffer(rxplaceholder_200: Pointer(global float32), float32, [256i64], []),
             rxplaceholder_199: Buffer(rxplaceholder_201: Pointer(global float32), float32, [256i64], []),
             T_multiply_4: Buffer(T_multiply_5: Pointer(global float32), float32, [256i64], [])}
  buffer_map = {var_rxplaceholder_99: rxplaceholder_198, var_rxplaceholder_100: rxplaceholder_199, var_T_multiply_2: T_multiply_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_116: int64, 0i64, 256i64) {
      block([256i64], "T_multiply") as [ax0_47] {
        bind(ax0_47, i0_116)
        tir.reads([rxplaceholder_198[ax0_47], rxplaceholder_199[ax0_47]])
        tir.writes([T_multiply_4[ax0_47]])
        T_multiply_4[ax0_47] = (rxplaceholder_198[ax0_47]*rxplaceholder_199[ax0_47])
    }
}

@multiply11 = primfn(var_rxplaceholder_101: handle, var_rxplaceholder_102: handle, var_T_multiply_3: handle) -> ()
  attr = {"global_symbol": "multiply11", "tir.noalias": True}
  buffers = {rxplaceholder_202: Buffer(rxplaceholder_204: Pointer(global float32), float32, [256i64, 128i64, 3i64, 3i64], []),
             rxplaceholder_203: Buffer(rxplaceholder_205: Pointer(global float32), float32, [256i64, 1, 1, 1], []),
             T_multiply_6: Buffer(T_multiply_7: Pointer(global float32), float32, [256i64, 128i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_101: rxplaceholder_202, var_rxplaceholder_102: rxplaceholder_203, var_T_multiply_3: T_multiply_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_117: int64, 0i64, 256i64) {
      for (i1_104: int64, 0i64, 128i64) {
        for (i2_89: int64, 0i64, 3i64) {
          for (i3_82: int64, 0i64, 3i64) {
            block([256i64, 128i64, 3i64, 3i64], "T_multiply") as [ax0_48, ax1_35, ax2_32, ax3_26] {
              bind(ax0_48, i0_117)
              bind(ax1_35, i1_104)
              bind(ax2_32, i2_89)
              bind(ax3_26, i3_82)
              tir.reads([rxplaceholder_202[ax0_48, ax1_35, ax2_32, ax3_26], rxplaceholder_203[ax0_48, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_6[ax0_48, ax1_35, ax2_32, ax3_26]])
              T_multiply_6[ax0_48, ax1_35, ax2_32, ax3_26] = (rxplaceholder_202[ax0_48, ax1_35, ax2_32, ax3_26]*rxplaceholder_203[ax0_48, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply12 = primfn(var_rxplaceholder_103: handle, var_rxplaceholder_104: handle, var_T_multiply_4: handle) -> ()
  attr = {"global_symbol": "multiply12", "tir.noalias": True}
  buffers = {rxplaceholder_206: Buffer(rxplaceholder_208: Pointer(global float32), float32, [1, 256, 14, 14], []),
             rxplaceholder_207: Buffer(rxplaceholder_209: Pointer(global float32), float32, [1, 256i64, 1, 1], []),
             T_multiply_8: Buffer(T_multiply_9: Pointer(global float32), float32, [1, 256i64, 14, 14], [])}
  buffer_map = {var_rxplaceholder_103: rxplaceholder_206, var_rxplaceholder_104: rxplaceholder_207, var_T_multiply_4: T_multiply_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_118: int32, 0, 1) {
      for (i1_105: int64, 0i64, 256i64) {
        for (i2_90: int32, 0, 14) {
          for (i3_83: int32, 0, 14) {
            block([1, 256i64, 14, 14], "T_multiply") as [ax0_49, ax1_36, ax2_33, ax3_27] {
              bind(ax0_49, i0_118)
              bind(ax1_36, i1_105)
              bind(ax2_33, i2_90)
              bind(ax3_27, i3_83)
              tir.reads([rxplaceholder_206[ax0_49, ax1_36, ax2_33, ax3_27], rxplaceholder_207[ax0_49, ax1_36, 0, 0]])
              tir.writes([T_multiply_8[ax0_49, ax1_36, ax2_33, ax3_27]])
              T_multiply_8[ax0_49, ax1_36, ax2_33, ax3_27] = (rxplaceholder_206[ax0_49, ax1_36, ax2_33, ax3_27]*rxplaceholder_207[ax0_49, ax1_36, 0, 0])
          }
        }
      }
    }
}

@multiply13 = primfn(var_rxplaceholder_105: handle, var_rxplaceholder_106: handle, var_T_multiply_5: handle) -> ()
  attr = {"global_symbol": "multiply13", "tir.noalias": True}
  buffers = {rxplaceholder_210: Buffer(rxplaceholder_212: Pointer(global float32), float32, [256i64, 256i64, 3i64, 3i64], []),
             rxplaceholder_211: Buffer(rxplaceholder_213: Pointer(global float32), float32, [256i64, 1, 1, 1], []),
             T_multiply_10: Buffer(T_multiply_11: Pointer(global float32), float32, [256i64, 256i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_105: rxplaceholder_210, var_rxplaceholder_106: rxplaceholder_211, var_T_multiply_5: T_multiply_10} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_119: int64, 0i64, 256i64) {
      for (i1_106: int64, 0i64, 256i64) {
        for (i2_91: int64, 0i64, 3i64) {
          for (i3_84: int64, 0i64, 3i64) {
            block([256i64, 256i64, 3i64, 3i64], "T_multiply") as [ax0_50, ax1_37, ax2_34, ax3_28] {
              bind(ax0_50, i0_119)
              bind(ax1_37, i1_106)
              bind(ax2_34, i2_91)
              bind(ax3_28, i3_84)
              tir.reads([rxplaceholder_210[ax0_50, ax1_37, ax2_34, ax3_28], rxplaceholder_211[ax0_50, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_10[ax0_50, ax1_37, ax2_34, ax3_28]])
              T_multiply_10[ax0_50, ax1_37, ax2_34, ax3_28] = (rxplaceholder_210[ax0_50, ax1_37, ax2_34, ax3_28]*rxplaceholder_211[ax0_50, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply14 = primfn(var_rxplaceholder_107: handle, var_rxplaceholder_108: handle, var_T_multiply_6: handle) -> ()
  attr = {"global_symbol": "multiply14", "tir.noalias": True}
  buffers = {rxplaceholder_214: Buffer(rxplaceholder_216: Pointer(global float32), float32, [512i64], []),
             rxplaceholder_215: Buffer(rxplaceholder_217: Pointer(global float32), float32, [512i64], []),
             T_multiply_12: Buffer(T_multiply_13: Pointer(global float32), float32, [512i64], [])}
  buffer_map = {var_rxplaceholder_107: rxplaceholder_214, var_rxplaceholder_108: rxplaceholder_215, var_T_multiply_6: T_multiply_12} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_120: int64, 0i64, 512i64) {
      block([512i64], "T_multiply") as [ax0_51] {
        bind(ax0_51, i0_120)
        tir.reads([rxplaceholder_214[ax0_51], rxplaceholder_215[ax0_51]])
        tir.writes([T_multiply_12[ax0_51]])
        T_multiply_12[ax0_51] = (rxplaceholder_214[ax0_51]*rxplaceholder_215[ax0_51])
    }
}

@multiply15 = primfn(var_rxplaceholder_109: handle, var_rxplaceholder_110: handle, var_T_multiply_7: handle) -> ()
  attr = {"global_symbol": "multiply15", "tir.noalias": True}
  buffers = {rxplaceholder_218: Buffer(rxplaceholder_220: Pointer(global float32), float32, [512i64, 256i64, 3i64, 3i64], []),
             rxplaceholder_219: Buffer(rxplaceholder_221: Pointer(global float32), float32, [512i64, 1, 1, 1], []),
             T_multiply_14: Buffer(T_multiply_15: Pointer(global float32), float32, [512i64, 256i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_109: rxplaceholder_218, var_rxplaceholder_110: rxplaceholder_219, var_T_multiply_7: T_multiply_14} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_121: int64, 0i64, 512i64) {
      for (i1_107: int64, 0i64, 256i64) {
        for (i2_92: int64, 0i64, 3i64) {
          for (i3_85: int64, 0i64, 3i64) {
            block([512i64, 256i64, 3i64, 3i64], "T_multiply") as [ax0_52, ax1_38, ax2_35, ax3_29] {
              bind(ax0_52, i0_121)
              bind(ax1_38, i1_107)
              bind(ax2_35, i2_92)
              bind(ax3_29, i3_85)
              tir.reads([rxplaceholder_218[ax0_52, ax1_38, ax2_35, ax3_29], rxplaceholder_219[ax0_52, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_14[ax0_52, ax1_38, ax2_35, ax3_29]])
              T_multiply_14[ax0_52, ax1_38, ax2_35, ax3_29] = (rxplaceholder_218[ax0_52, ax1_38, ax2_35, ax3_29]*rxplaceholder_219[ax0_52, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply16 = primfn(var_rxplaceholder_111: handle, var_rxplaceholder_112: handle, var_T_multiply_8: handle) -> ()
  attr = {"global_symbol": "multiply16", "tir.noalias": True}
  buffers = {rxplaceholder_222: Buffer(rxplaceholder_224: Pointer(global float32), float32, [1, 512, 7, 7], []),
             rxplaceholder_223: Buffer(rxplaceholder_225: Pointer(global float32), float32, [1, 512i64, 1, 1], []),
             T_multiply_16: Buffer(T_multiply_17: Pointer(global float32), float32, [1, 512i64, 7, 7], [])}
  buffer_map = {var_rxplaceholder_111: rxplaceholder_222, var_rxplaceholder_112: rxplaceholder_223, var_T_multiply_8: T_multiply_16} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_122: int32, 0, 1) {
      for (i1_108: int64, 0i64, 512i64) {
        for (i2_93: int32, 0, 7) {
          for (i3_86: int32, 0, 7) {
            block([1, 512i64, 7, 7], "T_multiply") as [ax0_53, ax1_39, ax2_36, ax3_30] {
              bind(ax0_53, i0_122)
              bind(ax1_39, i1_108)
              bind(ax2_36, i2_93)
              bind(ax3_30, i3_86)
              tir.reads([rxplaceholder_222[ax0_53, ax1_39, ax2_36, ax3_30], rxplaceholder_223[ax0_53, ax1_39, 0, 0]])
              tir.writes([T_multiply_16[ax0_53, ax1_39, ax2_36, ax3_30]])
              T_multiply_16[ax0_53, ax1_39, ax2_36, ax3_30] = (rxplaceholder_222[ax0_53, ax1_39, ax2_36, ax3_30]*rxplaceholder_223[ax0_53, ax1_39, 0, 0])
          }
        }
      }
    }
}

@multiply17 = primfn(var_rxplaceholder_113: handle, var_rxplaceholder_114: handle, var_T_multiply_9: handle) -> ()
  attr = {"global_symbol": "multiply17", "tir.noalias": True}
  buffers = {rxplaceholder_226: Buffer(rxplaceholder_228: Pointer(global float32), float32, [512i64, 512i64, 3i64, 3i64], []),
             rxplaceholder_227: Buffer(rxplaceholder_229: Pointer(global float32), float32, [512i64, 1, 1, 1], []),
             T_multiply_18: Buffer(T_multiply_19: Pointer(global float32), float32, [512i64, 512i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_113: rxplaceholder_226, var_rxplaceholder_114: rxplaceholder_227, var_T_multiply_9: T_multiply_18} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_123: int64, 0i64, 512i64) {
      for (i1_109: int64, 0i64, 512i64) {
        for (i2_94: int64, 0i64, 3i64) {
          for (i3_87: int64, 0i64, 3i64) {
            block([512i64, 512i64, 3i64, 3i64], "T_multiply") as [ax0_54, ax1_40, ax2_37, ax3_31] {
              bind(ax0_54, i0_123)
              bind(ax1_40, i1_109)
              bind(ax2_37, i2_94)
              bind(ax3_31, i3_87)
              tir.reads([rxplaceholder_226[ax0_54, ax1_40, ax2_37, ax3_31], rxplaceholder_227[ax0_54, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_18[ax0_54, ax1_40, ax2_37, ax3_31]])
              T_multiply_18[ax0_54, ax1_40, ax2_37, ax3_31] = (rxplaceholder_226[ax0_54, ax1_40, ax2_37, ax3_31]*rxplaceholder_227[ax0_54, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply2 = primfn(var_rxplaceholder_115: handle, var_rxplaceholder_116: handle, var_T_multiply_10: handle) -> ()
  attr = {"global_symbol": "multiply2", "tir.noalias": True}
  buffers = {rxplaceholder_230: Buffer(rxplaceholder_232: Pointer(global float32), float32, [64i64, 3i64, 7i64, 7i64], []),
             rxplaceholder_231: Buffer(rxplaceholder_233: Pointer(global float32), float32, [64i64, 1, 1, 1], []),
             T_multiply_20: Buffer(T_multiply_21: Pointer(global float32), float32, [64i64, 3i64, 7i64, 7i64], [])}
  buffer_map = {var_rxplaceholder_115: rxplaceholder_230, var_rxplaceholder_116: rxplaceholder_231, var_T_multiply_10: T_multiply_20} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_124: int64, 0i64, 64i64) {
      for (i1_110: int64, 0i64, 3i64) {
        for (i2_95: int64, 0i64, 7i64) {
          for (i3_88: int64, 0i64, 7i64) {
            block([64i64, 3i64, 7i64, 7i64], "T_multiply") as [ax0_55, ax1_41, ax2_38, ax3_32] {
              bind(ax0_55, i0_124)
              bind(ax1_41, i1_110)
              bind(ax2_38, i2_95)
              bind(ax3_32, i3_88)
              tir.reads([rxplaceholder_230[ax0_55, ax1_41, ax2_38, ax3_32], rxplaceholder_231[ax0_55, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_20[ax0_55, ax1_41, ax2_38, ax3_32]])
              T_multiply_20[ax0_55, ax1_41, ax2_38, ax3_32] = (rxplaceholder_230[ax0_55, ax1_41, ax2_38, ax3_32]*rxplaceholder_231[ax0_55, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply3 = primfn(var_rxplaceholder_117: handle, var_rxplaceholder_118: handle, var_T_multiply_11: handle) -> ()
  attr = {"global_symbol": "multiply3", "tir.noalias": True}
  buffers = {rxplaceholder_234: Buffer(rxplaceholder_236: Pointer(global float32), float32, [64i64, 3i64, 7i64, 7i64], []),
             rxplaceholder_235: Buffer(rxplaceholder_237: Pointer(global float32), float32, [3i64, 1, 1], []),
             T_multiply_22: Buffer(T_multiply_23: Pointer(global float32), float32, [64i64, 3i64, 7i64, 7i64], [])}
  buffer_map = {var_rxplaceholder_117: rxplaceholder_234, var_rxplaceholder_118: rxplaceholder_235, var_T_multiply_11: T_multiply_22} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_125: int64, 0i64, 64i64) {
      for (i1_111: int64, 0i64, 3i64) {
        for (i2_96: int64, 0i64, 7i64) {
          for (i3_89: int64, 0i64, 7i64) {
            block([64i64, 3i64, 7i64, 7i64], "T_multiply") as [ax0_56, ax1_42, ax2_39, ax3_33] {
              bind(ax0_56, i0_125)
              bind(ax1_42, i1_111)
              bind(ax2_39, i2_96)
              bind(ax3_33, i3_89)
              tir.reads([rxplaceholder_234[ax0_56, ax1_42, ax2_39, ax3_33], rxplaceholder_235[ax1_42, 0i64, 0i64]])
              tir.writes([T_multiply_22[ax0_56, ax1_42, ax2_39, ax3_33]])
              T_multiply_22[ax0_56, ax1_42, ax2_39, ax3_33] = (rxplaceholder_234[ax0_56, ax1_42, ax2_39, ax3_33]*rxplaceholder_235[ax1_42, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply4 = primfn(var_rxplaceholder_119: handle, var_rxplaceholder_120: handle, var_T_multiply_12: handle) -> ()
  attr = {"global_symbol": "multiply4", "tir.noalias": True}
  buffers = {rxplaceholder_238: Buffer(rxplaceholder_240: Pointer(global float32), float32, [1, 64, 56, 56], []),
             rxplaceholder_239: Buffer(rxplaceholder_241: Pointer(global float32), float32, [1, 64i64, 1, 1], []),
             T_multiply_24: Buffer(T_multiply_25: Pointer(global float32), float32, [1, 64i64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_119: rxplaceholder_238, var_rxplaceholder_120: rxplaceholder_239, var_T_multiply_12: T_multiply_24} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_126: int32, 0, 1) {
      for (i1_112: int64, 0i64, 64i64) {
        for (i2_97: int32, 0, 56) {
          for (i3_90: int32, 0, 56) {
            block([1, 64i64, 56, 56], "T_multiply") as [ax0_57, ax1_43, ax2_40, ax3_34] {
              bind(ax0_57, i0_126)
              bind(ax1_43, i1_112)
              bind(ax2_40, i2_97)
              bind(ax3_34, i3_90)
              tir.reads([rxplaceholder_238[ax0_57, ax1_43, ax2_40, ax3_34], rxplaceholder_239[ax0_57, ax1_43, 0, 0]])
              tir.writes([T_multiply_24[ax0_57, ax1_43, ax2_40, ax3_34]])
              T_multiply_24[ax0_57, ax1_43, ax2_40, ax3_34] = (rxplaceholder_238[ax0_57, ax1_43, ax2_40, ax3_34]*rxplaceholder_239[ax0_57, ax1_43, 0, 0])
          }
        }
      }
    }
}

@multiply5 = primfn(var_rxplaceholder_121: handle, var_rxplaceholder_122: handle, var_T_multiply_13: handle) -> ()
  attr = {"global_symbol": "multiply5", "tir.noalias": True}
  buffers = {rxplaceholder_242: Buffer(rxplaceholder_244: Pointer(global float32), float32, [64i64, 64i64, 3i64, 3i64], []),
             rxplaceholder_243: Buffer(rxplaceholder_245: Pointer(global float32), float32, [64i64, 1, 1, 1], []),
             T_multiply_26: Buffer(T_multiply_27: Pointer(global float32), float32, [64i64, 64i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_121: rxplaceholder_242, var_rxplaceholder_122: rxplaceholder_243, var_T_multiply_13: T_multiply_26} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_127: int64, 0i64, 64i64) {
      for (i1_113: int64, 0i64, 64i64) {
        for (i2_98: int64, 0i64, 3i64) {
          for (i3_91: int64, 0i64, 3i64) {
            block([64i64, 64i64, 3i64, 3i64], "T_multiply") as [ax0_58, ax1_44, ax2_41, ax3_35] {
              bind(ax0_58, i0_127)
              bind(ax1_44, i1_113)
              bind(ax2_41, i2_98)
              bind(ax3_35, i3_91)
              tir.reads([rxplaceholder_242[ax0_58, ax1_44, ax2_41, ax3_35], rxplaceholder_243[ax0_58, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_26[ax0_58, ax1_44, ax2_41, ax3_35]])
              T_multiply_26[ax0_58, ax1_44, ax2_41, ax3_35] = (rxplaceholder_242[ax0_58, ax1_44, ax2_41, ax3_35]*rxplaceholder_243[ax0_58, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply6 = primfn(var_rxplaceholder_123: handle, var_rxplaceholder_124: handle, var_T_multiply_14: handle) -> ()
  attr = {"global_symbol": "multiply6", "tir.noalias": True}
  buffers = {rxplaceholder_246: Buffer(rxplaceholder_248: Pointer(global float32), float32, [128i64], []),
             rxplaceholder_247: Buffer(rxplaceholder_249: Pointer(global float32), float32, [128i64], []),
             T_multiply_28: Buffer(T_multiply_29: Pointer(global float32), float32, [128i64], [])}
  buffer_map = {var_rxplaceholder_123: rxplaceholder_246, var_rxplaceholder_124: rxplaceholder_247, var_T_multiply_14: T_multiply_28} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_128: int64, 0i64, 128i64) {
      block([128i64], "T_multiply") as [ax0_59] {
        bind(ax0_59, i0_128)
        tir.reads([rxplaceholder_246[ax0_59], rxplaceholder_247[ax0_59]])
        tir.writes([T_multiply_28[ax0_59]])
        T_multiply_28[ax0_59] = (rxplaceholder_246[ax0_59]*rxplaceholder_247[ax0_59])
    }
}

@multiply7 = primfn(var_rxplaceholder_125: handle, var_rxplaceholder_126: handle, var_T_multiply_15: handle) -> ()
  attr = {"global_symbol": "multiply7", "tir.noalias": True}
  buffers = {rxplaceholder_250: Buffer(rxplaceholder_252: Pointer(global float32), float32, [128i64, 64i64, 3i64, 3i64], []),
             rxplaceholder_251: Buffer(rxplaceholder_253: Pointer(global float32), float32, [128i64, 1, 1, 1], []),
             T_multiply_30: Buffer(T_multiply_31: Pointer(global float32), float32, [128i64, 64i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_125: rxplaceholder_250, var_rxplaceholder_126: rxplaceholder_251, var_T_multiply_15: T_multiply_30} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_129: int64, 0i64, 128i64) {
      for (i1_114: int64, 0i64, 64i64) {
        for (i2_99: int64, 0i64, 3i64) {
          for (i3_92: int64, 0i64, 3i64) {
            block([128i64, 64i64, 3i64, 3i64], "T_multiply") as [ax0_60, ax1_45, ax2_42, ax3_36] {
              bind(ax0_60, i0_129)
              bind(ax1_45, i1_114)
              bind(ax2_42, i2_99)
              bind(ax3_36, i3_92)
              tir.reads([rxplaceholder_250[ax0_60, ax1_45, ax2_42, ax3_36], rxplaceholder_251[ax0_60, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_30[ax0_60, ax1_45, ax2_42, ax3_36]])
              T_multiply_30[ax0_60, ax1_45, ax2_42, ax3_36] = (rxplaceholder_250[ax0_60, ax1_45, ax2_42, ax3_36]*rxplaceholder_251[ax0_60, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@multiply8 = primfn(var_rxplaceholder_127: handle, var_rxplaceholder_128: handle, var_T_multiply_16: handle) -> ()
  attr = {"global_symbol": "multiply8", "tir.noalias": True}
  buffers = {rxplaceholder_254: Buffer(rxplaceholder_256: Pointer(global float32), float32, [1, 128, 28, 28], []),
             rxplaceholder_255: Buffer(rxplaceholder_257: Pointer(global float32), float32, [1, 128i64, 1, 1], []),
             T_multiply_32: Buffer(T_multiply_33: Pointer(global float32), float32, [1, 128i64, 28, 28], [])}
  buffer_map = {var_rxplaceholder_127: rxplaceholder_254, var_rxplaceholder_128: rxplaceholder_255, var_T_multiply_16: T_multiply_32} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_130: int32, 0, 1) {
      for (i1_115: int64, 0i64, 128i64) {
        for (i2_100: int32, 0, 28) {
          for (i3_93: int32, 0, 28) {
            block([1, 128i64, 28, 28], "T_multiply") as [ax0_61, ax1_46, ax2_43, ax3_37] {
              bind(ax0_61, i0_130)
              bind(ax1_46, i1_115)
              bind(ax2_43, i2_100)
              bind(ax3_37, i3_93)
              tir.reads([rxplaceholder_254[ax0_61, ax1_46, ax2_43, ax3_37], rxplaceholder_255[ax0_61, ax1_46, 0, 0]])
              tir.writes([T_multiply_32[ax0_61, ax1_46, ax2_43, ax3_37]])
              T_multiply_32[ax0_61, ax1_46, ax2_43, ax3_37] = (rxplaceholder_254[ax0_61, ax1_46, ax2_43, ax3_37]*rxplaceholder_255[ax0_61, ax1_46, 0, 0])
          }
        }
      }
    }
}

@multiply9 = primfn(var_rxplaceholder_129: handle, var_rxplaceholder_130: handle, var_T_multiply_17: handle) -> ()
  attr = {"global_symbol": "multiply9", "tir.noalias": True}
  buffers = {rxplaceholder_258: Buffer(rxplaceholder_260: Pointer(global float32), float32, [128i64, 128i64, 3i64, 3i64], []),
             rxplaceholder_259: Buffer(rxplaceholder_261: Pointer(global float32), float32, [128i64, 1, 1, 1], []),
             T_multiply_34: Buffer(T_multiply_35: Pointer(global float32), float32, [128i64, 128i64, 3i64, 3i64], [])}
  buffer_map = {var_rxplaceholder_129: rxplaceholder_258, var_rxplaceholder_130: rxplaceholder_259, var_T_multiply_17: T_multiply_34} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_131: int64, 0i64, 128i64) {
      for (i1_116: int64, 0i64, 128i64) {
        for (i2_101: int64, 0i64, 3i64) {
          for (i3_94: int64, 0i64, 3i64) {
            block([128i64, 128i64, 3i64, 3i64], "T_multiply") as [ax0_62, ax1_47, ax2_44, ax3_38] {
              bind(ax0_62, i0_131)
              bind(ax1_47, i1_116)
              bind(ax2_44, i2_101)
              bind(ax3_38, i3_94)
              tir.reads([rxplaceholder_258[ax0_62, ax1_47, ax2_44, ax3_38], rxplaceholder_259[ax0_62, 0i64, 0i64, 0i64]])
              tir.writes([T_multiply_34[ax0_62, ax1_47, ax2_44, ax3_38]])
              T_multiply_34[ax0_62, ax1_47, ax2_44, ax3_38] = (rxplaceholder_258[ax0_62, ax1_47, ax2_44, ax3_38]*rxplaceholder_259[ax0_62, 0i64, 0i64, 0i64])
          }
        }
      }
    }
}

@negative = primfn(var_rxplaceholder_131: handle, var_T_negative: handle) -> ()
  attr = {"global_symbol": "negative", "tir.noalias": True}
  buffers = {rxplaceholder_262: Buffer(rxplaceholder_263: Pointer(global float32), float32, [3i64], []),
             T_negative: Buffer(T_negative_1: Pointer(global float32), float32, [3i64], [])}
  buffer_map = {var_rxplaceholder_131: rxplaceholder_262, var_T_negative: T_negative} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_132: int64, 0i64, 3i64) {
      block([3i64], "T_negative") as [ax0_63] {
        bind(ax0_63, i0_132)
        tir.reads([rxplaceholder_262[ax0_63]])
        tir.writes([T_negative[ax0_63]])
        T_negative[ax0_63] = (0f32 - rxplaceholder_262[ax0_63])
    }
}

@negative1 = primfn(var_rxplaceholder_132: handle, var_T_negative_1: handle) -> ()
  attr = {"global_symbol": "negative1", "tir.noalias": True}
  buffers = {rxplaceholder_264: Buffer(rxplaceholder_265: Pointer(global float32), float32, [64i64], []),
             T_negative_2: Buffer(T_negative_3: Pointer(global float32), float32, [64i64], [])}
  buffer_map = {var_rxplaceholder_132: rxplaceholder_264, var_T_negative_1: T_negative_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_133: int64, 0i64, 64i64) {
      block([64i64], "T_negative") as [ax0_64] {
        bind(ax0_64, i0_133)
        tir.reads([rxplaceholder_264[ax0_64]])
        tir.writes([T_negative_2[ax0_64]])
        T_negative_2[ax0_64] = (0f32 - rxplaceholder_264[ax0_64])
    }
}

@negative2 = primfn(var_rxplaceholder_133: handle, var_T_negative_2: handle) -> ()
  attr = {"global_symbol": "negative2", "tir.noalias": True}
  buffers = {rxplaceholder_266: Buffer(rxplaceholder_267: Pointer(global float32), float32, [128i64], []),
             T_negative_4: Buffer(T_negative_5: Pointer(global float32), float32, [128i64], [])}
  buffer_map = {var_rxplaceholder_133: rxplaceholder_266, var_T_negative_2: T_negative_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_134: int64, 0i64, 128i64) {
      block([128i64], "T_negative") as [ax0_65] {
        bind(ax0_65, i0_134)
        tir.reads([rxplaceholder_266[ax0_65]])
        tir.writes([T_negative_4[ax0_65]])
        T_negative_4[ax0_65] = (0f32 - rxplaceholder_266[ax0_65])
    }
}

@negative3 = primfn(var_rxplaceholder_134: handle, var_T_negative_3: handle) -> ()
  attr = {"global_symbol": "negative3", "tir.noalias": True}
  buffers = {rxplaceholder_268: Buffer(rxplaceholder_269: Pointer(global float32), float32, [256i64], []),
             T_negative_6: Buffer(T_negative_7: Pointer(global float32), float32, [256i64], [])}
  buffer_map = {var_rxplaceholder_134: rxplaceholder_268, var_T_negative_3: T_negative_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_135: int64, 0i64, 256i64) {
      block([256i64], "T_negative") as [ax0_66] {
        bind(ax0_66, i0_135)
        tir.reads([rxplaceholder_268[ax0_66]])
        tir.writes([T_negative_6[ax0_66]])
        T_negative_6[ax0_66] = (0f32 - rxplaceholder_268[ax0_66])
    }
}

@negative4 = primfn(var_rxplaceholder_135: handle, var_T_negative_4: handle) -> ()
  attr = {"global_symbol": "negative4", "tir.noalias": True}
  buffers = {rxplaceholder_270: Buffer(rxplaceholder_271: Pointer(global float32), float32, [512i64], []),
             T_negative_8: Buffer(T_negative_9: Pointer(global float32), float32, [512i64], [])}
  buffer_map = {var_rxplaceholder_135: rxplaceholder_270, var_T_negative_4: T_negative_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_136: int64, 0i64, 512i64) {
      block([512i64], "T_negative") as [ax0_67] {
        bind(ax0_67, i0_136)
        tir.reads([rxplaceholder_270[ax0_67]])
        tir.writes([T_negative_8[ax0_67]])
        T_negative_8[ax0_67] = (0f32 - rxplaceholder_270[ax0_67])
    }
}

@relu = primfn(var_rxplaceholder_136: handle, var_T_relu: handle) -> ()
  attr = {"global_symbol": "relu", "tir.noalias": True}
  buffers = {rxplaceholder_272: Buffer(rxplaceholder_273: Pointer(global float32), float32, [1, 64i64, 112, 112], []),
             T_relu: Buffer(T_relu_1: Pointer(global float32), float32, [1, 64i64, 112, 112], [])}
  buffer_map = {var_rxplaceholder_136: rxplaceholder_272, var_T_relu: T_relu} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_137: int32, 0, 1) {
      for (i1_117: int64, 0i64, 64i64) {
        for (i2_102: int32, 0, 112) {
          for (i3_95: int32, 0, 112) {
            block([1, 64i64, 112, 112], "T_relu") as [ax0_68, ax1_48, ax2_45, ax3_39] {
              bind(ax0_68, i0_137)
              bind(ax1_48, i1_117)
              bind(ax2_45, i2_102)
              bind(ax3_39, i3_95)
              tir.reads([rxplaceholder_272[ax0_68, ax1_48, ax2_45, ax3_39]])
              tir.writes([T_relu[ax0_68, ax1_48, ax2_45, ax3_39]])
              T_relu[ax0_68, ax1_48, ax2_45, ax3_39] = max(rxplaceholder_272[ax0_68, ax1_48, ax2_45, ax3_39], 0f32)
          }
        }
      }
    }
}

@relu1 = primfn(var_rxplaceholder_137: handle, var_T_relu_1: handle) -> ()
  attr = {"global_symbol": "relu1", "tir.noalias": True}
  buffers = {rxplaceholder_274: Buffer(rxplaceholder_275: Pointer(global float32), float32, [1, 64i64, 56, 56], []),
             T_relu_2: Buffer(T_relu_3: Pointer(global float32), float32, [1, 64i64, 56, 56], [])}
  buffer_map = {var_rxplaceholder_137: rxplaceholder_274, var_T_relu_1: T_relu_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_138: int32, 0, 1) {
      for (i1_118: int64, 0i64, 64i64) {
        for (i2_103: int32, 0, 56) {
          for (i3_96: int32, 0, 56) {
            block([1, 64i64, 56, 56], "T_relu") as [ax0_69, ax1_49, ax2_46, ax3_40] {
              bind(ax0_69, i0_138)
              bind(ax1_49, i1_118)
              bind(ax2_46, i2_103)
              bind(ax3_40, i3_96)
              tir.reads([rxplaceholder_274[ax0_69, ax1_49, ax2_46, ax3_40]])
              tir.writes([T_relu_2[ax0_69, ax1_49, ax2_46, ax3_40]])
              T_relu_2[ax0_69, ax1_49, ax2_46, ax3_40] = max(rxplaceholder_274[ax0_69, ax1_49, ax2_46, ax3_40], 0f32)
          }
        }
      }
    }
}

@relu2 = primfn(var_rxplaceholder_138: handle, var_T_relu_2: handle) -> ()
  attr = {"global_symbol": "relu2", "tir.noalias": True}
  buffers = {rxplaceholder_276: Buffer(rxplaceholder_277: Pointer(global float32), float32, [1, 128i64, 28, 28], []),
             T_relu_4: Buffer(T_relu_5: Pointer(global float32), float32, [1, 128i64, 28, 28], [])}
  buffer_map = {var_rxplaceholder_138: rxplaceholder_276, var_T_relu_2: T_relu_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_139: int32, 0, 1) {
      for (i1_119: int64, 0i64, 128i64) {
        for (i2_104: int32, 0, 28) {
          for (i3_97: int32, 0, 28) {
            block([1, 128i64, 28, 28], "T_relu") as [ax0_70, ax1_50, ax2_47, ax3_41] {
              bind(ax0_70, i0_139)
              bind(ax1_50, i1_119)
              bind(ax2_47, i2_104)
              bind(ax3_41, i3_97)
              tir.reads([rxplaceholder_276[ax0_70, ax1_50, ax2_47, ax3_41]])
              tir.writes([T_relu_4[ax0_70, ax1_50, ax2_47, ax3_41]])
              T_relu_4[ax0_70, ax1_50, ax2_47, ax3_41] = max(rxplaceholder_276[ax0_70, ax1_50, ax2_47, ax3_41], 0f32)
          }
        }
      }
    }
}

@relu3 = primfn(var_rxplaceholder_139: handle, var_T_relu_3: handle) -> ()
  attr = {"global_symbol": "relu3", "tir.noalias": True}
  buffers = {rxplaceholder_278: Buffer(rxplaceholder_279: Pointer(global float32), float32, [1, 256i64, 14, 14], []),
             T_relu_6: Buffer(T_relu_7: Pointer(global float32), float32, [1, 256i64, 14, 14], [])}
  buffer_map = {var_rxplaceholder_139: rxplaceholder_278, var_T_relu_3: T_relu_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_140: int32, 0, 1) {
      for (i1_120: int64, 0i64, 256i64) {
        for (i2_105: int32, 0, 14) {
          for (i3_98: int32, 0, 14) {
            block([1, 256i64, 14, 14], "T_relu") as [ax0_71, ax1_51, ax2_48, ax3_42] {
              bind(ax0_71, i0_140)
              bind(ax1_51, i1_120)
              bind(ax2_48, i2_105)
              bind(ax3_42, i3_98)
              tir.reads([rxplaceholder_278[ax0_71, ax1_51, ax2_48, ax3_42]])
              tir.writes([T_relu_6[ax0_71, ax1_51, ax2_48, ax3_42]])
              T_relu_6[ax0_71, ax1_51, ax2_48, ax3_42] = max(rxplaceholder_278[ax0_71, ax1_51, ax2_48, ax3_42], 0f32)
          }
        }
      }
    }
}

@relu4 = primfn(var_rxplaceholder_140: handle, var_T_relu_4: handle) -> ()
  attr = {"global_symbol": "relu4", "tir.noalias": True}
  buffers = {rxplaceholder_280: Buffer(rxplaceholder_281: Pointer(global float32), float32, [1, 512i64, 7, 7], []),
             T_relu_8: Buffer(T_relu_9: Pointer(global float32), float32, [1, 512i64, 7, 7], [])}
  buffer_map = {var_rxplaceholder_140: rxplaceholder_280, var_T_relu_4: T_relu_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_141: int32, 0, 1) {
      for (i1_121: int64, 0i64, 512i64) {
        for (i2_106: int32, 0, 7) {
          for (i3_99: int32, 0, 7) {
            block([1, 512i64, 7, 7], "T_relu") as [ax0_72, ax1_52, ax2_49, ax3_43] {
              bind(ax0_72, i0_141)
              bind(ax1_52, i1_121)
              bind(ax2_49, i2_106)
              bind(ax3_43, i3_99)
              tir.reads([rxplaceholder_280[ax0_72, ax1_52, ax2_49, ax3_43]])
              tir.writes([T_relu_8[ax0_72, ax1_52, ax2_49, ax3_43]])
              T_relu_8[ax0_72, ax1_52, ax2_49, ax3_43] = max(rxplaceholder_280[ax0_72, ax1_52, ax2_49, ax3_43], 0f32)
          }
        }
      }
    }
}

@rsqrt = primfn(var_rxplaceholder_141: handle, var_tensor_1: handle) -> ()
  attr = {"global_symbol": "rsqrt", "tir.noalias": True}
  buffers = {rxplaceholder_282: Buffer(rxplaceholder_283: Pointer(global float32), float32, [3i64], []),
             tensor_2: Buffer(tensor_3: Pointer(global float32), float32, [3i64], [])}
  buffer_map = {var_rxplaceholder_141: rxplaceholder_282, var_tensor_1: tensor_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_142: int64, 0i64, 3i64) {
      block([3i64], "tensor") as [ax0_73] {
        bind(ax0_73, i0_142)
        tir.reads([rxplaceholder_282[ax0_73]])
        tir.writes([tensor_2[ax0_73]])
        tensor_2[ax0_73] = (1f32 / @tir.sqrt(rxplaceholder_282[ax0_73], dtype=float32))
    }
}

@rsqrt1 = primfn(var_rxplaceholder_142: handle, var_tensor_2: handle) -> ()
  attr = {"global_symbol": "rsqrt1", "tir.noalias": True}
  buffers = {rxplaceholder_284: Buffer(rxplaceholder_285: Pointer(global float32), float32, [64i64], []),
             tensor_4: Buffer(tensor_5: Pointer(global float32), float32, [64i64], [])}
  buffer_map = {var_rxplaceholder_142: rxplaceholder_284, var_tensor_2: tensor_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_143: int64, 0i64, 64i64) {
      block([64i64], "tensor") as [ax0_74] {
        bind(ax0_74, i0_143)
        tir.reads([rxplaceholder_284[ax0_74]])
        tir.writes([tensor_4[ax0_74]])
        tensor_4[ax0_74] = (1f32 / @tir.sqrt(rxplaceholder_284[ax0_74], dtype=float32))
    }
}

@rsqrt2 = primfn(var_rxplaceholder_143: handle, var_tensor_3: handle) -> ()
  attr = {"global_symbol": "rsqrt2", "tir.noalias": True}
  buffers = {rxplaceholder_286: Buffer(rxplaceholder_287: Pointer(global float32), float32, [128i64], []),
             tensor_6: Buffer(tensor_7: Pointer(global float32), float32, [128i64], [])}
  buffer_map = {var_rxplaceholder_143: rxplaceholder_286, var_tensor_3: tensor_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_144: int64, 0i64, 128i64) {
      block([128i64], "tensor") as [ax0_75] {
        bind(ax0_75, i0_144)
        tir.reads([rxplaceholder_286[ax0_75]])
        tir.writes([tensor_6[ax0_75]])
        tensor_6[ax0_75] = (1f32 / @tir.sqrt(rxplaceholder_286[ax0_75], dtype=float32))
    }
}

@rsqrt3 = primfn(var_rxplaceholder_144: handle, var_tensor_4: handle) -> ()
  attr = {"global_symbol": "rsqrt3", "tir.noalias": True}
  buffers = {rxplaceholder_288: Buffer(rxplaceholder_289: Pointer(global float32), float32, [256i64], []),
             tensor_8: Buffer(tensor_9: Pointer(global float32), float32, [256i64], [])}
  buffer_map = {var_rxplaceholder_144: rxplaceholder_288, var_tensor_4: tensor_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_145: int64, 0i64, 256i64) {
      block([256i64], "tensor") as [ax0_76] {
        bind(ax0_76, i0_145)
        tir.reads([rxplaceholder_288[ax0_76]])
        tir.writes([tensor_8[ax0_76]])
        tensor_8[ax0_76] = (1f32 / @tir.sqrt(rxplaceholder_288[ax0_76], dtype=float32))
    }
}

@rsqrt4 = primfn(var_rxplaceholder_145: handle, var_tensor_5: handle) -> ()
  attr = {"global_symbol": "rsqrt4", "tir.noalias": True}
  buffers = {rxplaceholder_290: Buffer(rxplaceholder_291: Pointer(global float32), float32, [512i64], []),
             tensor_10: Buffer(tensor_11: Pointer(global float32), float32, [512i64], [])}
  buffer_map = {var_rxplaceholder_145: rxplaceholder_290, var_tensor_5: tensor_10} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_146: int64, 0i64, 512i64) {
      block([512i64], "tensor") as [ax0_77] {
        bind(ax0_77, i0_146)
        tir.reads([rxplaceholder_290[ax0_77]])
        tir.writes([tensor_10[ax0_77]])
        tensor_10[ax0_77] = (1f32 / @tir.sqrt(rxplaceholder_290[ax0_77], dtype=float32))
    }
}

@softmax = primfn(var_rxplaceholder_146: handle, var_T_softmax_norm: handle) -> ()
  attr = {"global_symbol": "softmax", "tir.noalias": True}
  buffers = {rxplaceholder_292: Buffer(rxplaceholder_293: Pointer(global float32), float32, [1, 1000i64], []),
             T_softmax_norm: Buffer(T_softmax_norm_1: Pointer(global float32), float32, [1, 1000i64], [])}
  buffer_map = {var_rxplaceholder_146: rxplaceholder_292, var_T_softmax_norm: T_softmax_norm} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    T_softmax_maxelem = alloc_buffer(float32[1])
    T_softmax_exp = alloc_buffer(float32[1, 1000i64])
    T_softmax_expsum = alloc_buffer(float32[1])
     {
      for (i0_147: int32, 0, 1) {
        for (i1_122: int64, 0i64, 1000i64) {
          block([1, tir.reduce_axis(0, 1000i64)], "T_softmax_maxelem") as [i0_148, k_1] {
            bind(i0_148, i0_147)
            bind(k_1, i1_122)
            tir.reads([rxplaceholder_292[i0_148, k_1]])
            tir.writes([T_softmax_maxelem[i0_148]])
            with init() {
              T_softmax_maxelem[i0_148] = -3.40282e+38f32
            }
            T_softmax_maxelem[i0_148] = max(T_softmax_maxelem[i0_148], rxplaceholder_292[i0_148, k_1])
        }
      }
      for (i0_149: int32, 0, 1) {
        for (i1_123: int64, 0i64, 1000i64) {
          block([1, 1000i64], "T_softmax_exp") as [i0_150, i1_124] {
            bind(i0_150, i0_149)
            bind(i1_124, i1_123)
            tir.reads([rxplaceholder_292[i0_150, i1_124], T_softmax_maxelem[i0_150]])
            tir.writes([T_softmax_exp[i0_150, i1_124]])
            T_softmax_exp[i0_150, i1_124] = @tir.exp((rxplaceholder_292[i0_150, i1_124] - T_softmax_maxelem[i0_150]), dtype=float32)
        }
      }
      for (i0_151: int32, 0, 1) {
        for (i1_125: int64, 0i64, 1000i64) {
          block([1, tir.reduce_axis(0, 1000i64)], "T_softmax_expsum") as [i0_152, k_2] {
            bind(i0_152, i0_151)
            bind(k_2, i1_125)
            tir.reads([T_softmax_exp[i0_152, k_2]])
            tir.writes([T_softmax_expsum[i0_152]])
            with init() {
              T_softmax_expsum[i0_152] = 0f32
            }
            T_softmax_expsum[i0_152] = (T_softmax_expsum[i0_152] + T_softmax_exp[i0_152, k_2])
        }
      }
      for (i0_153: int32, 0, 1) {
        for (i1_126: int64, 0i64, 1000i64) {
          block([1, 1000i64], "T_softmax_norm") as [i0_154, i1_127] {
            bind(i0_154, i0_153)
            bind(i1_127, i1_126)
            tir.reads([T_softmax_exp[i0_154, i1_127], T_softmax_expsum[i0_154]])
            tir.writes([T_softmax_norm[i0_154, i1_127]])
            tir.attrs({"axis": 1})
            T_softmax_norm[i0_154, i1_127] = (T_softmax_exp[i0_154, i1_127] / T_softmax_expsum[i0_154])
        }
      }
    }
}

@squeeze = primfn(var_rxplaceholder_147: handle, var_T_squeeze: handle) -> ()
  attr = {"global_symbol": "squeeze", "tir.noalias": True}
  buffers = {rxplaceholder_294: Buffer(rxplaceholder_295: Pointer(global float32), float32, [3i64, 1, 1], []),
             T_squeeze: Buffer(T_squeeze_1: Pointer(global float32), float32, [3i64], [])}
  buffer_map = {var_rxplaceholder_147: rxplaceholder_294, var_T_squeeze: T_squeeze} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_155: int64, 0i64, 3i64) {
      block([3i64], "T_squeeze") as [ax0_78] {
        bind(ax0_78, i0_155)
        tir.reads([rxplaceholder_294[ax0_78, 0, 0]])
        tir.writes([T_squeeze[ax0_78]])
        T_squeeze[ax0_78] = rxplaceholder_294[ax0_78, 0, 0]
    }
}

@squeeze1 = primfn(var_rxplaceholder_148: handle, var_T_squeeze_1: handle) -> ()
  attr = {"global_symbol": "squeeze1", "tir.noalias": True}
  buffers = {rxplaceholder_296: Buffer(rxplaceholder_297: Pointer(global float32), float32, [64i64, 1, 1], []),
             T_squeeze_2: Buffer(T_squeeze_3: Pointer(global float32), float32, [64i64], [])}
  buffer_map = {var_rxplaceholder_148: rxplaceholder_296, var_T_squeeze_1: T_squeeze_2} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_156: int64, 0i64, 64i64) {
      block([64i64], "T_squeeze") as [ax0_79] {
        bind(ax0_79, i0_156)
        tir.reads([rxplaceholder_296[ax0_79, 0, 0]])
        tir.writes([T_squeeze_2[ax0_79]])
        T_squeeze_2[ax0_79] = rxplaceholder_296[ax0_79, 0, 0]
    }
}

@squeeze2 = primfn(var_rxplaceholder_149: handle, var_T_squeeze_2: handle) -> ()
  attr = {"global_symbol": "squeeze2", "tir.noalias": True}
  buffers = {rxplaceholder_298: Buffer(rxplaceholder_299: Pointer(global float32), float32, [128i64, 1, 1], []),
             T_squeeze_4: Buffer(T_squeeze_5: Pointer(global float32), float32, [128i64], [])}
  buffer_map = {var_rxplaceholder_149: rxplaceholder_298, var_T_squeeze_2: T_squeeze_4} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_157: int64, 0i64, 128i64) {
      block([128i64], "T_squeeze") as [ax0_80] {
        bind(ax0_80, i0_157)
        tir.reads([rxplaceholder_298[ax0_80, 0, 0]])
        tir.writes([T_squeeze_4[ax0_80]])
        T_squeeze_4[ax0_80] = rxplaceholder_298[ax0_80, 0, 0]
    }
}

@squeeze3 = primfn(var_rxplaceholder_150: handle, var_T_squeeze_3: handle) -> ()
  attr = {"global_symbol": "squeeze3", "tir.noalias": True}
  buffers = {rxplaceholder_300: Buffer(rxplaceholder_301: Pointer(global float32), float32, [256i64, 1, 1], []),
             T_squeeze_6: Buffer(T_squeeze_7: Pointer(global float32), float32, [256i64], [])}
  buffer_map = {var_rxplaceholder_150: rxplaceholder_300, var_T_squeeze_3: T_squeeze_6} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_158: int64, 0i64, 256i64) {
      block([256i64], "T_squeeze") as [ax0_81] {
        bind(ax0_81, i0_158)
        tir.reads([rxplaceholder_300[ax0_81, 0, 0]])
        tir.writes([T_squeeze_6[ax0_81]])
        T_squeeze_6[ax0_81] = rxplaceholder_300[ax0_81, 0, 0]
    }
}

@squeeze4 = primfn(var_rxplaceholder_151: handle, var_T_squeeze_4: handle) -> ()
  attr = {"global_symbol": "squeeze4", "tir.noalias": True}
  buffers = {rxplaceholder_302: Buffer(rxplaceholder_303: Pointer(global float32), float32, [512i64, 1, 1], []),
             T_squeeze_8: Buffer(T_squeeze_9: Pointer(global float32), float32, [512i64], [])}
  buffer_map = {var_rxplaceholder_151: rxplaceholder_302, var_T_squeeze_4: T_squeeze_8} {
  block([], "root") {
    tir.reads([])
    tir.writes([])
    for (i0_159: int64, 0i64, 512i64) {
      block([512i64], "T_squeeze") as [ax0_82] {
        bind(ax0_82, i0_159)
        tir.reads([rxplaceholder_302[ax0_82, 0, 0]])
        tir.writes([T_squeeze_8[ax0_82]])
        T_squeeze_8[ax0_82] = rxplaceholder_302[ax0_82, 0, 0]
    }
}


